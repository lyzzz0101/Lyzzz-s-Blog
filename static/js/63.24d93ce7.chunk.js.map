{"version":3,"sources":["components/Blog/posts/LearnD3/LearnD3ChangeData.jsx","components/_ui/Expandy/Expandy.jsx","components/_ui/InlineExpandy/InlineExpandy.jsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_emoji_render__WEBPACK_IMPORTED_MODULE_1__","components_ui_Aside_Aside__WEBPACK_IMPORTED_MODULE_2__","components_ui_InlineExpandy_InlineExpandy__WEBPACK_IMPORTED_MODULE_4__","components_ui_Link_Link__WEBPACK_IMPORTED_MODULE_5__","components_ui_Icon_Icon__WEBPACK_IMPORTED_MODULE_6__","components_ui_List_List__WEBPACK_IMPORTED_MODULE_7__","components_ui_Code_Code__WEBPACK_IMPORTED_MODULE_8__","LearnChangeData","_ref","onScrollToSectionLocal","a","createElement","className","href","icon","style","color","name","items","Fragment","svg","text","P","to","onClick","hasNumbers","canEval","fileName","DocsLink","id","size","top","left","strokeWidth","fill","description","autoplay","loop","muted","width","maxWidth","src","type","_ref2","children","_ref3","concat","Expandy","trigger","triggerExpandText","doHideIfCollapsed","props","Object","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","_useState","useState","_useState2","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isExpanded","setIsExpanded","ref","useRef","react__WEBPACK_IMPORTED_MODULE_2___default","assign","onToggle","e","target","open","components_ui_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_4__","contents","components_ui_Icon_Icon__WEBPACK_IMPORTED_MODULE_3__","direction","InlineExpandy"],"mappings":"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","file":"static/js/63.24d93ce7.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport { Twemoji } from \"react-emoji-render\"\n\nimport Aside from \"components/_ui/Aside/Aside\"\nimport Expandy from \"components/_ui/Expandy/Expandy\"\nimport InlineExpandy from \"components/_ui/InlineExpandy/InlineExpandy\"\nimport Link from \"components/_ui/Link/Link\"\nimport Icon from \"components/_ui/Icon/Icon\"\nimport List from \"components/_ui/List/List\"\nimport Code from \"components/_ui/Code/Code\"\nimport { ReadMore } from \"./LearnD3\"\nimport bookImage from \"images/book.png\";\n\nconst LearnChangeData = ({ onScrollToSectionLocal }) => {\n    return (\n        <div className=\"LearnChangeData\">\n            <p>\n                Now that we've grabbed our data, we need to cajole it into a format that we can work with. <b>d3</b> has a module that comes in very handy when transforming and querying data:\n            </p>\n\n            <h3>d3-array</h3>\n\n            <p>\n                Let's start by talking about <i>what <Link href=\"https://github.com/d3/d3-array\"><b>d3-array</b></Link> doesn't cover</i>:\n            </p>\n\n            <List icon={<Icon style={{ color: \"#e6672d\" }} className=\"List__item__icon\" name=\"x\" />} items={[\n                <>\n                    <b>Expensive data manipulation</b>\n                    <p>\n                        This should really happen before we access data on our website, since long-running tasks can slow down our users' devices (especially if they're using an older phone)\n                    </p>\n                </>,\n                <>\n                    <b>Native Javascript methods</b>\n                    <p>\n                        Vanilla Javascript is pretty powerful these days - there are many methods already available in browsers that can help with transforming data. <Link href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_methods\">Here is a full list of Array methods.</Link>\n                    </p>\n                    <p>\n                        Some of these methods were covered in <Link href=\"https://github.com/d3/d3-collection\"><b>d3-collection</b></Link>, which is now deprecated because we don't need a special library anymore!  <Twemoji svg text=\":confetti_ball:\" />\n                    </p>\n                </>,\n            ]} />\n\n            <p>\n                So what <i>can</i> we do with <Link href=\"https://github.com/d3/d3-array\"><b>d3-array</b></Link>?\n            </p>\n\n            <h5>Basic statistics</h5>\n\n            <p>\n                There are 11 methods in <Link href=\"https://github.com/d3/d3-array\"><b>d3-array</b></Link> that help answer basic questions about a dataset.\n            </p>\n\n            <p>\n                The methods that probably get the most use are the ones that will find the highest and lowest value (<P>d3.max()</P> / <P>d3.min()</P>), and the method that returns the extremes (<P>d3.extent()</P>). These come in handy when creating a <b>scale</b> (which we cover in the <Link to=\"#converting-between-data-domains\" onClick={onScrollToSectionLocal(\"converting-between-data-domains\")}>Modules for converting between data domains</Link> section).\n            </p>\n\n            <p>\n                There are also methods for finding other statistics, like <P>d3.mean()</P>, <P>d3.median()</P>, <P>d3.quantile()</P>, <P>d3.variance()</P>, and <P>d3.deviation()</P>.\n            </p>\n\n            <p>\n                To use any of these methods, we want to call it with two parameters:\n            </p>\n\n            <List items={[\n                <>\n                    <b>our dataset</b>\n                    <p>The first parameter needs to be an array containing the values we're interested in</p>\n                </>,\n                <>\n                    <b>an accessor function</b> (optional)\n                    <p>The second parameter will tell <b>d3</b> <i>how to find a value within one data point</i>. This defaults to an identity function (<P>d => d</P>), which means that this parameter is unnecessary if our <b>dataset</b> is an array of values.</p>\n                </>,\n            ]} hasNumbers />\n\n            <p>\n                For example, let's find the <b>mean</b> of this list of temperatures:\n            </p>\n\n            <Code canEval fileName={<>In your browser’s Dev Tools <b>Console</b> tab</>}>\n                {`const dataset = [{\n    date: \"2019-10-10\",\n    temp: 10,\n},{\n    date: \"2019-10-11\",\n    temp: 12,\n}]\n\nconst mean = d3.mean(dataset, d => d.temp)\nalert(mean)`}\n            </Code>\n\n            <h5>\n                Questions about order\n            </h5>\n\n            <p>\n                <b>d3-array</b> can also help with finding specific items in an array in two main ways:\n            </p>\n\n            <List items={[\n                <>\n                    <b>Find the item with the smallest value.</b>\n                    <p>\n                        <DocsLink id=\"least\" /> will return the item and <DocsLink id=\"leastIndex\" /> will return the item's index.\n                    </p>\n                </>,\n                <>\n                    <b>Find the item <i>nearest to</i> a specific value.</b>\n                    <p>\n                        <DocsLink id=\"bisect\" /> will take a sorted array and a value and return the <i>index at which the value would fit</i>.\n                    </p>\n                    <p>\n                        For example, we can find where the number <P>12</P> would fit in this array:\n                    </p>\n                    <Code canEval fileName={<>In your browser’s Dev Tools <b>Console</b> tab</>}>\n{`const array = [10, 20, 30, 40, 50, 60]\nconst nearestValueIndex = d3.bisect(array, 12)\nalert(nearestValueIndex) // is 1\n// compiled array: [10, 12, 20, 30...]`}\n                    </Code>\n                    <p>\n                        There are a few similar <b>bisect</b> functions for things like using an accessor or comparator function (<DocsLink id=\"bisector\" />) or specifying whether you want the index to be lower than (<DocsLink id=\"bisectLeft\" />) or higher than (<DocsLink id=\"bisectRight\" />) existing matching values.\n                    </p>\n                    <Aside icon=\"tooltip\">\n                        <Icon className=\"Aside__icon\" name=\"asterisk\" size=\"l\" style={{\n                            top: \"1.16em\",\n                            left: \"-0.13em\",\n                            strokeWidth: 0,\n                            fill: \"#bdbdcf\"\n                        }} />\n                        These <b>bisector</b> functions are very handy when creating tooltips - finding the closest point to the user's cursor is a great way to make a chart easy to interact with.\n                    </Aside>\n                    <p>\n                        There are also two handy comparator functions that you can use: <DocsLink id=\"ascending\" /> and  <DocsLink id=\"descending\" />\n                    </p>\n                </>,\n            ]} />\n\n            <h5>\n                Transformations\n            </h5>\n\n            <p>\n                There are a handful of <b>d3-array</b> functions that would look at home in a utility library like <Link href=\"https://lodash.com/\">Lodash</Link>. These allow you to do things like:\n            </p>\n\n            <List items={[\n                <>\n                    Group a list of objects by a specific key: <DocsLink id=\"group\" /> returned the grouped objects and <DocsLink id=\"rollup\" /> returned the grouped indices\n                </>,\n                <>\n                    Create a list of permutations of two arrays: <DocsLink id=\"cross\" />\n                </>,\n                <>\n                    Create a new array by pulling items at specific indices or keys: <DocsLink id=\"permute\" />\n                </>,\n                <>\n                    Shuffle the items of array: <DocsLink id=\"shuffle\" />\n                </>,\n                <>\n                    Create an array counting between two numbers: <DocsLink id=\"range\" />\n                </>,\n                <>\n                    Zip two arrays: <DocsLink id=\"zip\" />\n                </>,\n            ]} />\n\n            <Aside>\n                <b>Note that some of these methods aren't yet available in the core d3 package.</b>\n                <InlineExpandy description=\"new packages\">\n                    <DocsLink id=\"quickselect\" />, <DocsLink id=\"group\" />, <DocsLink id=\"rollup\" />, <DocsLink id=\"bin\" />, <DocsLink id=\"count\" />, <DocsLink id=\"minIndex\" />, <DocsLink id=\"maxIndex\" />, <DocsLink id=\"least\" />, <DocsLink id=\"leastIndex\" />, <DocsLink id=\"groups\" />, <DocsLink id=\"rollups\" />\n                </InlineExpandy>\n                <p>\n                    To check this yourself, the module versions are in <Link href=\"https://github.com/d3/d3/blob/master/package.json#L42-L72\">the main d3 packages.json file</Link> and the Changelog for a module is in <Link href=\"https://github.com/d3/d3-array/releases\">its Releases list</Link>.\n                </p>\n                <p>\n                    In order to use these new methods, make sure that you're importing <b>d3-array</b>, version 2+.\n                </p>\n            </Aside>\n\n            <h5>\n                Binning\n            </h5>\n\n            <p>\n                There is also <Link href=\"https://github.com/d3/d3-array#bins\">a group of <b>d3-array</b> methods</Link> that will chunk a dataset into bins. This is really helpful for creating bucketed charts like <Link href=\"https://en.wikipedia.org/wiki/Histogram\">histograms</Link>.\n            </p>\n\n            <h3>d3-random</h3>\n\n            <p>\n                Sometimes data visualization requires random numbers - like when you need to generate test data. I've also used random numbers to add jitter to help space out points on a chart -- helpful as long as it's clear that the jitter doesn't represent any data!\n            </p>\n\n            <p>\n                Our browsers have a built-in <P>Math.random()</P> function, which is good for simple use-cases. But what if you want your random data to have structure?\n            </p>\n            <p>\n                <b>d3-random</b> lets you create random numbers with specific distributions. For example, the normal distribution (<Link href=\"https://github.com/d3/d3-random#randomNormal\"><P>d3.randomNormal()</P></Link>) is helpful for generating numbers that are <b>normally distributed</b> around a specific value.\n            </p>\n\n            <p>\n                For example, this abandoned prototype is using <P>d3.randomNormal()</P> to space out moving \"dashes\" so that they are mostly grouped around a single vector, but some are further out to make the traffic a bit easier to parse.\n            </p>\n\n            <video autoplay=\"\" loop={true} muted={true} style={{\n                width: \"20em\",\n                maxWidth: \"100%\",\n            }}>\n                <source src=\"https://video.twimg.com/tweet_video/D6vJcd7XsAAus4b.mp4\" type=\"video/mp4\" />\n            </video>\n\n            <h3>Others?</h3>\n\n            <p>\n                These modules are explicitly devoted to creating/manipulating data, but there are also specific methods in other modules that are catered towards a specific type of visualization.\n            </p>\n            <p>\n                For example, <Link href=\"https://github.com/d3/d3-hierarchy\"><b>d3-hierarchy</b></Link> has a method (<P>d3.hierarchy()</P>) that will convert data into a specific nested structure that it can then visualize.\n            </p>\n\n            <p>\n                We'll talk more about these use-case driven data manipulation functions in the <Link to=\"#specific-visualizations\" onClick={onScrollToSectionLocal(\"specific-visualizations\")}>Modules for specific visualizations</Link> section.\n            </p>\n\n            {/* <ReadMore id=\"dsv\" /> */}\n\n        </div>\n    )\n}\n\nexport default LearnChangeData\n\n\nconst P = ({ children }) => (\n    <code className=\"P\">{children}</code>\n)\n\n\nconst DocsLink = ({ id }) => (\n    <Link href={`https://github.com/d3/d3-array#${id}`}>\n        <P>\n            d3.{id}()\n        </P>\n    </Link>\n)\n","import React, { useState, useRef } from 'react'\nimport Icon from \"components/_ui/Icon/Icon\";\nimport Tooltip from \"components/_ui/Tooltip/Tooltip\";\nimport { scrollTo } from \"utils.js\"\n\nimport './Expandy.scss';\n\nconst Expandy = ({ trigger, triggerExpandText, doHideIfCollapsed=false, className, children, ...props }) => {\n    const [isExpanded, setIsExpanded] = useState(false)\n    const ref = useRef()\n\n    // const onToggleExpanded = () => {\n    //     setIsExpanded(!isExpanded)\n\n    //     if (isExpanded) {\n    //         const top = ref.current.getBoundingClientRect().top\n    //         if (top > window.innerHeight * 0.3) return\n    //         const y = top\n    //             + window.scrollY\n    //             - window.innerHeight * 0.3\n    //         scrollTo(y, 600)\n    //     }\n    // }\n\n    return (\n        <details className={`Expandy Expandy--is-${isExpanded ? \"expanded\" : \"collapsed\"} ${className}`} {...props} ref={ref}\n            onToggle={e => {\n                const isExpanded = e.target.open\n                setIsExpanded(isExpanded)\n        }}>\n            <summary>\n            <div className=\"Expandy__trigger button-no-appearance\" >\n                <div className=\"Expandy__trigger__text\">\n                    <b>{ trigger }</b>\n                    <div className=\"Expandy__trigger__info\">\n                        { triggerExpandText || `tap me ${isExpanded ? \"to hide\" : \"for more\" } details` }\n                    </div>\n                </div>\n                <div className=\"Expandy__trigger__mark\">ἰ</div>\n            </div>\n\n            <Tooltip\n                className=\"Expandy__toggle\"\n                contents={<button className=\"button-no-appearance\">{isExpanded ? \"Collapse me\" : \"Expand me\"}</button>}\n                >\n                <div className=\"Expandy__toggle__arrow Expandy__toggle__arrow--up\">\n                    <Icon name=\"arrow\" direction=\"n\" size=\"s\" />\n                </div>\n                <div className=\"Expandy__toggle__arrow Expandy__toggle__arrow--down\">\n                    <Icon name=\"arrow\" direction=\"s\" size=\"s\" />\n                </div>\n                </Tooltip>\n                </summary>\n            <div className=\"Expandy__contents\">\n                {children }\n            </div>\n        </details>\n    )\n}\n\nexport default Expandy\n","import React, { useState, useRef } from 'react'\nimport Icon from \"components/_ui/Icon/Icon\"\n\nimport './InlineExpandy.scss';\n\nconst InlineExpandy = ({ description, className, children, ...props }) => {\n    const [isExpanded, setIsExpanded] = useState(false)\n\n    const onToggleExpanded = () => {\n        setIsExpanded(!isExpanded)\n    }\n\n    return (\n        <div className={`InlineExpandy InlineExpandy--is-${isExpanded ? \"expanded\" : \"collapsed\"} ${className}`} {...props}>\n            <div className=\"InlineExpandy__trigger\" onClick={onToggleExpanded}>\n                { isExpanded ? \"Hide\" : \"Show\" } { description }...\n            </div>\n\n            {isExpanded && (\n                <div className=\"InlineExpandy__contents\">\n                    { children }\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default InlineExpandy\n"],"sourceRoot":""}