{"version":3,"sources":["components/Articles/WDVP/similar_countries.png","components/Articles/WDVP/similar_metrics.png","components/Articles/WDVP/Economic_vs_Social_plot_only.jpg","components/Articles/WDVP/Governing_vs_Social_plot_only.jpg","components/Articles/WDVP/Governing_vs_Economic_plot_only.jpg","components/Articles/WDVP/WDVPBars.jsx","components/Articles/WDVP/WDVPMetrics.jsx","components/Articles/WDVP/WDVPGrandPoobah.jsx","components/Articles/WDVP/WDVP.jsx","components/_ui/Chart/Chart.jsx","components/_ui/Chart/Axis/Axis.jsx","components/_ui/RadioGroup/RadioGroup.jsx","components/_ui/Chart/utils/scale.js","components/Articles/WDVP/selectStyles.js","components/Articles/WDVP/WDVPMap.jsx","components/Articles/WDVP/WDVPScatter.jsx"],"names":["module","exports","__webpack_require__","p","OrbitControls","OrbitControlsGenerator","THREE","continents","code","value","color","continentColors","_","fromPairs","map","continent","blackAndWhiteColorScale","d3","interpolateRdYlGn","i","Object","objectSpread2","length","percentileOrRawOptions","label","colorModeOptions","defaultMetrics","metricRankedCorrelationData","filteredMetrics","sortBy","without","toLower","metricCorrelationSorts","metric","fieldname","RankedCorrelationWithOtherFields","formatNumber","WDVPBars","props","_this","classCallCheck","this","_super","call","chart","React","createRef","createScales","_this$state","state","sort","selectedContinents","isAscending","sortedMetrics","index","selectedContinentValues","sortedData","orderBy","rawData","d","concat","metricsOrder","countryOrder","country","Country","filteredData","isEmpty","filter","includes","Continent","scales","createScale","domain","range","setState","processedData","metrics","onChangeSort","isShowingPercentile","onContinentsSelect","onColorModeOptionsSelect","newVal","colorMode","onIsShowingPercentileSelect","onCountryHover","hoveredCountry","onChangeHoveredCountry","classNames","className","_React$createElement","_this2","_this$state2","react_default","a","createElement","getClassName","WDVPBars_WDVPBarsChart","data","visibleContinents","defineProperty","RadioGroup","options","onChange","metricsInfo","style","order","key","onClick","notes","source","year","Component","barDimension","xBarTotalDimension","zBarTotalDimension","xAxisLength","zAxisLength","yScale","yPercentileScale","metricIndexScale","WDVPBarsChart","width","window","innerWidth","height","margins","top","right","bottom","left","container","xLabel","zLabel","mouse","x","y","hoveredCountryObject","isInView","countryIndexScale","onMouseMove","e","_this3","offsetX","containerBounds","offsetY","updateIntersects","onResize","current","getBoundingClientRect","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","devicePixelRatio","renderScene","initScene","_this3$state","scene","position","set","background","light1","add","light3","light4","raycaster","appendChild","domElement","updateMatrixWorld","controls","enableZoom","lookAt","addEventListener","document","observer","IntersectionObserver","debouncedOnVisibilityChange","threshold","observe","drawAxes","initBars","onVisibilityChange","_isMounted","bounds","boundingClientRect","innerHeight","isIntersecting","Math","abs","TWEEN","getAll","animate","debounce","material","xGeometry","xVertices","Float32Array","setAttribute","xAxis","zGeometry","zVertices","zAxis","time","update","requestAnimationFrame","setFromCamera","closestIntersect","intersectObjects","children","intersectName","object","name","_this3$props","onFinishedHoveringCountry","setStyle","barData","userData","isFinite","updateAxisLabelsPosition","xVector","get2DCoords","x2Vector","zVector","z2Vector","xRotation","atan2","PI","zRotation","transform","vector","project","render","createBar","countryIndex","metricIndex","geometry","translate","z","scale","_this3$props2","countries","percentileValue","bar","drawData","drawBar","_ref","_this3$props3","onMetricClick","xTweenCoords","xTween","Tween","to","delay","onUpdate","zTweenCoords","zTween","chain","start","yTweenCoords","yTween","easing","Easing","Quadratic","Out","changeZoom","diff","newZoom","min","max","zoom","zoomTweenAmount","zoomTween","prevProps","removeEventListener","disconnect","ref","PureComponent","WDVPMetrics","_this$props","_this$props2","highlightedCountries","WDVPMetricsChart","defaultProps","memo","valueToNumber","presetNames","presetOptions","presets","preset","metricWeights","zipObject","m","factor","defaultMetricWeights","WDVPGrandPoobah","onMetricWeightsChange","axis","newWeights","debouncedGenerateWeightedData","onMetricWeightsChangeForAxisLocal","randomizeMetrics","xMetric","sample","yMetric","generateWeightedData","xMetricWeights","yMetricWeights","dataWithWeights","xValue","getWeightedValue","yValue","sum","values","xValues","yValues","xDifferences","getDifferences","yDifferences","meanOfXAndY","mean","covarianceMatrix","magicB","magicC","sqB","sqrt","lambda1","lambda2","largerLambda","magicR1","magicR2","magicR3","vectorOfMostVariance","angleOfMostVariance","updateDataWithWeights","filledWeightMetric","arr","weightedCountryMetricValues","keys","onHighlightedCountriesChange","WDVPGrandPoobah_WDVPGrandPoobahSliders","title","startingPresetName","isShowingLabels","href","target","WDVPScatter","Articles_WDVP_WDVPMetrics","WDVPGrandPoobahSliders","isDragging","activePreset","onChangeMetricWeightLocal","selectedMetric","doesNeedDragging","arguments","undefined","newWeight","newMetricWeights","weight","onStartDragging","listener","onStopDragging","onPresetSelect","startingPreset","_this$state3","onMouseDown","onDrag","react_select_browser_esm","classNamePrefix","styles","selectStyles","WDVPGrandPoobah_WDVPGrandPoobahSlidersItem","onChangeNeedsDragging","WDVPGrandPoobahSlidersItem","elem","element","_this4","node","mousePosition","on","objectWithoutProperties","assign","react_slider_default","step","withBars","WDVP","selectedMapCountryName","onSelectMapCountry","WDVP_WDVPMetric","id","WDVPMap","selectedCountryName","Articles_WDVP_WDVPBars","src","similarCountriesImage","similarMetricsImage","fontSize","lineHeight","opacity","Articles_WDVP_WDVPGrandPoobah","Economic_vs_Social_plot_only","Governing_vs_Social_plot_only","Governing_vs_Economic_plot_only","rel","WDVPMetric","require","getHeight","margin","getWidth","Chart","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","isLoaded","WebkitTransform","_setSize","setTimeout","react__WEBPACK_IMPORTED_MODULE_5___default","hasNoListener","line","area","yAxis","brush","hasTooltip","onMouseEnter","onMouseLeave","renderClipPath","getWrapperStyle","noop","orientations","axesMap","Axis","dimension","orientation","tickSize","tickSizeInner","tickSizeOuter","ticks","tickFrequency","tickPadding","tickArguments","format","initTransition","transition","init","getOrientation","tickFormat","duration","newProps","_this$props3","hasInlineLabel","_classNames","_this$props4","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","getStyle","renderLabel","getOptionValue","option","isObject","areSameValue","b","newValue","isMulti","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","renderOption","idx","RadioGroup__option--selected","renderClear","canClear","scaleTypes","linear","ordinal","log","providedConfig","config","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_0__","type","clamp","__webpack_exports__","colors","primary","primary50","primary25","borderRadius","isDisabled","isFocused","isSelected","backgroundColor","multiValue","_ref2","multiValueLabel","_ref3","multiValueRemove","_ref4",":hover","countriesByName","percentileMetrics","countryOptions","selectedCountry","metricsByImportance","selectedCountryDifferences","pick","countryCorrelations","metricDifferences","numerator","squaredDiffsForCountry","squaredDiffsForSelectedCountry","denominator","sortedCountries","toPairs","removeTooltip","tooltipPosition","timeout","clearTimeout","countryElement","select","_groups","onMetricChange","onCountrySelectFromSelect","onCountrySelect","onCountrySelectLocal","onCountrySelectByNameLocal","onCountrySelectExternal","getCountryColor","countryName","metricScales","react_select__WEBPACK_IMPORTED_MODULE_6__","slice","Fragment","components_ui_Icon_Icon__WEBPACK_IMPORTED_MODULE_12__","size","direction","viewBox","preserveAspectRatio","WDVPMapCountry","path","countryPaths","isHovered","WDVPMapTooltip","correlation","formatCorrelation","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","fill","numeral","numberFromValue","isString","replace","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_4__","scatter","componentWillUnmount","clientWidth","selectedCountries","selectedGroups","xAccessor","yAccessor","iteration","onDotsUpdate","dots","xAccessorScaled","yAccessorScaled","clientX","clientY","isHoveringChart","mouseX","round","invert","mouseY","mouseYVal","parsedCountries","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_3__","GDP","distanceFromY","absDistanceFromY","orderedCountries","continentsByYCloseness","continentsByYAbsCloseness","closestCountries","get","closestCountriesIndex","findIndex","closestCountriesIndexCenter","tooltipInfo","boundedX","throttledOnMouseMove","throttle","persistedOnMouseMove","clearTooltip","onCountriesSelect","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__","onMouseEnterPoint","showingPointLabels","uniqBy","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","onMouseLeavePoint","reject","iterator","selectedCountryValues","meanX","meanBy","meanY","react__WEBPACK_IMPORTED_MODULE_8___default","components_ui_RadioGroup_RadioGroup__WEBPACK_IMPORTED_MODULE_14__","react_select__WEBPACK_IMPORTED_MODULE_15__","components_ui_Chart_Chart__WEBPACK_IMPORTED_MODULE_17__","components_ui_Chart_Axis_Axis__WEBPACK_IMPORTED_MODULE_18__","WDVPScatterCountry","WDVPScatterCountryHighlight","WDVPScatterLine","angle","WDVPScatterTooltip","cx","cy","r","stroke","strokeWidth","boundedWidth","boundedHeight","x1","cos","y1","sin","x2","y2"],"mappings":"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","file":"static/js/23.3f84944b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/similar_countries.7d769a93.png\";","module.exports = __webpack_public_path__ + \"static/media/similar_metrics.94ed8e1d.png\";","module.exports = __webpack_public_path__ + \"static/media/Economic_vs_Social_plot_only.75f58ce3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Governing_vs_Social_plot_only.5a5e97f0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Governing_vs_Economic_plot_only.9cf35a3f.jpg\";","import React, {Component, PureComponent} from \"react\"\nimport * as THREE from \"three\"\n// import Stats from \"stats-js\"\nimport OrbitControlsGenerator from \"three-orbit-controls\"\nimport TWEEN from \"@tweenjs/tween.js\"\nimport * as d3 from \"d3\"\nimport { interpolateRdYlGn } from \"d3-scale-chromatic\"\nimport classNames from \"classnames\"\nimport _ from \"lodash\"\nimport { createScale } from 'components/_ui/Chart/utils/scale';\nimport RadioGroup from 'components/_ui/RadioGroup/RadioGroup';\n\n// import data from \"./WDVP Datasets - the future of government\"\nimport rawData from \"./Wdvp_gov_score.json\"\nimport metricRankedCorrelationData from \"./Wdvp_corr.json\"\nimport metricsInfo from \"./metric-info.json\"\n// import data from \"./WDVP Datasets - small countries are beautiful\"\n\nimport './WDVPBars.scss'\nconst OrbitControls = OrbitControlsGenerator(THREE)\n\n// console.log(rawData)\n\nlet continents = [\n  {code: \"AS\", value: \"Asia\",          color: \"#12CBC4\"}, // #EF4E78, \"#63cdda\"\n  {code: \"EU\", value: \"Europe\",        color: \"#B53471\"}, // #F99072, \"#cf6a87\"\n  {code: \"AF\", value: \"Africa\",        color: \"#F79F1F\"}, // #FFCA81, \"#e77f67\"\n  {code: \"NA\", value: \"North America\", color: \"#5758BB\"}, // #98C55C, \"#FDA7DF\"\n  {code: \"OC\", value: \"Oceania\",       color: \"#1289A7\"}, // #67B279, \"#4b7bec\"\n  {code: \"SA\", value: \"South America\", color: \"#A3CB38\"}, // #6F87A6, \"#778beb\"\n]\nconst continentColors = _.fromPairs(_.map(continents, continent => [\n  continent.code,\n  continent.color,\n]))\nconst blackAndWhiteColorScale = d3.scaleSequential(interpolateRdYlGn)\ncontinents = _.map(continents, (continent, i) => ({...continent, color: d3.interpolatePlasma(i /( continents.length - 1))}))\nconst percentileOrRawOptions = [{\n  value: true,\n  label: \"Percentile\",\n},{\n  value: false,\n  label: \"Value\",\n}]\nconst colorModeOptions = [{\n  value: \"normal\",\n  label: \"Red ⇄ Green\",\n},{\n  value: \"continents\",\n  label: \"Continents\",\n}]\nconst defaultMetrics = _.map(metricRankedCorrelationData, \"fieldname\")\nconst filteredMetrics = _.sortBy(\n  _.without(_.map(metricRankedCorrelationData, \"fieldname\"), \"Area in km²\"),\n  _.toLower,\n)\nconst metricCorrelationSorts = _.fromPairs(\n  _.map(metricRankedCorrelationData, metric => [\n    metric.fieldname,\n    metric.RankedCorrelationWithOtherFields,\n  ])\n)\nconst formatNumber = d3.format(\",\")\nclass WDVPBars extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      metrics: defaultMetrics,\n      metricsOrder: _.fromPairs(_.map(defaultMetrics, (metric, index) => [\n        metric,\n        index,\n      ])),\n      countryOrder: _.fromPairs(_.map(rawData, (country, index) => [\n        country.Country,\n        index,\n      ])),\n      scales: {},\n      sort: defaultMetrics[3],\n      processedData: [],\n      selectedContinents: [],\n      hoveredCountry: null,\n      isAscending: true,\n      colorMode: \"normal\",\n      isShowingPercentile: true,\n    }\n  }\n\n  getClassName() {\n    return classNames(\"WDVPBars\", \"WDVP__full-width\", this.props.className)\n  }\n\n  componentDidMount() {\n    this.createScales()\n  }\n  chart = React.createRef()\n\n  createScales = () => {\n    const { sort, selectedContinents, isAscending } = this.state\n\n    const sortedMetrics = _.map(metricCorrelationSorts[sort], index => defaultMetrics[index - 1])\n    // const metricIndices = _.zipObject(defaultMetrics, metricCorrelationSorts[sort])\n    // console.log(metricCorrelationSorts, defaultMetrics)\n    // const sortedMetrics = _.orderBy(\n    //   defaultMetrics,\n    //   metric => {console.log(metric, metricIndices[metric]); return metricIndices[metric]},\n    //   \"asc\",\n    // )\n\n    const selectedContinentValues = _.map(selectedContinents, \"code\")\n\n    const sortedData = _.orderBy(\n      rawData,\n      [d => d[`${sort}__percentile`]],\n      [isAscending ? \"asc\" : \"desc\"]\n    )\n    const metricsOrder = _.fromPairs(_.map(sortedMetrics, (metric, index) => [\n      metric,\n      index,\n    ]))\n    const countryOrder = _.fromPairs(_.map(sortedData, (country, index) => [\n      country.Country,\n      index,\n    ]))\n\n    const filteredData = _.isEmpty(selectedContinents) ? sortedData :\n      _.filter(sortedData, d => _.includes(selectedContinentValues, d.Continent))\n\n    const scales = _.fromPairs(\n      _.map(defaultMetrics, (metric, i) => [\n        metric,\n        createScale({\n          domain: d3.extent(sortedData, d => d[metric]),\n          range: [0, 1],\n        }),\n      ])\n    )\n    this.setState({ scales, processedData: filteredData, metrics: sortedMetrics, countryOrder, metricsOrder })\n  }\n\n  onChangeSort = metric => () => metric == this.state.sort ?\n    this.setState({ isAscending: !this.state.isAscending }, this.createScales) :\n    this.setState({ sort: metric, isAscending: this.state.isShowingPercentile ? true : false }, this.createScales)\n\n  onContinentsSelect = continents => this.setState({ selectedContinents: continents }, this.createScales)\n  onColorModeOptionsSelect = newVal => this.setState({ colorMode: newVal.value })\n  // onIsShowingPercentileSelect = newVal => this.setState({ isShowingPercentile: newVal.value, isAscending: !this.state.isAscending }, this.createScales)\n  onIsShowingPercentileSelect = newVal => this.setState({ isShowingPercentile: newVal.value }, this.createScales)\n  onCountryHover = country => this.setState({ hoveredCountry: country })\n\n  onChangeHoveredCountry = country => this.setState({ hoveredCountry: country })\n\n  render() {\n    const { processedData, metrics, metricsOrder, countryOrder, selectedContinents, scales, sort, hoveredCountry, colorMode, isAscending, isShowingPercentile } = this.state\n\n    return (\n      <div className={this.getClassName()}>\n\n        <div className=\"WDVPBars__chart\">\n          <WDVPBarsChart\n            data={processedData}\n            metrics={metrics}\n            sort={sort}\n            scales={scales}\n            colorMode={colorMode}\n            metricsOrder={metricsOrder}\n            countryOrder={countryOrder}\n            visibleContinents={selectedContinents}\n            visibleContinents={selectedContinents}\n            isShowingPercentile={isShowingPercentile}\n            onChangeHoveredCountry={this.onChangeHoveredCountry}\n          />\n        </div>\n\n        <div className=\"WDVPBars__controls\">\n          <div className=\"WDVPBars__toggles\">\n            <RadioGroup\n              className=\"WDVPBars__toggle\"\n              options={percentileOrRawOptions}\n              value={isShowingPercentile}\n              onChange={this.onIsShowingPercentileSelect}\n            />\n\n            <RadioGroup\n              className=\"WDVPBars__toggle\"\n              options={colorModeOptions}\n              value={colorMode}\n              onChange={this.onColorModeOptionsSelect}\n            />\n          </div>\n\n          <div className=\"WDVPBars__metrics\">\n            {_.map(filteredMetrics, metric => !!metricsInfo[metric] && (\n              <div style={{ order: metricsOrder[metric] }} className={`WDVPBars__metrics__item WDVPBars__metrics__item--is-${metric == sort ? \"selected\" : \"not-selected\"}`} key={metric} onClick={this.onChangeSort(metric)}>\n                <div className=\"WDVPBars__metrics__item__label\">\n                  <span className=\"WDVPBars__metrics__item__index\">\n                    { metricsOrder[metric] + 1 }.\n                  </span>\n                  { metric }\n                </div>\n                {sort == metric && (\n                  <div className=\"WDVPBars__metrics__item__details\">\n                    <div>{ metricsInfo[metric].notes }</div>\n                    <div>Source: { metricsInfo[metric].source }, { metricsInfo[metric].year }</div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {!!hoveredCountry && !!hoveredCountry.country && (\n          <div className=\"WDVPBars__tooltip\">\n              <h6 className=\"WDVPBars__tooltip__title\">\n                { hoveredCountry.country.Country }\n              </h6>\n              <div className=\"WDVPBars__tooltip__metric\">\n                { hoveredCountry.metric }: <b>{ formatNumber(hoveredCountry.country[hoveredCountry.metric]) }</b>\n              </div>\n          </div>\n        )}\n\n      </div>\n    )\n  }\n}\n\nexport default WDVPBars\n\n\nconst barDimension = 10\nconst xBarGap = 0\nconst zBarGap = 12\nconst xBarTotalDimension = barDimension + xBarGap\nconst zBarTotalDimension = barDimension + zBarGap\nconst xAxisLength = rawData.length * xBarTotalDimension\nconst zAxisLength = defaultMetrics.length * zBarTotalDimension\nconst yScale = createScale({\n  domain: [0, 1],\n  range: [0, 200],\n})\nconst yPercentileScale = createScale({\n  domain: [0, 1],\n  range: [0, 60],\n})\nconst metricIndexScale = createScale({\n  domain: [0, defaultMetrics.length - 1],\n  range: [-defaultMetrics.length / 2 * zBarTotalDimension, defaultMetrics.length / 2 * zBarTotalDimension],\n})\nclass WDVPBarsChart extends PureComponent {\n  state = {\n    width: window.innerWidth - 300,\n    height: window.innerWidth * 0.6,\n    margins: {\n      top: 150,\n      right: 0,\n      bottom: 50,\n      left: 160,\n    }\n  }\n  container = React.createRef()\n  xLabel = React.createRef()\n  zLabel = React.createRef()\n  mouse = {x: -9999, y: -9999}\n  hoveredCountryObject = []\n  isInView = true\n\n  componentDidMount() {\n    this._isMounted = true\n    this.initScene()\n    this.containerBounds = this.container.current.getBoundingClientRect()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.data != this.props.data) this.drawData()\n    if (prevProps.isShowingPercentile != this.props.isShowingPercentile) this.drawData()\n    if (prevProps.Continent != this.props.Continent) this.drawData()\n    if (prevProps.colorMode != this.props.colorMode) this.drawData()\n  }\n  componentWillUnmount() {\n    this._isMounted = false\n    document.removeEventListener('mousemove', this.onMouseMove)\n    window.removeEventListener('resize', this.onResize)\n    if (this.observer) this.observer.disconnect()\n  }\n  countryIndexScale = createScale({\n    domain: [0, rawData.length - 1],\n    range: [-rawData.length / 2  * xBarTotalDimension, rawData.length / 2  * xBarTotalDimension]\n  })\n\n  onMouseMove = e => {\n    // e.preventDefault();\n    // const containerBounds = this.container.current.getBoundingClientRect()\n    this.mouse.x = (e.offsetX / this.containerBounds.width) * 2 - 1;\n    this.mouse.y = -(e.offsetY / this.containerBounds.height) * 2 + 1;\n    this.updateIntersects()\n  }\n\n  onResize = () => {\n    this.containerBounds = this.container.current.getBoundingClientRect()\n    const width = this.containerBounds.width\n    const height = width * 0.7\n    this.setState({\n      width,\n      height,\n    })\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(width, height);\n    this.renderer.setPixelRatio(window.devicePixelRatio)\n    this.renderScene()\n  }\n\n  initScene = () => {\n    if (!this.container.current) return\n    const { width, height } = this.state\n\n    if (this.scene) return\n\n    this.camera = new THREE.PerspectiveCamera(53, width / height, 1, 10000)\n    this.camera.position.set(\n      xAxisLength * 0.27,\n      660,\n      zAxisLength * -1.2,\n    );\n\n    this.scene = new THREE.Scene()\n    // this.scene.background = new THREE.Color(0xf4f4f4)\n    // this.scene.background = new THREE.Color(0x1d1d27)\n    this.scene.background = new THREE.Color(0x282A38)\n    // this.scene.fog = new THREE.FogExp2( 0x686B89, 0.0005 );\n\n    var light1 = new THREE.DirectionalLight( 0x686B89, 0.3 );\n    light1.position.set( 1, 100, 1 );\n    this.scene.add( light1 );\n    var light2 = new THREE.DirectionalLight( 0xFE2E24, 1 );\n    light2.position.set( 0, 200, 0 );\n    var light3 = new THREE.AmbientLight( 0xf4f4f4, 0.9 );\n    this.scene.add( light3 );\n    var light4 = new THREE.DirectionalLight( 0x30336b, 1.8 );\n    light4.position.set( 0, 100, zAxisLength );\n    this.scene.add( light4 );\n\n\n    this.raycaster = new THREE.Raycaster()\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setPixelRatio(window.devicePixelRatio)\n    this.renderer.setSize(width, height)\n    this.container.current.appendChild(this.renderer.domElement)\n\n    // this.camera.rotateOnAxis(new THREE.Vector3(0, 1, 0), 45)\n    this.camera.updateMatrixWorld();\n\n    // this.stats = new Stats()\n    // this.container.current.appendChild( this.stats.dom )\n    this.controls = new OrbitControls( this.camera, this.renderer.domElement )\n    this.controls.enableZoom = false\n\n    this.camera.lookAt(\n      xAxisLength * 0.15,\n      0,\n      zAxisLength * -0.2,\n    );\n\n    window.addEventListener('resize', this.onResize)\n    document.addEventListener('mousemove', this.onMouseMove, false)\n    this.controls.addEventListener(\"change\", this.renderScene);\n\n    const options = {\n      threshold: 0.01,\n    }\n\n    this.observer = new IntersectionObserver(this.debouncedOnVisibilityChange, options);\n    this.observer.observe(this.container.current);\n\n    this.drawAxes()\n    this.initBars()\n    this.renderScene()\n    // this.animate()\n  }\n\n  onVisibilityChange = e => {\n      if (!this._isMounted) return\n      const bounds = e[0].boundingClientRect\n      const threshold = window.innerHeight * 2\n      const isInView = !!e[0].isIntersecting ||\n                        Math.abs(bounds.top)    < threshold ||\n                        Math.abs(bounds.bottom) < threshold\n      if (isInView != this.isInView) {\n        this.isInView = isInView\n        if (isInView && TWEEN.getAll().length) this.animate()\n      }\n  }\n  debouncedOnVisibilityChange = _.debounce(this.onVisibilityChange, 60);\n\n  drawAxes = () => {\n    const material = new THREE.MeshBasicMaterial ({\n      color: 0x666666\n    });\n\n    var xGeometry = new THREE.BufferGeometry();\n    const xVertices = new Float32Array([\n      -xAxisLength / 2, 0, -zAxisLength / 2 - barDimension * 4,\n      xAxisLength / 2, 0, -zAxisLength / 2 - barDimension * 4,\n    ]);\n    xGeometry.setAttribute( 'position', new THREE.BufferAttribute( xVertices, 3 ) );\n    const xAxis = new THREE.Line( xGeometry, material );\n    this.scene.add( xAxis );\n\n    var zGeometry = new THREE.BufferGeometry();\n    const zVertices = new Float32Array([\n      xAxisLength / 2 + barDimension * 4, 0, -zAxisLength / 2,\n      xAxisLength / 2 + barDimension * 4, 0, zAxisLength / 2,\n    ]);\n    zGeometry.setAttribute( 'position', new THREE.BufferAttribute( zVertices, 3 ) );\n    const zAxis = new THREE.Line( zGeometry, material );\n    this.scene.add( zAxis );\n  }\n\n\n  animate = (time) => {\n    if (!this.isInView) return\n    TWEEN.update(time);\n    this.renderScene();\n    // this.updateAxisLabelsPosition();\n    // this.stats.update();\n\n    const tweens = TWEEN.getAll()\n    if (tweens.length) requestAnimationFrame( this.animate );\n\n    // this.updateIntersects()\n  }\n\n  updateIntersects = () => {\n    this.raycaster.setFromCamera( this.mouse, this.camera );\n    const intersects = this.raycaster.intersectObjects( this.scene.children );\n    const closestIntersect = intersects[0];\n    const intersectName = closestIntersect && closestIntersect.object.name\n    if (intersectName != this.hoveredCountry) {\n      const { colorMode, scales, isShowingPercentile, onChangeHoveredCountry } = this.props\n\n      if (!closestIntersect) {\n        this.props.onChangeHoveredCountry(null)\n        this.hoveredCountry = null\n        this.hoveredCountryObject = null\n        if (this.onFinishedHoveringCountry) this.onFinishedHoveringCountry()\n        return\n      }\n\n      closestIntersect.object.material.color.setStyle(\"#ffffff\")\n\n      if (this.onFinishedHoveringCountry) this.onFinishedHoveringCountry()\n      this.onFinishedHoveringCountry = () => {\n        const barData = closestIntersect.object.userData\n        const color = !_.isFinite(barData.country && barData.country[barData.metric])  ? \"#ccc\" :\n          colorMode == \"continents\" ? continentColors[barData.country.Continent] :\n                                    blackAndWhiteColorScale(isShowingPercentile ? (barData.country[`${barData.metric}__percentile`] - 1) / 100 : scales[barData.metric](barData.country[barData.metric]))\n        closestIntersect.object.material.color.setStyle(color)\n        this.onFinishedHoveringCountry = null\n        this.renderScene()\n      }\n\n      this.hoveredCountry = intersectName\n      this.props.onChangeHoveredCountry(closestIntersect.object.userData)\n\n      this.renderScene()\n    }\n  }\n\n  updateAxisLabelsPosition = () => {\n    const xVector =  this.get2DCoords(new THREE.Vector3( 0, 0, -zAxisLength / 2 - barDimension * 4), this.camera)\n    const x2Vector = this.get2DCoords(new THREE.Vector3(10, 0, -zAxisLength / 2 - barDimension * 4), this.camera)\n    const zVector =  this.get2DCoords(new THREE.Vector3(xAxisLength / 2 + barDimension * 4 + 50, 0,   0), this.camera)\n    const z2Vector = this.get2DCoords(new THREE.Vector3(xAxisLength / 2 + barDimension * 4 + 50, 0, -10), this.camera)\n    const xRotation = Math.atan2(xVector.y - x2Vector.y, xVector.x - x2Vector.x) / Math.PI * 180\n    const zRotation = Math.atan2(zVector.y - z2Vector.y, zVector.x - z2Vector.x) / Math.PI * 180\n    if (this.xLabel.current) this.xLabel.current.style.transform = `translate(${xVector.x}px, ${xVector.y}px) rotate(${xRotation}deg)`\n    if (this.zLabel.current) this.zLabel.current.style.transform = `translate(${zVector.x}px, ${zVector.y}px) rotate(${zRotation}deg)`\n  }\n\n  get2DCoords = (position, camera) => {\n    const vector = position.project(camera);\n    vector.x = (vector.x + 1)/2 * this.state.width;\n    vector.y = -(vector.y - 1)/2 * this.state.height;\n    return vector;\n  }\n\n  renderScene = () => {\n    this.renderer.render(this.scene, this.camera)\n    this.updateAxisLabelsPosition();\n    // this.controls.update()\n  }\n\n  createBar = (countryIndex, metricIndex, country, metric) => {\n    const geometry = new THREE.BoxBufferGeometry( 1, 1, 1 )\n    geometry.translate( 0, 0, 0 )\n    let object = new THREE.Mesh(\n      geometry,\n      new THREE.MeshLambertMaterial({color: continentColors[country.Continent]})\n    )\n\n    object.position.x = this.countryIndexScale(countryIndex)\n    object.position.y = 0\n    object.position.z = metricIndexScale(metricIndex)\n    object.scale.x = barDimension\n    object.scale.y = 1\n    object.scale.z = barDimension\n    object.name = `${country.Country}--${metric}`\n    object.userData = {\n      country,\n      metric,\n    }\n\n    this.scene.add(object)\n\n    return object\n  }\n\n  initBars = () => {\n    const { data, metrics } = this.props\n\n    if (_.isEmpty(data)) return;\n\n    this.countries = _.map(data, (country, countryIndex) => ({\n      country,\n      countryIndex,\n      metrics: _.map(metrics, (metric, metricIndex) => ({\n        name: metric,\n        metricIndex,\n        percentileValue: (country[`${metric}__percentile`] - 1) / 100,\n        bar: this.createBar(countryIndex, metricIndex, country, metric),\n      }))\n    }))\n\n    this.drawData()\n  }\n\n  drawData = () => {\n    const { data } = this.props\n\n    if (_.isEmpty(data)) return;\n\n    if (!this.camera) this.initScene()\n\n    // const geometry = new THREE.BoxBufferGeometry( 20, 20, 20 )\n    if (!this.countries) this.initBars()\n\n    _.map(this.countries, country => {\n      _.map(country.metrics, metric => {\n        this.drawBar({ country, metric, bar: metric.bar })\n      })\n    })\n\n    // this.renderScene()\n    this.animate()\n  }\n\n  drawBar = ({ country, metric, bar }) => {\n    const { metricsOrder, countryOrder, scales, sort, colorMode, isShowingPercentile, onCountryHover, onMetricClick } = this.props\n\n    if (!bar) return\n    // const scaledValue = scales[metric.name](country.country[metric.name])\n\n    const value = isShowingPercentile ?\n      yPercentileScale(metric.percentileValue) + 1 :\n      yScale(scales[metric.name](country.country[metric.name]))\n\n    metric.xTweenCoords = bar.position\n    metric.xTween = new TWEEN.Tween(metric.xTweenCoords)\n        .to({ x: this.countryIndexScale(countryOrder[country.country.Country]) }, 1200)\n        // .easing(TWEEN.Easing.Quadratic.Out)\n        .delay(200)\n        .onUpdate(function() {\n            bar.position.x = metric.xTweenCoords.x\n        })\n\n    metric.zTweenCoords = bar.position\n    metric.zTween = new TWEEN.Tween(metric.zTweenCoords)\n        .to({ z: metricIndexScale(metricsOrder[metric.name]) }, 1200)\n        // .easing(TWEEN.Easing.Quadratic.Out)\n        .delay(200)\n        .onUpdate(function() {\n            bar.position.z = metric.zTweenCoords.z\n        })\n        .chain(metric.xTween)\n        .start()\n\n\n    metric.yTweenCoords = bar.position\n    metric.yTween = new TWEEN.Tween(metric.yTweenCoords)\n        .to({ y: value }, 800)\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .onUpdate(function() {\n            bar.scale.y = metric.yTweenCoords.y\n            bar.position.y = metric.yTweenCoords.y / 2\n        })\n        .start()\n\n    const color = !_.isFinite(country.country[metric.name])  ? \"#ccc\" :\n      colorMode == \"continents\" ? continentColors[country.country.Continent] :\n                                  blackAndWhiteColorScale(isShowingPercentile ? metric.percentileValue : scales[metric.name](country.country[metric.name]))\n    bar.material.color.setStyle(color)\n  }\n\n  changeZoom = (diff) => () => {\n    const newZoom = Math.min(Math.max(this.camera.zoom + diff, 0.2), 6.5)\n\n    let zoomTweenAmount = { zoom: this.camera.zoom }\n    this.zoomTween = new TWEEN.Tween(zoomTweenAmount)\n        .to({ zoom: newZoom }, 300)\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .onUpdate(() => {\n          this.camera.zoom = zoomTweenAmount.zoom\n          this.camera.updateProjectionMatrix()\n        })\n        .start()\n\n    this.animate()\n  }\n\n  render () {\n    return (\n      <div className=\"WDVPBarsChart\" ref={this.container}>\n        <div className=\"WDVPBarsChart__zooms\">\n          <div className=\"WDVPBarsChart__zoom WDVPBarsChart__zoom--up\" onClick={this.changeZoom(0.3)}>\n            +\n          </div>\n          <div className=\"WDVPBarsChart__zoom WDVPBarsChart__zoom--down\" onClick={this.changeZoom(-0.3)}>\n            −\n          </div>\n        </div>\n\n        <div className=\"WDVPBarsChart__label\" ref={this.xLabel}>Countries</div>\n        <div className=\"WDVPBarsChart__label\" ref={this.zLabel}>Metrics</div>\n        {/* <g\n          ref={this.container}\n          style={{\n            transform: `translate(${margins.left}px, ${margins.top}px)`,\n          }}\n        /> */}\n      </div>\n    )\n  }\n}\n\n","import React, {Component, PureComponent} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as THREE from \"three\"\nimport OrbitControlsGenerator from \"three-orbit-controls\"\nimport TWEEN from \"@tweenjs/tween.js\"\nimport * as d3 from \"d3\"\nimport { interpolateRdYlGn } from \"d3-scale-chromatic\"\nimport classNames from \"classnames\"\nimport _ from \"lodash\"\nimport { createScale } from 'components/_ui/Chart/utils/scale';\nimport RadioGroup from 'components/_ui/RadioGroup/RadioGroup';\nimport Tooltip from 'components/_ui/Tooltip/Tooltip';\n\nimport rawData from \"./Wdvp_gov_score.json\"\nimport metricRankedCorrelationData from \"./Wdvp_corr.json\"\nimport WDVPScatter from './WDVPScatter'\n\nimport './WDVPMetrics.scss'\nconst OrbitControls = OrbitControlsGenerator(THREE)\n\nconst ordinalColors = [\"#63cdda\", \"#cf6a87\", \"#786fa6\", \"#FDA7DF\", \"#4b7bec\", \"#778ca3\"]; // \"#e77f67\", \"#778beb\",\nconst numberFromValue = value =>\n  _.isFinite(value) ? value :\n  _.isString(value) ? +value.replace(/,/g, \"\") :\n  null\n\nlet continents = [\n  {code: \"AS\", value: \"Asia\",          color: \"#12CBC4\"}, // #EF4E78, \"#63cdda\"\n  {code: \"EU\", value: \"Europe\",        color: \"#B53471\"}, // #F99072, \"#cf6a87\"\n  {code: \"AF\", value: \"Africa\",        color: \"#F79F1F\"}, // #FFCA81, \"#e77f67\"\n  {code: \"NA\", value: \"North America\", color: \"#5758BB\"}, // #98C55C, \"#FDA7DF\"\n  {code: \"OC\", value: \"Oceania\",       color: \"#1289A7\"}, // #67B279, \"#4b7bec\"\n  {code: \"SA\", value: \"South America\", color: \"#A3CB38\"}, // #6F87A6, \"#778beb\"\n]\nconst continentColors = _.fromPairs(_.map(continents, continent => [\n  continent.code,\n  continent.color,\n]))\nconst blackAndWhiteColorScale = d3.scaleSequential(interpolateRdYlGn)\ncontinents = _.map(continents, (continent, i) => ({...continent, color: d3.interpolatePlasma(i /( continents.length - 1))}))\nconst continentColorScales = _.fromPairs(\n  _.map(continents, continent => [\n    continent.code,\n    createScale({\n      domain: [-0.3, 0.6, 1.2],\n      range: [\"#fff\", continent.color, \"#000\"],\n    }),\n  ])\n)\nconst percentileOrRawOptions = [{\n  value: true,\n  label: \"Percentile\",\n},{\n  value: false,\n  label: \"Value\",\n}]\nconst colorModeOptions = [{\n  value: \"normal\",\n  label: \"All the same\",\n},{\n  value: \"continents\",\n  label: \"Continents\",\n}]\nconst metrics = _.map(metricRankedCorrelationData, \"fieldname\")\nconst filteredMetrics = _.sortBy(\n  _.without(_.map(metricRankedCorrelationData, \"fieldname\"), \"Area in km²\"),\n  _.toLower,\n)\nconst metricCorrelationSorts = _.fromPairs(\n  _.map(metricRankedCorrelationData, metric => [\n    metric.fieldname,\n    metric.RankedCorrelationWithOtherFields,\n  ])\n)\nclass WDVPMetrics extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hoveredCountry: null,\n      // isAscending: true,\n      colorMode: \"normal\",\n      isShowingPercentile: true,\n      processedData: [],\n    }\n  }\n  static propTypes = {\n    metrics: PropTypes.array,\n    data: PropTypes.array,\n    highlightedCountries: PropTypes.array,\n  }\n  static defaultProps = {\n    metrics: [\"financial freedom score\", \"women MPs (% of all MPs)\"],\n    data: rawData,\n    highlightedCountries: [\"United States\"]\n  }\n\n  getClassName() {\n    return classNames(\"WDVPMetrics\", this.props.className)\n  }\n\n  componentDidMount() {\n    this.createScales()\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.data != this.props.data) this.createScales()\n  }\n  chart = React.createRef()\n\n  createScales = () => {\n    const { data, metrics } = this.props\n    const { selectedContinents, isAscending, isShowingPercentile } = this.state\n\n    const selectedContinentValues = _.map(selectedContinents, \"code\")\n\n    const sortedData = _.map(metrics, metric => (\n      _.orderBy(\n        data,\n        [d => d[metric]],\n        [\"asc\"]\n      )\n    ))\n\n    const scales = _.fromPairs(\n      _.map(metrics, (metric, i) => [\n        metric,\n        createScale({\n          domain: d3.extent(data, d => d[metric]),\n          range: [0, 1],\n        }),\n      ])\n    )\n    this.setState({ scales, processedData: sortedData })\n  }\n\n  render() {\n    const { metrics, highlightedCountries } = this.props\n    const { processedData, scales } = this.state\n\n    return (\n      <div className={this.getClassName()}>\n\n        <div className=\"WDVPMetrics__charts\">\n          {_.map(metrics, (metric, index) => (\n            <WDVPMetricsChart\n              key={metric}\n              data={processedData[index]}\n              metric={metric}\n              scales={scales}\n              highlightedCountries={highlightedCountries}\n            />\n          ))}\n        </div>\n\n        {/* <div className=\"WDVPMap__controls\">\n          <div className=\"WDVPMetrics__toggles\">\n            <RadioGroup\n              className=\"WDVPMetrics__toggle\"\n              options={percentileOrRawOptions}\n              value={isShowingPercentile}\n              onChange={this.onIsShowingPercentileSelect}\n            />\n\n            <RadioGroup\n              className=\"WDVPMetrics__toggle\"\n              options={colorModeOptions}\n              value={colorMode}\n              onChange={this.onColorModeOptionsSelect}\n            />\n          </div>\n\n          <div className=\"WDVPMetrics__metrics\">\n            {_.map(filteredMetrics, (metric, index) => !!metricsInfo[metric] && (\n              <div className={`WDVPMetrics__metrics__item WDVPMetrics__metrics__item--is-${metric == sort ? \"selected\" : \"not-selected\"}`} key={metric} onClick={this.onChangeSort(metric)}>\n                <div className=\"WDVPMetrics__metrics__item__label\">\n                  <span className=\"WDVPMetrics__metrics__item__index\">\n                    { index + 1 }.\n                  </span>\n                  { metric }\n                </div>\n                {sort == metric && (\n                  <div className=\"WDVPMetrics__metrics__item__details\">\n                    <div>{ metricsInfo[metric].notes }</div>\n                    <div>Source: { metricsInfo[metric].source }, { metricsInfo[metric].year }</div>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </div> */}\n\n\n      </div>\n    )\n  }\n}\n\nexport default WDVPMetrics\n\n\nconst formatNumber = d3.format(\",.1f\")\nconst WDVPMetricsChart = React.memo(({ data, metric, scales, highlightedCountries }) => (\n  <div className=\"WDVPMetricsChart\">\n    <h6 className=\"WDVPMetricsChart__header\">\n      { metric}\n    </h6>\n\n    <div className=\"WDVPMetricsChart__items\">\n      {_.map(data, country => (\n        <div className={`WDVPMetricsChart__item WDVPMetricsChart__item--is-${highlightedCountries.includes(country.Country) ? \"selected\" : \"not-selected\"}`} key={country.Country}>\n          <div className=\"WDVPMetricsChart__item__bar\">\n            <div className=\"WDVPMetricsChart__item__bar__fill\" style={{\n              height: `${Math.max([\n                scales[metric](country[metric]) * 100\n              ], 1)}%`,\n              // background: continentColors[country.Continent],\n            }} />\n            <div className=\"WDVPMetricsChart__item__bar__value\">\n              { formatNumber(country[metric]) }\n            </div>\n          </div>\n          <div className=\"WDVPMetricsChart__item__label\">\n            { country.Country }\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n))","import React, {Component, PureComponent} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as THREE from \"three\"\nimport OrbitControlsGenerator from \"three-orbit-controls\"\nimport TWEEN from \"@tweenjs/tween.js\"\nimport * as d3 from \"d3\"\nimport ReactSlider from \"react-slider\"\nimport { interpolateRdYlGn } from \"d3-scale-chromatic\"\nimport classNames from \"classnames\"\nimport _ from \"lodash\"\nimport { createScale } from 'components/_ui/Chart/utils/scale';\nimport RadioGroup from 'components/_ui/RadioGroup/RadioGroup';\nimport Tooltip from 'components/_ui/Tooltip/Tooltip';\nimport Select from 'react-select';\nimport selectStyles from './selectStyles';\n\nimport rawData from \"./Wdvp_gov_score.json\"\nimport presets from \"./Wdvp_nnmf.json\"\nimport metricRankedCorrelationData from \"./Wdvp_corr.json\"\nimport WDVPMetrics from \"./WDVPMetrics\"\nimport WDVPScatter from './WDVPScatter'\n\nimport './WDVPGrandPoobah.scss'\nconst OrbitControls = OrbitControlsGenerator(THREE)\n\nconst ordinalColors = [\"#63cdda\", \"#cf6a87\", \"#786fa6\", \"#FDA7DF\", \"#4b7bec\", \"#778ca3\"]; // \"#e77f67\", \"#778beb\",\nconst numberFromValue = value =>\n  _.isFinite(value) ? value :\n  _.isString(value) ? +value.replace(/,/g, \"\") :\n  null\n\nconst valueToNumber = d => _.isFinite(d) ? d : 0\nlet continents = [\n  {code: \"AS\", value: \"Asia\",          color: \"#12CBC4\"}, // #EF4E78, \"#63cdda\"\n  {code: \"EU\", value: \"Europe\",        color: \"#B53471\"}, // #F99072, \"#cf6a87\"\n  {code: \"AF\", value: \"Africa\",        color: \"#F79F1F\"}, // #FFCA81, \"#e77f67\"\n  {code: \"NA\", value: \"North America\", color: \"#5758BB\"}, // #98C55C, \"#FDA7DF\"\n  {code: \"OC\", value: \"Oceania\",       color: \"#1289A7\"}, // #67B279, \"#4b7bec\"\n  {code: \"SA\", value: \"South America\", color: \"#A3CB38\"}, // #6F87A6, \"#778beb\"\n]\nconst continentColors = _.fromPairs(_.map(continents, continent => [\n  continent.code,\n  continent.color,\n]))\nconst blackAndWhiteColorScale = d3.scaleSequential(interpolateRdYlGn)\ncontinents = _.map(continents, (continent, i) => ({...continent, color: d3.interpolatePlasma(i /( continents.length - 1))}))\nconst continentColorScales = _.fromPairs(\n  _.map(continents, continent => [\n    continent.code,\n    createScale({\n      domain: [-0.3, 0.6, 1.2],\n      range: [\"#fff\", continent.color, \"#000\"],\n    }),\n  ])\n)\nconst percentileOrRawOptions = [{\n  value: true,\n  label: \"Percentile\",\n},{\n  value: false,\n  label: \"Value\",\n}]\nconst colorModeOptions = [{\n  value: \"normal\",\n  label: \"All the same\",\n},{\n  value: \"continents\",\n  label: \"Continents\",\n}]\nconst defaultMetrics = _.map(metricRankedCorrelationData, \"fieldname\")\nconst filteredMetrics = _.sortBy(\n  _.without(_.map(metricRankedCorrelationData, \"fieldname\"), \"Area in km²\"),\n  _.toLower,\n)\nconst metricCorrelationSorts = _.fromPairs(\n  _.map(metricRankedCorrelationData, metric => [\n    metric.fieldname,\n    metric.RankedCorrelationWithOtherFields,\n  ])\n)\nconst presetNames = [\n  \"Generally Good\",\n  \"Politically Stable\",\n  \"Large\",\n  \"Reckless Growth\",\n  \"Taxation Nation\"\n]\nconst presetOptions = _.map(presets, (preset, index) => ({\n  value: presetNames[index],\n  label: presetNames[index],\n  name: presetNames[index],\n  metricWeights: _.zipObject(\n    _.map(defaultMetrics, m => m[0]),\n    _.map(preset.factor, d => d * 4),\n  ),\n  color: \"#114D4D\",\n}))\nconst getRandomWeight = () => _.round(d3.randomUniform(0, 3)(), 2)\nconst defaultMetricWeights = _.fromPairs(_.map(defaultMetrics, metric => [\n  metric,\n  0,\n  // getRandomWeight(),\n]))\nclass WDVPGrandPoobah extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      xMetricWeights: defaultMetricWeights,\n      yMetricWeights: defaultMetricWeights,\n      xMetric: defaultMetrics[0],\n      yMetric: defaultMetrics[1],\n      dataWithWeights: [],\n      highlightedCountries: [],\n      angleOfMostVariance: 0,\n    }\n  }\n\n  getClassName() {\n    return classNames(\"WDVPGrandPoobah\", this.props.className)\n  }\n\n  componentDidMount() {\n    this.generateWeightedData()\n  }\n  chart = React.createRef()\n\n  onMetricWeightsChange = (axis, newWeights) => this.setState({ [`${axis}MetricWeights`]: newWeights }, this.debouncedGenerateWeightedData)\n  onMetricWeightsChangeForAxisLocal = axis => newWeights => this.onMetricWeightsChange(axis, newWeights)\n\n  randomizeMetrics = () => this.setState({\n    xMetric: _.sample(defaultMetrics),\n    yMetric: _.sample(defaultMetrics),\n  })\n\n  generateWeightedData = () => {\n    const { xMetricWeights, yMetricWeights } = this.state\n\n    const dataWithWeights = _.map(rawData, country => ({\n        ...country,\n        xValue: this.getWeightedValue(country, xMetricWeights),\n        yValue: this.getWeightedValue(country, yMetricWeights),\n    }))\n\n    const hasAnyWeights = _.sum(_.values(xMetricWeights)) && _.sum(_.values(yMetricWeights))\n\n    if (!hasAnyWeights) {\n      const filledWeightMetric = _.sum(_.values(xMetricWeights)) ? \"xValue\" : \"yValue\"\n      const updateDataWithWeights = _.map(dataWithWeights, country => ({\n        ...country,\n        [\"axis of good rankings\"]: country[filledWeightMetric],\n      }))\n\n      this.setState({ dataWithWeights: updateDataWithWeights, angleOfMostVariance: 0 })\n      return\n    }\n\n    const xValues = _.map(dataWithWeights, \"xValue\")\n    const yValues = _.map(dataWithWeights, \"yValue\")\n    const xDifferences = this.getDifferences(xValues)\n    const yDifferences = this.getDifferences(yValues)\n    const meanOfXAndY = _.mean(_.map(xDifferences, (d,i) => d * yDifferences[i]))\n    const covarianceMatrix = [\n      _.mean(_.map(xDifferences, d => d * d)),\n      meanOfXAndY,\n      meanOfXAndY,\n      _.mean(_.map(yDifferences, d => d * d)),\n    ]\n\n    const magicA = 1\n    const magicB = -covarianceMatrix[3] - covarianceMatrix[0]\n    const magicC = covarianceMatrix[0] * covarianceMatrix[3] - covarianceMatrix[1] * covarianceMatrix[2]\n\n    const sqB = Math.sqrt(magicB * magicB - 4 * magicA * magicC)\n    // const lambda1 = 2 * magicC / (-magicB + sqB)\n    // const lambda2 = 2 * magicC / (-magicB - sqB)\n    const lambda1 = (-magicB + sqB) / 2\n    const lambda2 = (-magicB - sqB) / 2\n    const largerLambda = Math.max(lambda1, lambda2)\n\n    // const magicD = [\n    //   covarianceMatrix[0] - largerLambda,\n    //   covarianceMatrix[1],\n    //   covarianceMatrix[2],\n    //   covarianceMatrix[3] - largerLambda,\n    // ]\n    let magicR1 = [\n      covarianceMatrix[0] - largerLambda,\n      covarianceMatrix[2],\n    ]\n    let magicR2 = [\n      covarianceMatrix[1],\n      covarianceMatrix[3] - largerLambda,\n    ]\n    let magicR3 = _.map(magicR1, d =>\n      d * (magicR2[0] / magicR1[0])\n    )\n    magicR2 = [\n      magicR2[0] - magicR3[0],\n      magicR2[1] - magicR3[1],\n    ]\n    if (_.sum(magicR2) > 0.001) {\n      magicR3 = _.map(magicR3, d =>\n        d * (magicR1[1] / magicR2[1])\n      )\n      magicR1 = [\n        magicR1[0] - magicR3[0],\n        magicR1[1] - magicR3[1],\n      ]\n    }\n\n    const vectorOfMostVariance = [\n      -magicR1[1] / magicR1[0],\n      1,\n    ]\n\n    const angleOfMostVariance = Math.atan2(vectorOfMostVariance[1], vectorOfMostVariance[0]) / Math.PI * 180\n\n    const updateDataWithWeights = _.map(dataWithWeights, country => ({\n      ...country,\n      [\"axis of good rankings\"]: vectorOfMostVariance[0] * country.xValue + vectorOfMostVariance[1] * country.yValue,\n    }))\n\n    this.setState({ dataWithWeights: updateDataWithWeights, angleOfMostVariance })\n  }\n  debouncedGenerateWeightedData = _.debounce(this.generateWeightedData, 400)\n\n  getDifferences = arr => {\n    const values = _.map(arr, valueToNumber)\n    const mean = _.mean(arr)\n    const differences = _.map(values, (d, i) => d - mean)\n    return differences\n  }\n\n  getWeightedValue = (country, metricWeights) => {\n    const weightedCountryMetricValues = _.map(\n      _.keys(metricWeights),\n      metric => valueToNumber(country[`${metric}__percentile`]) * metricWeights[metric]\n    )\n    return _.mean(weightedCountryMetricValues)\n  }\n\n  onHighlightedCountriesChange = countries => this.setState({ highlightedCountries: _.map(countries, \"value\") })\n\n  render() {\n    const { dataWithWeights, xMetricWeights, yMetricWeights, xMetric, yMetric, angleOfMostVariance, highlightedCountries } = this.state\n\n    return (\n      <div className={this.getClassName()}>\n        <div className=\"WDVPGrandPoobah__content\">\n          <div className=\"WDVPGrandPoobah__sliders\">\n            <div className=\"WDVPGrandPoobah__sliders-wrapper\">\n              <WDVPGrandPoobahSliders\n                metricWeights={xMetricWeights}\n                onChange={this.onMetricWeightsChangeForAxisLocal(\"x\")}\n                title=\"x axis weights\"\n                startingPresetName={presetNames[1]}\n                isShowingLabels\n              />\n              <WDVPGrandPoobahSliders\n                metricWeights={yMetricWeights}\n                onChange={this.onMetricWeightsChangeForAxisLocal(\"y\")}\n                startingPresetName={presetNames[2]}\n                title=\"y axis weights\"\n              />\n            </div>\n            <div className=\"WDVPGrandPoobah__note\">\n              Note: These presets were discovered automatically using <a href=\"https://en.wikipedia.org/wiki/Non-negative_matrix_factorization\" target=\"_blank\" ref=\"noopener noreferrer\">non-negative matrix factorization</a> and manually named.\n            </div>\n\n          </div>\n          <WDVPScatter\n            data={dataWithWeights}\n            xMetric={\"xValue\"}\n            yMetric={\"yValue\"}\n            angleOfMostVariance={angleOfMostVariance}\n            onHighlightedCountriesChange={this.onHighlightedCountriesChange}\n          />\n        </div>\n\n        <WDVPMetrics metrics={[\"axis of good rankings\"]} data={dataWithWeights} highlightedCountries={highlightedCountries} />\n\n      </div>\n    )\n  }\n}\n\nexport default WDVPGrandPoobah\n\n\nconst formatNumber = d3.format(\",\")\nclass WDVPGrandPoobahSliders extends PureComponent {\n  state = {\n    isDragging: false,\n    activePreset: null,\n  }\n\n  componentDidMount() {\n    if (this.props.startingPresetName) {\n      const startingPreset = _.filter(presetOptions, {name: this.props.startingPresetName})[0]\n      if (startingPreset) this.onPresetSelect(startingPreset)\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.listener) window.removeEventListener(this.listener)\n  }\n\n  onChangeMetricWeightLocal = (selectedMetric, doesNeedDragging=true) => newWeight => {\n    if (doesNeedDragging && !this.state.isDragging) return\n    const newMetricWeights = _.fromPairs(\n      _.map(this.props.metricWeights, (weight, metric) => [\n        metric,\n        metric == selectedMetric ? newWeight : weight\n      ])\n    )\n    this.props.onChange(newMetricWeights)\n  }\n\n  onStartDragging = () => {\n    this.setState({ isDragging: true })\n    this.listener = window.addEventListener(\"mouseup\", this.onStopDragging)\n  }\n  onStopDragging = () => this.setState({ isDragging: false })\n\n  onPresetSelect = preset => {\n    this.props.onChange(preset.metricWeights)\n    this.setState({activePreset: preset.name})\n  }\n\n  render() {\n    const { title, metricWeights, isShowingLabels, onChange } = this.props\n    const { isDragging, activePreset } = this.state\n\n    return (\n      <div className={`WDVPGrandPoobahSliders WDVPGrandPoobahSliders--has-${isShowingLabels ? \"labels\" : \"no-labels\"}`}\n        onMouseDown={this.onStartDragging}\n        onMouseMove={this.onDrag}\n      >\n        <h6 className=\"WDVPGrandPoobahSliders__title\">\n          { title }\n        </h6>\n\n        <div className=\"WDVPGrandPoobahSliders__select-wrapper\">\n          <Select\n            className=\"WDVPGrandPoobahSliders__select\"\n            classNamePrefix=\"WDVPGrandPoobahSliders__select\"\n            options={presetOptions}\n            value={{value: activePreset, label: activePreset}}\n            styles={selectStyles}\n            onChange={this.onPresetSelect}\n          />\n        </div>\n\n        {_.map(metricWeights, (weight, metric) => (\n          <WDVPGrandPoobahSlidersItem\n            key={metric}\n            metric={metric}\n            weight={weight}\n            isShowingLabels={isShowingLabels}\n            onChange={this.onChangeMetricWeightLocal(metric, false)}\n            onChangeNeedsDragging={this.onChangeMetricWeightLocal(metric)}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n\nclass WDVPGrandPoobahSlidersItem extends PureComponent {\n  elem = React.createRef()\n\n  componentDidMount() {\n    d3.select(this.elem.current).on(\"mousemove\", this.onMouseMove)\n    d3.select(this.elem.current).on(\"mousedown\", this.onMouseMove)\n  }\n  componentWillUnmount() {\n    d3.select(this.elem.current).on(\"mousemove\", null)\n    d3.select(this.elem.current).on(\"click\", null)\n  }\n\n  onMouseMove = e => {\n    const element = d3.select(this.elem.current).node()\n    const mousePosition = d3.pointer(e)\n    const width = element.getBoundingClientRect().width\n    const weight = mousePosition[0] * 3 / width\n    this.props.onChangeNeedsDragging(weight)\n  }\n\n  render() {\n    const { metric, weight, isShowingLabels, onChange, onChangeNeedsDragging, ...props } = this.props\n    return (\n      <div {...props}\n        className={`WDVPGrandPoobahSlidersItem WDVPGrandPoobahSlidersItem--is-${weight < 0 ? \"negative\" : \"positive\"}`}>\n        {isShowingLabels && (\n          <div className=\"WDVPGrandPoobahSlidersItem__label\">\n            { metric }\n          </div>\n        )}\n\n        <div className=\"WDVPGrandPoobahSlidersItem__slider\"\n        ref={this.elem}>\n            <ReactSlider\n              value={weight}\n              min={0}\n              max={3}\n              step={0.1}\n              withBars\n              onChange={onChange}\n            />\n        </div>\n      </div>\n    )\n  }\n}\n// const WDVPGrandPoobahSlidersItem = React.memo(({ metric, weight, isShowingLabels, onChange, ...props }) => {\n//   const onChangeLocal = () => onChange(getRandomWeight())\n//   return (\n//     <div {...props}\n//       className={`WDVPGrandPoobahSlidersItem WDVPGrandPoobahSlidersItem--is-${weight < 0 ? \"negative\" : \"positive\"}`}>\n//       {isShowingLabels && (\n//         <div className=\"WDVPGrandPoobahSlidersItem__label\">\n//           { metric }\n//         </div>\n//       )}\n//       <div className=\"WDVPGrandPoobahSlidersItem__slider\">\n//           <ReactSlider\n//             value={weight}\n//             min={0}\n//             max={3}\n//             step={0.1}\n//             withBars\n//             onChange={onChange}\n//           />\n//       </div>\n//     </div>\n//   )\n// })","import React, {Component} from \"react\"\nimport classNames from \"classnames\"\nimport _ from \"lodash\"\n\nimport WDVPMap from \"./WDVPMap\"\nimport WDVPBars from \"./WDVPBars\"\n// import WDVPGlobe from \"./WDVPGlobe\"\nimport WDVPMetrics from \"./WDVPMetrics\"\nimport WDVPGrandPoobah from \"./WDVPGrandPoobah\"\n\nimport similarCountriesImage from \"./similar_countries.png\"\nimport similarMetricsImage from \"./similar_metrics.png\"\nimport Economic_vs_Social_plot_only from \"./Economic_vs_Social_plot_only.jpg\"\nimport Governing_vs_Social_plot_only from \"./Governing_vs_Social_plot_only.jpg\"\nimport Governing_vs_Economic_plot_only from \"./Governing_vs_Economic_plot_only.jpg\"\n\nimport './WDVP.scss'\n\nclass WDVP extends Component {\n  state = {\n    selectedMapCountryName: null,\n  }\n  getClassName() {\n    return classNames(\"WDVP\", this.props.className)\n  }\n  chart = React.createRef()\n\n  onSelectMapCountry = country => () => this.setState({ selectedMapCountryName: country })\n\n  render() {\n    const { selectedMapCountryName} = this.state\n\n    return (\n      <div className={this.getClassName()}>\n          <div className=\"WDVP__header\">\n            <h1 className=\"WDVP__title\">\n              What makes a country <b>“good”</b>?\n            </h1>\n          </div>\n\n\n          <div className=\"WDVP__content\">\n            <div className=\"WDVP__section\">\n              <div className=\"WDVP__split\">\n                <div className=\"WDVP__split__section WDVP__split__section--content\">\n                  <p>\n                    Every country in the world is regularly tracked by a large number of metrics. Some are mundane measures (e.g., <i>population</i>, <i>physical size</i>) and others are meant to reflect quality (e.g., <i>control of corruption</i>, <i>political rights score</i>). This creates a large list of variables that could make a country “good” or “bad”, with no simple way to combine them.\n                  </p>\n                  <p>\n                    A country like the <b>United States</b> may rank high on <i>financial freedom score</i> <WDVPMetric>92<sup>nd</sup> percentile</WDVPMetric>, but comparatively low on <i>the percent of women in parliament/congress</i> <WDVPMetric>49<sup>th</sup> percentile</WDVPMetric>.\n                  </p>\n\n                  <p>\n                    Because there are no universally accepted measures of “good”, we approached this question agnostically, allowing the individual user to interrogate countries based on metrics or reference countries of their choosing.\n                  </p>\n                </div>\n\n                <div className=\"WDVP__split__section WDVP__split__section--chart\">\n                  <WDVPMetrics />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"WDVP__section\">\n\n              <div className=\"WDVP__section-header\" id=\"country-similarity-map\">\n                <div className=\"WDVP__section-header__index\">\n                  I.\n                </div>\n                Country similarity map\n              </div>\n\n              <p>\n                Click on a country to find what it is good (and bad) at and other countries it is similar to. The best and worst metrics for the country will display to the left and the map will recolor itself to reflect the <b className=\"WDVP__color-2\">most similar countries</b> and <b className=\"WDVP__color-1\">least similar countries</b> across all metrics.\n              </p>\n\n              <WDVPMap selectedCountryName={selectedMapCountryName} />\n\n              <div className=\"WDVP__cards-intro\">\n                A few interesting things can be learned here:\n              </div>\n\n              <div className=\"WDVP__cards\">\n                <div className=\"WDVP__cards__item\">\n                  <div className=\"WDVP__cards__item__header\">\n                    Many countries are similar to their neighbors\n                  </div>\n                  For example, the Scandinavian countries are similar to each other and northern europe (they all rank high on <i>civil liberties score</i> and <i>political rights score</i>). And East African countries are similar to each other (low rankings for <i>health expenditure per person</i> and <i>government spending score</i>).\n                </div>\n                <div className=\"WDVP__cards__item\">\n                  <div className=\"WDVP__cards__item__header\">\n                    Some countries are not similar to their neighbors\n                  </div>\n                  For example, <div className=\"WDVP__country\" onClick={this.onSelectMapCountry(\"Japan\")}>Japan</div> is more similar to a network of english-speaking countries than it is to its neighbors (this is largely reflected in its high ranks on <i>civil liberties score</i>, <i>GDP (billions PPP)</i>, and <i>political rights score</i>).\n                </div>\n                <div className=\"WDVP__cards__item\">\n                  <div className=\"WDVP__cards__item__header\">\n                    Countries group based on how they appear in the news\n                  </div>\n                  War-torn countries are similar to each other (e.g., <div className=\"WDVP__country\" onClick={this.onSelectMapCountry(\"Yemen\")}>Yemen</div> groups with <div className=\"WDVP__country\" onClick={this.onSelectMapCountry(\"Syria\")}> Syria </div> -- low <i>overall economic freedom score</i> and <i>political stability & absence of violence</i>) and countries that lack political freedom (e.g., <div className=\"WDVP__country\" onClick={this.onSelectMapCountry(\"Russia\")}> Russia </div> and <div className=\"WDVP__country\" onClick={this.onSelectMapCountry(\"Iran\")}>Iran</div> -- low <i>financial freedom score</i>)\n                </div>\n                <div className=\"WDVP__cards__item\">\n                  <div className=\"WDVP__cards__item__header\">\n                    Some countries are similar to no one\n                  </div>\n                  For example, <div className=\"WDVP__country\" onClick={this.onSelectMapCountry(\"Mongolia\")}>Mongolia</div> and <div className=\"WDVP__country\" onClick={this.onSelectMapCountry(\"Bhutan\")}>Bhutan</div> do not correlate highly with any countries.\n                </div>\n              </div>\n\n              <p>\n                These observations tell us that the metrics in the dataset captures relationships between countries that make sense intuitively. This suggests that if there is a proper “axis of good”, these data are likely rich enough to find it. We merely need to select the right metrics.\n              </p>\n            </div>\n\n            <div className=\"WDVP__section\">\n              <div className=\"WDVP__section-header\" id=\"finding-metrics\">\n                <div className=\"WDVP__section-header__index\">\n                  II.\n                </div>\n                Finding metrics\n              </div>\n\n              <p>\n                To aid in metric discovery, we want to visualize all countries and metrics simultaneously. Below, we’ve plotted the values of all metrics for all countries as a grid of bars, where the bar height indicates  the  value for each metric/country combination. Select metrics on the right and the countries will be ranked by their percentile for that metric. The metrics will also be ranked by their similarity to the selected metric.\n              </p>\n\n              <WDVPBars />\n\n              <p>\n                It is clear that many metrics are correlated with each other (the same countries have high values for both metrics). Certain countries are also correlated with each other (they have similar patterns of metric values).\n              </p>\n\n              <div className=\"WDVP__cards\">\n                <div className=\"WDVP__cards__item WDVP__cards__item--dark\">\n                  <div>\n                    <div className=\"WDVP__cards__item__header\">\n                      Some countries are similar across metrics\n                    </div>\n                    For example, the countries in the white bounding box all rank low on the selected metric, but rank high on many other metrics.\n                  </div>\n                  <img className=\"WDVP__cards__item__image\" src={similarCountriesImage} />\n                </div>\n                <div className=\"WDVP__cards__item WDVP__cards__item--dark\">\n                  <div>\n                    <div className=\"WDVP__cards__item__header\">\n                      Some metrics are similar across countries\n                    </div>\n                    For example, metrics in the white bounding box all have lots of green to the left and lots of red to the right, meaning the same countries are ranking high and low in each.\n                  </div>\n                  <img className=\"WDVP__cards__item__image\" src={similarMetricsImage} />\n                </div>\n              </div>\n\n              <p>\n                Although we can find groupings in this space, we always see the full dimensionality of the dataset. The final visualization will try to reduce this to a single axis.\n              </p>\n            </div>\n\n            <div className=\"WDVP__section\" id=\"axis-of-goodness\">\n              <div className=\"WDVP__section-header\">\n                <div className=\"WDVP__section-header__index\">\n                  III.\n                </div>\n                Axes of “goodness”\n              </div>\n              <p>\n                It’s time to combine metrics and rank countries by how good they are. The sliders below let you set how much each metric contributes to the ranking. Since we have established that countries can be good at some metrics and bad at others, you can create two sets of weights to combine metrics.\n              </p>\n\n              <p>\n                Play around with different weights or select from our presets.\n              </p>\n\n              <p>\n                <span style={{fontSize: \"0.8em\", lineHeight: \"1em\", opacity: 0.6}}>\n                  Note: once you have picked your favorite metrics to combine, the scatter plot will update to show how each country performs under your conditions. We then find the “axis of good” in this plot by finding the line that explains the maximum amount of variability across countries. The black line shows the axis of good given the two sets of metrics you selected.\n                </span>\n              </p>\n\n              <WDVPGrandPoobah />\n<p>\nThe Axis of Good plot lets you pick aggregate metrics. One thing is pretty clear, most aggregate metrics are correlated with each other (countries that do well by one aggregate will do well by another), although there are some trade offs.\n</p>\n\n<p>\nAnother takeaway is that the Northern European countries are doing well on many metrics and thus often appear at the top.\n</p>\n\n\n\n            <div className=\"WDVP__cards\">\n              <div className=\"WDVP__cards__item\">\n                <div className=\"WDVP__cards__item__header\">\n                  Economic vs. Social Good\n  </div>\n                Choosing indicators of economic health (e.g., <i>GDP</i>, <i>GDP per capita</i>, <i>Tax Burden Score</i>, etc.) and plotting them against metrics reflecting social good (e.g., <i>civil liberties</i>, <i>political rights</i>, <i>% female MPs</i>) shows that countries that are doing well economically are also doing well socially. The two aggregate metrics are very correlated.\n  <img className=\"WDVP__cards__item__image\" src={Economic_vs_Social_plot_only} />\n                <h6 className=\"WDVP__cards__item__list-header\">Top Countries</h6>\n                <ol className=\"WDVP__cards__item__list\">\n                  <li>Sweden</li>\n                  <li>Germany</li>\n                  <li>United Kingdom</li>\n                  <li>Norway</li>\n                  <li>Netherlands</li>\n                </ol>\n\n            </div>\n            <div className=\"WDVP__cards__item\">\n              <div className=\"WDVP__cards__item__header\">\n                Governing vs. Social Good\n  </div>\n              Choosing indicators of government health (e.g., <i>control of corruption</i>, <i>government effectiveness</i>, <i>government integrity</i>, etc.) and plotting them against metrics reflecting social good (e.g., <i>civil liberties</i>, <i>political rights</i>, <i>% female MPs</i>) shows positive correlation. Countries that have functioning governments are doing well on social indicators as well.\n  <img className=\"WDVP__cards__item__image\" src={Governing_vs_Social_plot_only} />\n              <h6 className=\"WDVP__cards__item__list-header\">Top Countries</h6>\n              <ol className=\"WDVP__cards__item__list\">\n                <li>Germany</li>\n                <li>Norway</li>\n                <li>United Kingdom</li>\n                <li>Sweden</li>\n                <li>Netherlands</li>\n              </ol>\n\n          </div>\n          <div className=\"WDVP__cards__item\">\n            <div className=\"WDVP__cards__item__header\">\n              Governing vs. Economic good\n  </div>\n            Choosing indicators of government health (e.g., <i>control of corruption</i>, <i>government effectiveness</i>, <i>government integrity</i>, etc.) and plotting them against metrics reflecting economic health (e.g., <i>GDP</i>, <i>GDP per capita</i>, <i>Tax Burden Score</i>, etc.) shows positive correlation. Countries that have healthy government indicators also have good economic indicators.\n  <img className=\"WDVP__cards__item__image\" src={Governing_vs_Economic_plot_only} />\n            <h6 className=\"WDVP__cards__item__list-header\">Top Countries</h6>\n            <ol className=\"WDVP__cards__item__list\">\n              <li>Sweden</li>\n              <li>Netherlands</li>\n              <li>Luxembourg</li>\n              <li>Denmark</li>\n              <li>New Zealand</li>\n            </ol>\n\n        </div>\n      </div>\n\n<p>\nOverall, what makes a \"good\" country will not be the same for everyone, but it is clear from the analyses above that Northern Europe is dominating many metrics in the dataset provided by WDVP. While it is almost impossible to infer the cause of their success from these correlational analyses, they are well known for implementing a <a href=\"https://en.wikipedia.org/wiki/Welfare_state\" target=\"_blank\" ref=\"noreferrer noopener\">welfare state</a>, where the government promotes the social well-being of its citizens. It is not surprising that they dominate the social metrics, however, these data reveal that this in no way hurts their economic indicators. In other words, if a country wants to knock Northern Europe off the top of the list, cutting corners on social fronts isn't necessarily a shortcut to better economic metrics.\n</p>\n            </div>\n\n            <div className=\"WDVP__footer\">\n                <h6>\n                  Methods\n                </h6>\n              <div className=\"WDVP__footer__section\">\n                <h6>\n                  The Dataset\n                </h6>\n                <p>\n                  <a href=\"https://docs.google.com/spreadsheets/d/11LhOlwsloUuA495r-04IDwciMqNrLwWGpveqpF61WXU/edit#gid=0\" target=\"_blank\" rel=\"noopener noreferrer\">WDVP provided</a>\n                </p>\n              </div>\n\n              <div className=\"WDVP__footer__section\">\n                <h6>\n                  Preprocessing\n                </h6>\n                  <p>\n                  <b>Missing data:</b> metrics with more than 20 missing country values were removed (‘Education Expenditure per person’, ‘education expenditure as % of GDP’, ‘happy planet index’, and ‘world happiness report score’)\n                  </p>\n                <p>\n                  <b>Percentile:</b> raw values were converted to percentiles\n                </p>\n                <p>\n                  <b>Highlow flip:</b> percentiles were reversed for metrics where low is better ('Government Spending Score', 'Political Rights Score', 'Civil Liberties Score’)\n                </p>\n              </div>\n\n              <div className=\"WDVP__footer__section\">\n                <h6>\n                  Analysis\n                </h6>\n                <p>\n                  Correlations between countries and metrics were measured using the Pearson correlation coefficient.\n                  We used non-negative matrix factorization (NNMF) to initialize weights. To find the axis of good in the 2D scatter plot, we used Principal Components Analysis to find the eigenvector for the largest eigenvalue. NNMF was run using matlab. All other analyses were run with custom javascript functions.\n                </p>\n              </div>\n\n            </div>\n        </div>\n    </div>\n    )\n  }\n}\n\nexport default WDVP\n\n\nconst WDVPMetric = ({ children }) => (\n  <span className=\"WDVPMetric\">\n    { children }\n  </span>\n)","import React, {Component} from \"react\"\nimport PropTypes from \"prop-types\"\nimport classNames from \"classnames\"\nimport numeral from \"numeral\"\nimport _ from \"lodash\"\nimport * as d3 from \"d3\"\n\nrequire('./Chart.scss')\n\nexport const getHeight = (height, margin={top: 0, bottom: 0}) => Math.max(height - margin.top - margin.bottom, 0)\nexport const getWidth = (width, margin={left: 0, right: 0}) => Math.max(width - margin.left - margin.right, 0)\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      height: this.props.height,\n      width: this.props.width,\n      isLoaded: false,\n    }\n  }\n\n  static propTypes = {\n    height: PropTypes.number,\n    width: PropTypes.number,\n    margin: PropTypes.shape({\n      top: PropTypes.number,\n      right: PropTypes.number,\n      bottom: PropTypes.number,\n      left: PropTypes.number,\n    }),\n    hasNoListener: PropTypes.bool,\n    onMouseMove: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n    onMouseEnter: PropTypes.func,\n  };\n\n  static defaultProps = {\n    height: 200,\n    width: 600,\n    margin: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n    },\n    onMouseMove: _.noop,\n    onMouseEnter: _.noop,\n    onMouseEnter: _.noop,\n};\n\n  getClassName() {\n    return classNames(\"Chart\", this.props.className)\n  }\n\n  getWrapperStyle() {\n    let {margin} = this.props\n    let translate = `translate3d(${margin.left}px, ${margin.top}px, 0)`\n    return {\n      transform: translate,\n      WebkitTransform: translate\n    }\n  }\n\n  setSize = () => {\n    if (!this._isMounted) return\n    let {height, width, margin} = this.props\n    this.setState({height: getHeight(height, margin)})\n    this.setState({width: getWidth(width, margin)})\n  }\n\n  componentWillMount() {\n    this.setSize()\n  }\n\n  componentDidMount() {\n    this._isMounted = true\n    this._setSize = this.setSize\n    window.addEventListener(\"resize\", this._setSize)\n    setTimeout(() => {\n      this.setState({isLoaded: true})\n    })\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false\n    window.removeEventListener(\"resize\", this._setSize)\n  }\n\n  renderClipPath() {\n    let {height, width} = this.state\n    let {margin} = this.props\n\n    return <clipPath id=\"chartPath-clip\">\n      <rect className=\"Chart__clip-path\"\n        x={margin.left}\n        y={margin.top}\n        height={height}\n        width={width}\n      />\n    </clipPath>\n  }\n\n\n  render() {\n    const {height, width, margin, hasNoListener, children, line, area, bar, xAxis, yAxis, brush, hasTooltip, onMouseMove, onMouseEnter, onMouseLeave} = this.props\n\n    return (\n      <div ref=\"elem\" className={this.getClassName()}>\n        <svg className=\"Chart__svg\" height={height} width={width}>\n          <defs>\n            {this.renderClipPath()}\n          </defs>\n          <g className=\"Chart__wrapper\" style={this.getWrapperStyle()}>\n            {children}\n          </g>\n          {!hasNoListener && (\n            <rect\n              className=\"Chart__listener\"\n              x={margin.left}\n              y={margin.top}\n              height={getHeight(height, margin)}\n              width={getWidth(width, margin)}\n              onMouseMove={onMouseMove}\n              onMouseLeave={onMouseLeave}\n              onMouseEnter={onMouseEnter}\n            />\n          )}\n        </svg>\n      </div>\n    )\n  }\n}\n\nexport default Chart\n","import React, {Component} from \"react\"\nimport PropTypes from \"prop-types\"\nimport classNames from \"classnames\"\nimport * as d3 from \"d3\"\n\nrequire('./Axis.scss')\nconst orientations = {\n  x: \"bottom\",\n  y: \"left\"\n}\nconst axesMap = {\n  top: \"axisTop\",\n  left: \"axisLeft\",\n  right: \"axisRight\",\n  bottom: \"axisBottom\",\n}\n\nclass Axis extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      axis: null\n    }\n  }\n\n  static propTypes = {\n    width: PropTypes.number,\n    height: PropTypes.number,\n    scale: PropTypes.func,\n    margin: PropTypes.shape({\n      top: PropTypes.number,\n      right: PropTypes.number,\n      bottom: PropTypes.number,\n      left: PropTypes.number,\n    }),\n    dimension: PropTypes.oneOf([\"x\", \"y\"]),\n    orientation: PropTypes.oneOf([\"left\", \"right\", \"top\", \"bottom\"]),\n    ticks: PropTypes.number,\n    tickSize: PropTypes.number,\n    tickSizeInner: PropTypes.number,\n    tickSizeOuter: PropTypes.number,\n    tickFrequency: PropTypes.number,\n    tickArguments: PropTypes.array,\n    format: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.number,\n    ]),\n    initTransition: PropTypes.number,\n    transition: PropTypes.number,\n    label: PropTypes.string,\n    hasInlineLabel: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    margin: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n    },\n    ticks: 6,\n    tickSize: 0,\n    tickSizeInner: 6,\n    tickSizeOuter: 0,\n    initTransition: 300,\n    transition: 300\n  };\n  elem = React.createRef()\n\n  getStyle() {\n    const {height, width, margin, dimension} = this.props\n    const x = dimension == \"x\"      ? 0 :\n              margin.left           ? 1 :\n                                      width\n    const y = dimension == \"x\" ? height - margin.top - margin.bottom : 0\n\n    return {\n      transform: `translate3d(${x}px, ${y}px, 0)`\n    }\n  }\n\n  getOrientation() {\n    let {dimension, orientation} = this.props\n    return orientation || orientations[this.props.dimension] || \"left\"\n  }\n\n  update(props) {\n    let {scale, label, tickSize, tickSizeInner, tickSizeOuter, ticks, tickFrequency, tickPadding, tickArguments, format, initTransition, transition} = (props || this.props)\n    let {axis} = this.state\n    if (!scale) return\n\n    let init = !axis\n    if (init) axis = d3[axesMap[this.getOrientation()]]()\n\n    axis.scale(scale)\n        .tickSize(tickSize)\n        .tickSizeInner(tickSizeInner)\n        .tickSizeOuter(tickSizeOuter)\n\n    if (tickArguments) axis.tickArguments(tickArguments)\n    if (format) axis.tickFormat(format)\n    if (ticks) axis.ticks(ticks, tickFrequency)\n    if (tickPadding) axis.tickPadding(tickPadding)\n\n    d3.select(this.elem.current)\n      .transition().duration(init ? initTransition : transition)\n      .call(axis)\n\n    this.setState({axis})\n  }\n\n  componentDidMount() {\n    this.update()\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.update(newProps)\n  }\n\n  renderLabel() {\n    let {dimension, label, width, hasInlineLabel} = this.props\n    let x =      dimension == \"x\" ? width - 100 || 0 : 0\n    let y =      dimension == \"x\" ? -10 :\n      hasInlineLabel ? 6 : 20\n    let rotate = dimension == \"x\" || hasInlineLabel ? 0 : -90\n\n    let style = {\n      transform: `rotate(${rotate}deg)`,\n    }\n    return <text\n      className={`Axis__label Axis--${dimension ? `${dimension}__` : ''}label`}\n      style={style}\n      x={x}\n      y={y}>\n      {label}\n    </text>\n  }\n\n  getClassName() {\n    let {dimension, hasInlineLabel, className} = this.props\n\n    return classNames(\n      \"Axis\", {\n        [`Axis--${dimension}`]: dimension,\n        [`Axis--has-inline-label`]: hasInlineLabel,\n      },\n      className\n    )\n  }\n\n  render() {\n    let {label} = this.props\n\n    return (\n      <g ref={this.elem} className={this.getClassName()} style={this.getStyle()}>\n        {!!label && this.renderLabel()}\n      </g>\n    )\n  }\n}\n\nexport default Axis\n","import React, {Component} from \"react\"\nimport PropTypes from \"prop-types\"\nimport classNames from \"classnames\"\nimport _ from \"lodash\"\nimport {isObject} from \"lodash\"\n\nrequire('./RadioGroup.scss')\n\nconst getOptionValue = option => _.isObject(option) ? option.value : option\nconst areSameValue = (a, b) => getOptionValue(a) == getOptionValue(b)\nclass RadioGroup extends Component {\n  static propTypes = {\n    options: PropTypes.array,\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.object\n    ]),\n    isMulti: PropTypes.bool,\n    canClear: PropTypes.bool,\n    onChange: PropTypes.func,\n  };\n\n  static defaultProps = {\n    options: [],\n    isMulti: false,\n    canClear: false,\n    onChange: _.noop,\n  };\n\n  getClassName() {\n    return classNames(\n      \"RadioGroup\", this.props.className\n    )\n  }\n\n  onChange = option => () => {\n    const { value, isMulti } = this.props\n    const newValue = isMulti ?\n        !option ? [] :\n        value.map(getOptionValue).includes(getOptionValue(option)) ? _.filter(value, d => !areSameValue(option, d)) :\n          [...value, option]  :\n        !option || areSameValue(value, option) ?\n          null :\n        option\n    this.props.onChange(newValue)\n  }\n\n  renderOption = (option, idx) => {\n    const {value, isMulti} = this.props\n\n    const className = classNames(\n      \"RadioGroup__option\", {\n        \"RadioGroup__option--selected\": isMulti ?\n          value.map(getOptionValue).includes(getOptionValue(option)) :\n          areSameValue(option, value)\n      }\n    )\n    return <div className={className} style={{\n      color: option.color,\n    }} onClick={this.onChange(option)} key={idx}>\n      {_.isObject(option) && option.label ? option.label : getOptionValue(option)}\n    </div>\n  }\n\n  renderClear = () => {\n    return (\n      <div className=\"RadioGroup__option RadioGroup__clear\" onClick={this.onChange()}>\n        x\n      </div>\n    )\n  }\n\n  render() {\n    const {options, canClear, isMulti} = this.props\n\n    return (\n      <div className={this.getClassName()}>\n        {options.map(this.renderOption)}\n        {canClear && this.renderClear()}\n      </div>\n    )\n  }\n}\n\nexport default RadioGroup\n","import * as d3 from \"d3\"\n\nconst scaleTypes = {\n  linear: d3.scaleLinear,\n  ordinal: d3.scaleOrdinal,\n  time: d3.scaleTime,\n  log: d3.scaleLog,\n}\n\nexport const createScale = (providedConfig) => {\n  const defaultConfig = {\n    type: \"linear\",\n    dimension: \"x\",\n    domain: [0, 1],\n    margin: {top: 0, right: 0, bottom: 0, left: 0}\n  }\n  const config = {\n    ...defaultConfig,\n    ...providedConfig,\n  }\n\n  if (!config.range) {\n    config.range = config.dimension == \"x\" ?\n                      [0, config.width - config.margin.right - config.margin.left] :\n                      [config.height - config.margin.top - config.margin.bottom, 0]\n  }\n\n  let scale = (scaleTypes[config.type] || config.type)()\n  scale.range(config.range)\n       .domain(config.domain)\n  if (config.clamp) scale.clamp(config.clamp)\n\n  return scale\n}","export default {\r\n  colors: {\r\n    primary: \"#114D4D\",\r\n    primary50: \"#e0e9ee\",\r\n    primary25: \"#e0e9ee\",\r\n  },\r\n  borderRadius: 6,\r\n  option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n    return {\r\n      ...styles,\r\n      backgroundColor: isDisabled\r\n        ? null\r\n        : isSelected ? data.color : isFocused ? `${data.color}22` : null,\r\n      color: isDisabled\r\n        ? '#e0e9ee'\r\n        : isSelected\r\n          ? \"white\"\r\n          : data.color,\r\n    };\r\n  },\r\n  multiValue: (styles, { data }) => {\r\n    return {\r\n      ...styles,\r\n      backgroundColor: `${data.color}22`,\r\n    };\r\n  },\r\n  multiValueLabel: (styles, { data }) => ({\r\n    ...styles,\r\n    color: data.color,\r\n  }),\r\n  multiValueRemove: (styles, { data }) => ({\r\n    ...styles,\r\n    color: data.color,\r\n    ':hover': {\r\n      backgroundColor: data.color,\r\n      color: 'white',\r\n    },\r\n  })\r\n}","import React, {Component, PureComponent} from \"react\"\nimport Select from 'react-select';\nimport selectStyles from \"./selectStyles\"\nimport * as d3 from \"d3\"\nimport classNames from \"classnames\"\nimport _ from \"lodash\"\nimport { createScale } from 'components/_ui/Chart/utils/scale';\nimport Icon from 'components/_ui/Icon/Icon';\n\nimport rawData from \"./Wdvp_gov_score.json\"\nimport countryPaths from \"./country-paths.json\"\nimport metricsInfo from \"./metric-info.json\"\nimport metricRankedCorrelationData from \"./Wdvp_corr.json\"\n\nimport './WDVPMap.scss'\n\nconst countriesByName = _.fromPairs(\n  _.map(rawData, country => [country.Country, country])\n)\n\n// const blackAndWhiteColorScale = d3.scaleSequential(interpolateRdBu)\nconst blackAndWhiteColorScale = createScale({\n  domain: [-0.9, 0, 0.9],\n  // range: [\"#fafafa\", \"#45aeb1\"],\n  range: [\"#F97F51\", \"#eaeaea\", \"#3B3B98\"],\n})\nconst percentileOrRawOptions = [{\n  value: false,\n  label: \"Value\",\n},{\n  value: true,\n  label: \"Percentile\",\n}]\nconst defaultMetrics = _.sortBy(\n  _.without(_.map(metricRankedCorrelationData, \"fieldname\"), \"Area in km²\"),\n  _.toLower,\n)\nconst percentileMetrics = _.map(defaultMetrics, d => `${d}__percentile`)\nconst countryOptions = _.map(rawData, country => ({\n  value: country.Country,\n  label: country.Country,\n  color: \"#114D4D\",\n}))\nconst metricOptionsVerbose = _.map(defaultMetrics, m => ({\n  value: m,\n  label: m,\n  color: \"#114D4D\",\n}))\nconst valueToNumber = d => _.isFinite(d) ? d : 0\n\nclass WDVPMap extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedMetric: defaultMetrics[0],\n      selectedCountry: countriesByName[\"United States\"],\n      metricScales: {},\n      sortedCountries: [],\n      metricsByImportance: [],\n      hoveredCountry: null,\n      tooltipPosition: null,\n      countryCorrelations: null,\n      isShowingPercentile: false,\n    }\n  }\n  container = React.createRef()\n\n  getClassName() {\n    return classNames(\"WDVPMap\", \"WDVP__full-width\", this.props.className)\n  }\n\n  componentDidMount() {\n    this._isMounted = true\n    this.createScales()\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedCountryName != this.props.selectedCountryName) this.onCountrySelectExternal()\n  }\n  componentWillUnmount() {\n    this._isMounted = false\n  }\n  chart = React.createRef()\n\n  createScales = () => {\n    const { sort, selectedCountry, isAscending, isShowingPercentile } = this.state\n\n    const metricsByImportance = _.orderBy(\n      _.map(defaultMetrics, metric => [\n        metric,\n        selectedCountry[`${metric}__percentile`] > 50 ? 100 - selectedCountry[`${metric}__percentile`] : selectedCountry[`${metric}__percentile`],\n        selectedCountry[`${metric}__percentile`],\n      ]),\n      1,\n      \"asc\",\n    )\n    const selectedCountryDifferences = this.getDifferences(_.values(_.pick(selectedCountry, percentileMetrics)))\n\n    const countryCorrelations = _.fromPairs(\n      _.map(rawData, country => {\n        const metricDifferences = this.getDifferences(_.values(_.pick(country, percentileMetrics)))\n        const numerator = _.mean(_.map(metricDifferences, (d,i) => d * selectedCountryDifferences[i]))\n        const squaredDiffsForCountry = _.mean(_.map(metricDifferences, (d,i) => d * d))\n        const squaredDiffsForSelectedCountry = _.mean(_.map(selectedCountryDifferences, (d,i) => d * d))\n        const denominator = Math.sqrt(squaredDiffsForCountry) * Math.sqrt(squaredDiffsForSelectedCountry)\n        return [country.Country, numerator / denominator]\n      })\n    )\n\n    const sortedCountries = _.map(\n      _.orderBy(\n        _.toPairs(countryCorrelations),\n        1,\n        \"desc\"\n      ),\n      0,\n    )\n\n    this.setState({ countryCorrelations, sortedCountries, metricsByImportance })\n  }\n\n  getDifferences = arr => {\n    const values = _.map(arr, valueToNumber)\n    const mean = _.mean(arr)\n    const differences = _.map(values, (d, i) => d - mean)\n    return differences\n  }\n\n  removeTooltip = () => {\n    if (!this._isMounted) return\n\n    this.setState({ hoveredCountry: null, tooltipPosition: null })\n  }\n\n  onCountryHover = country => () => {\n    if (!country) {\n      this.timeout = setTimeout(this.removeTooltip, 100)\n      return\n    }\n\n    if (this.timeout) clearTimeout(this.timeout)\n\n    try {\n      const countryElement = d3.select(this.container.current).select(`#country--${country[\"ISO-3166 alpha2\"]}`)._groups[0][0]\n      if (!countryElement) return;\n\n      const containerBounds = this.container.current.getBoundingClientRect()\n      const bounds = countryElement.getBoundingClientRect()\n      const tooltipPosition = {\n        x: Math.min(bounds.left - containerBounds.left + bounds.width / 2, window.innerWidth - 300),\n        y: bounds.top - containerBounds.top + bounds.height / 2,\n      }\n      this.setState({ tooltipPosition })\n    } catch(e) {\n\n    }\n\n    this.setState({ hoveredCountry: country })\n  }\n  onIsShowingPercentileSelect = newVal => this.setState({ isShowingPercentile: newVal.value }, this.createScales)\n  onMetricChange = metric => () => this.setState({ selectedMetric: metric })\n  onCountrySelectFromSelect = country => this.onCountrySelect(countriesByName[country.value])\n  onCountrySelectLocal = country => () => this.onCountrySelect(country)\n  onCountrySelectByNameLocal = country => () => this.onCountrySelect(countriesByName[country])\n  onCountrySelect = country => this.setState({ selectedCountry: country }, this.createScales)\n  onCountrySelectExternal = () => !!this.props.selectedCountryName && this.setState({ selectedCountry: countriesByName[this.props.selectedCountryName] }, this.createScales)\n\n  getCountryColor = countryName => countryName == this.state.selectedCountry.Country ? \"#1d1d27\" :\n    this.state.countryCorrelations &&\n    _.isFinite(this.state.countryCorrelations[countryName]) &&\n    blackAndWhiteColorScale(this.state.countryCorrelations[countryName])\n\n  render() {\n    const { metricScales, selectedMetric, selectedCountry, countryCorrelations, sortedCountries, metricsByImportance, hoveredCountry, tooltipPosition, isShowingPercentile } = this.state\n    const valueMetric = isShowingPercentile ? `${selectedMetric}__percentile` : selectedMetric\n\n    return (\n      <div className={this.getClassName()}>\n\n      <div className=\"WDVPMap__header\">\n        <div className=\"WDVPMap__header__contents\">\n          <div className=\"WDVPMap__header__title\">\n            <div className=\"WDVPMap__header__title__text\">\n              Countries similar to\n            </div>\n            <Select\n              name=\"countries\"\n              options={countryOptions}\n              value={{value: selectedCountry.Country, label: selectedCountry.Country}}\n              className=\"WDVPMap__select\"\n              classNamePrefix=\"WDVPMap__select\"\n              styles={selectStyles}\n              onChange={this.onCountrySelectFromSelect}\n            />\n          </div>\n\n          <div className=\"WDVPMap__header__scale\">\n            <h6 className=\"WDVPMap__header__scale__label\">Most Similar</h6>\n            {_.map(sortedCountries.slice(1, 4), (country, index) => (\n              <React.Fragment key={country}>\n                {!!index && \",\"}\n                <span style={{color: this.getCountryColor(country)}} className=\"WDVPMap__header__country\" onClick={this.onCountrySelectByNameLocal(country)}>\n                  { country }\n                </span>\n              </React.Fragment>\n            ))}\n            ...\n            {_.map(sortedCountries.slice(-3), (country, index) => (\n              <React.Fragment key={country}>\n                {!!index && \",\"}\n                <span style={{color: this.getCountryColor(country)}} className=\"WDVPMap__header__country\" onClick={this.onCountrySelectByNameLocal(country)}>\n                  { country }\n                </span>\n              </React.Fragment>\n            ))}\n            <h6 className=\"WDVPMap__header__scale__label\">Least Similar</h6>\n          </div>\n\n          <div className=\"WDVPMap__header__scale WDVPMap__header__metrics\">\n            <h6 className=\"WDVPMap__header__scale__label\">Distinctive metrics</h6>\n            {_.map(metricsByImportance.slice(0, 5), (metric, index) => (\n              <React.Fragment key={metric[0]}>\n                {!!index && \",\"}\n                <span className=\"WDVPMap__header__metrics__item\">\n                  { metric[0] }\n                  <span className={`WDVPMap__header__metrics__item__arrow WDVPMap__header__metrics__item__arrow--${metric[2] > 50 ? \"up\" : \"down\"}`}>\n                    <Icon name=\"arrow\" size=\"s\" direction=\"n\" />\n                  </span>\n                </span>\n              </React.Fragment>\n            ))}\n          </div>\n        </div>\n      </div>\n\n        <div className=\"WDVPMap__chart\">\n          <svg className=\"WDVPMap__svg\" viewBox=\"0 0 962 502\" preserveAspectRatio=\"xMidYMid meet\" ref={this.container}>\n            {_.map(rawData, country => (\n              <WDVPMapCountry\n                key={country.Country}\n                name={country.Country}\n                id={country[\"ISO-3166 alpha2\"]}\n                path={countryPaths[country.Country]}\n                onMouseEnter={this.onCountryHover(country)}\n                onMouseLeave={this.onCountryHover(null)}\n                onClick={this.onCountrySelectLocal(country)}\n                color={this.getCountryColor(country.Country)}\n              />\n            ))}\n\n            {hoveredCountry && (\n              <WDVPMapCountry\n                name={hoveredCountry.Country}\n                path={countryPaths[hoveredCountry.Country]}\n                color={this.getCountryColor(hoveredCountry.Country)}\n                isHovered\n              />\n            )}\n          </svg>\n\n          {tooltipPosition && (\n            <WDVPMapTooltip\n              country={hoveredCountry}\n              correlation={countryCorrelations && countryCorrelations[hoveredCountry.Country]}\n              sortedCountries={sortedCountries}\n              selectedCountry={selectedCountry}\n              selectedMetric={selectedMetric}\n              style={{\n                transform: `translate(${tooltipPosition.x}px, ${tooltipPosition.y}px)`\n              }}\n            />\n          )}\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default WDVPMap\n\n\nconst formatNumber = d3.format(\",\")\nconst formatCorrelation = d3.format(\".2f\")\nconst WDVPMapCountry = React.memo(({ id, name, path, color, isHovered, ...props }) => (\n  <path {...props}\n    className={isHovered ? \"WDVPMapCountry WDVPMapCountry--is-hovered\" : \"WDVPMapCountry\"}\n    id={`country--${id}`}\n    d={path}\n    title={name}\n    fill={color}\n  />\n))\n\nconst WDVPMapTooltip = React.memo(({ country, selectedCountry, selectedMetric, correlation, ...props }) => (\n  <div className=\"WDVPMapTooltip\" {...props}>\n    <h6>\n      { country.Country }\n    </h6>\n    <div className=\"WDVPMapTooltip__metric\">\n      <div className=\"WDVPMapTooltip__metric__label\">\n        Correlation with { selectedCountry.Country }:\n      </div>\n      <div className=\"WDVPMapTooltip__metric__number\">\n        { formatCorrelation(correlation) }\n      </div>\n    </div>\n  </div>\n))\n","import React, {Component} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3 from \"d3\"\nimport numeral from \"numeral\"\nimport classNames from \"classnames\"\nimport _ from \"lodash\"\nimport { createScale } from 'components/_ui/Chart/utils/scale';\nimport RadioGroup from 'components/_ui/RadioGroup/RadioGroup';\nimport Select from 'react-select';\nimport selectStyles from './selectStyles';\n\nimport Chart from \"components/_ui/Chart/Chart\"\nimport Axis from \"components/_ui/Chart/Axis/Axis\"\n\nimport rawData from \"./Wdvp_gov_score.json\"\n\nimport './WDVPScatter.scss'\n\nconst formatNumber = d => numeral(d).format(\"0,0\")\nconst margin = {\n  top: 20,\n  right: 20,\n  bottom: 50,\n  left: 50,\n}\nlet continents = [\n  {code: \"AS\", value: \"Asia\",          color: \"#12CBC4\"}, // #EF4E78, \"#63cdda\"\n  {code: \"EU\", value: \"Europe\",        color: \"#B53471\"}, // #F99072, \"#cf6a87\"\n  {code: \"AF\", value: \"Africa\",        color: \"#F79F1F\"}, // #FFCA81, \"#e77f67\"\n  {code: \"NA\", value: \"North America\", color: \"#5758BB\"}, // #98C55C, \"#FDA7DF\"\n  {code: \"OC\", value: \"Oceania\",       color: \"#1289A7\"}, // #67B279, \"#4b7bec\"\n  {code: \"SA\", value: \"South America\", color: \"#A3CB38\"}, // #6F87A6, \"#778beb\"\n]\nconst numberFromValue = value =>\n  _.isFinite(value) ? value :\n  _.isString(value) ? +value.replace(/,/g, \"\") :\n  null\n\n// const metricOptions = [\n//   \"population\", \"GDP\", \"GDP per km2\", \"land area (sq km)\", \"population density\", \"total foreign-born\\npopulation\", \"% foreign-born population\", \"population living abroad (diaspora)\", \"population living abroad\", \"happy planet index\", \"world happiness report score\", \"human development index\", \"health expenditure\", \"education expenditure\", \"Area in km²\", \"Population\"\n// ]\nconst metricOptions = [\n  \"population\", \"surface area (Km2)\", \"happy planet index\", \"human development index\", \"world happiness report score\", \"sustainable economic development assessment (SEDA)\", \"GDP (billions PPP)\", \"GDP per capita (PPP)\", \"GDP growth (annual %)\", \"health expenditure % of GDP\", \"health expenditure per person\", \"education expenditure % of GDP\", \"education expenditure per person\", \"school life expectancy (years)\", \"unemployment (%)\", \"government spending score\", \"government expenditure (% of GDP)\", \"political rights score\", \"civil liberties score\", \"political stability & absence of violence\", \"government effectiveness\", \"regulatory quality\", \"rule of law\", \"control of corruption\", \"judicial effectiveness score\", \"government integrity score\", \"property rights score\", \"tax burden score\", \"overall economic freedom score\", \"financial freedom score\", \"women MPs (% of all MPs)\", \"Area in km²\", \"Population\",\n  \"PCscore1\", \"PCscore2\", \"PCscore3\", \"PCscore4\", \"tSNE1\", \"tSNE2\",\n]\nconst metricOptionsVerbose = _.map(metricOptions, m => ({\n  value: m,\n  label: m,\n  color: \"#114D4D\",\n}))\nconst continentColors = _.fromPairs(_.map(continents, continent => [\n  continent.code,\n  continent.color,\n]))\nconst countryOptions = _.map(rawData, country => ({ value: country.Country, label: country.Country, color: continentColors[country.Continent] }))\n\nclass WDVPScatter extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      height: 0,\n      width: 0,\n      filteredData: [],\n      tooltipInfo: null,\n      closestCountries: null,\n      selectedCountries: [],\n      selectedContinents: [],\n      iteration: 0,\n      showingPointLabels: {},\n      scales: {},\n      hoveredCountry: null,\n      iterator: 0,\n    }\n  }\n  chart = React.createRef()\n  scatter = React.createRef()\n  container = React.createRef()\n  static propTypes = {\n    data: PropTypes.array,\n    xMetric: PropTypes.string,\n    yMetric: PropTypes.string,\n  }\n  static defaultProps = {\n    data: [],\n  }\n\n  getClassName() {\n    return classNames(\"WDVPScatter\", this.props.className)\n  }\n\n  componentDidMount() {\n    this.onResize()\n    window.addEventListener('resize', this.onResize)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.data != prevProps.data ||\n      this.props.xMetric != prevProps.xMetric ||\n      this.props.yMetric != prevProps.yMetric\n    ) this.createScales()\n  }\n\n  componentWillUnmount = () => {\n    window.removeEventListener('resize', this.onResize)\n  }\n\n  onResize = () => {\n    const width = Math.min(\n      window.innerHeight * 0.8,\n      this.container.current.clientWidth,\n    )\n    const height = width\n\n    this.setState({width, height}, this.createScales)\n  }\n\n  createScales = () => {\n    const { data } = this.props\n    const { width, height, selectedCountries, selectedContinents, selectedGroups } = this.state\n\n    const selectedContinentValues = _.map(selectedContinents, \"code\")\n    // const selectedGroupValues = _.map(selectedGroups, \"value\")\n    const filteredData = _.filter(data, d => (\n      (_.isEmpty(selectedContinents) || _.includes(selectedContinentValues, d.Continent))\n      // && (_.isEmpty(selectedGroups) || _.includes(selectedGroupValues, d.group))\n    ))\n\n    const scales = {\n      x: createScale({\n        // type: \"time\",\n        width,\n        margin,\n        clamp: false,\n        dimension: \"x\",\n        domain: d3.extent(filteredData, this.xAccessor),\n      }),\n      y: createScale({\n        // type: \"log\",\n        height,\n        margin,\n        clamp: false,\n        dimension: \"y\",\n        domain: d3.extent(filteredData, this.yAccessor),\n      })\n    }\n    const iteration = this.state.iteration + 1\n    this.setState({ scales, filteredData, iteration })\n  }\n  onDotsUpdate = dots => {\n    dots.style(\"fill\", d => continentColors[d.Continent])\n      .style(\"opacity\", 1)\n      // .style(\"transition\", \"all 0.9s ease-out\")\n  }\n\n  xAccessor = d => numberFromValue(d[this.props.xMetric])\n  yAccessor = d => numberFromValue(d[this.props.yMetric])\n  xAccessorScaled = (d,i) => this.state.scales.x && this.state.scales.x(this.xAccessor(d))\n  yAccessorScaled = d => this.state.scales.y && this.state.scales.y(this.yAccessor(d))\n\n  onMouseMove = (clientX, clientY) => {\n    if (!this.chart || !this.chart.current) return\n    const { width, scales, filteredData } = this.state\n    if (!this.isHoveringChart) return\n\n    const mouseX = clientX - this.chart.current.getBoundingClientRect().left - margin.left\n    const yearIndex = Math.round(scales.x.invert(mouseX))\n    const year = yearIndex + 1926\n\n    const mouseY = clientY - this.chart.current.getBoundingClientRect().top - margin.top\n    const mouseYVal = scales.y.invert(mouseY)\n\n    const parsedCountries = _.map(filteredData, country => ({\n      ...country,\n      value: country.GDP,\n      distanceFromY: mouseYVal - country.GDP,\n      absDistanceFromY: Math.abs(mouseYVal - country.GDP),\n    }))\n    const orderedCountries = _.map(_.orderBy(parsedCountries, \"GDP\", \"desc\"), (d, i) => ({...d, index: i + 1}))\n    const continentsByYCloseness = _.orderBy(orderedCountries, \"distanceFromY\", \"asc\")\n    const continentsByYAbsCloseness = _.orderBy(orderedCountries, \"absDistanceFromY\", \"asc\")\n    const closestCountries = _.get(continentsByYAbsCloseness, [0, \"Country\"])\n    const closestCountriesIndex = _.findIndex(continentsByYCloseness, {country: closestCountries})\n    const neighborsOnEachSide = 3\n    const closestCountriesIndexCenter = Math.max(Math.min(closestCountriesIndex, continentsByYCloseness.length - neighborsOnEachSide), neighborsOnEachSide)\n    const closestCountries2 = _.map(\n      continentsByYCloseness.slice(closestCountriesIndexCenter - neighborsOnEachSide, closestCountriesIndexCenter + neighborsOnEachSide),\n      (country, i) => ({...country, isSelected: closestCountriesIndexCenter + i - neighborsOnEachSide == closestCountriesIndex }),\n    )\n    const x = mouseX\n    const boundedX = Math.max(Math.min(width - 200, x), 0)\n\n    const tooltipInfo = {\n      countries: closestCountries2,\n      year,\n      y: mouseY,\n      x,\n      boundedX,\n    }\n\n    this.setState({ tooltipInfo, closestCountries })\n  }\n  throttledOnMouseMove = _.throttle(this.onMouseMove, 90)\n  persistedOnMouseMove = e => this.throttledOnMouseMove(e.clientX, e.clientY)\n\n  onMouseEnter = () => this.isHoveringChart = true;\n  clearTooltip = () => {\n    this.isHoveringChart = false;\n    this.setState({ tooltipInfo: null, closestCountries: null })\n  }\n  onCountriesSelect = countries => {\n    this.setState({ selectedCountries: countries }, this.createScales)\n    if (this.props.onHighlightedCountriesChange) this.props.onHighlightedCountriesChange(countries)\n  }\n  onContinentsSelect = continents => this.setState({ selectedContinents: continents }, this.createScales)\n\n  onMetricChange = axis => metric => this.setState({ [`${axis}Metric`]: metric.value }, this.createScales)\n\n  onMouseEnterPoint = country => () => {\n    const showingPointLabels = _.uniqBy([...this.state.showingPointLabels, country], \"Country\")\n    this.setState({ showingPointLabels })\n  }\n  onMouseLeavePoint = country => () => {\n    const showingPointLabels = _.reject(this.state.showingPointLabels, {Country: country.Country})\n    this.setState({ showingPointLabels })\n  }\n\n  render() {\n    const { data, xMetric, yMetric, angleOfMostVariance, vectorOfMostVariance } = this.props\n    const { height, width, scales, tooltipInfo, selectedCountries, selectedContinents, filteredData, iteration, showingPointLabels } = this.state\n    const selectedCountryValues = _.map(selectedCountries, \"value\")\n    const meanX = scales.x && scales.x(_.meanBy(data, \"xValue\"))\n    const meanY = scales.y && scales.y(_.meanBy(data, \"yValue\"))\n\n    return (\n      <div className={this.getClassName()}>\n        <div className=\"WDVPScatter__contents\">\n          <div className=\"WDVPScatter__controls\">\n            <div className=\"WDVPScatter__sentence\">\n              Show me countries in\n                {/* <Select\n                  isMulti\n                  name=\"continents\"\n                  options={continentOptions}\n                  value={selectedContinents}\n                  className=\"WDVPScatter__select\"\n                  classNamePrefix=\"WDVPScatter__select\"\n                  styles={selectStyles}\n                  onChange={this.onContinentsSelect}\n                /> */}\n\n                <RadioGroup\n                  className=\"WDVPScatter__toggle\"\n                  options={continents}\n                  value={selectedContinents}\n                  onChange={this.onContinentsSelect}\n                  isMulti\n                  canClear\n                />\n              </div>\n              <div className=\"WDVPScatter__aside\">\n                I'm especially interested in\n                <Select\n                  isMulti\n                  name=\"countries\"\n                  options={countryOptions}\n                  value={selectedCountries}\n                  className=\"WDVPScatter__select\"\n                  classNamePrefix=\"WDVPScatter__select\"\n                  styles={selectStyles}\n                  onChange={this.onCountriesSelect}\n                />\n            </div>\n          </div>\n        </div>\n        <div className=\"WDVPScatter__chart-wrapper\" ref={this.container} style={{\n          // transform: `rotateZ(${angleOfMostVariance}deg)`\n        }}>\n          <Chart\n            height={height}\n            width={width}\n            margin={margin}\n            ref={this.chart}\n          >\n            <Axis\n              dimension=\"x\"\n              height={height}\n              width={width}\n              margin={margin}\n              scale={scales.x}\n              format={formatNumber}\n              label={\"x axis weights\"}\n            />\n            <Axis\n              dimension=\"y\"\n              height={height}\n              margin={margin}\n              scale={scales.y}\n              format={formatNumber}\n              label={\"y axis weights\"}\n            />\n            {_.map(filteredData, country => (\n              <WDVPScatterCountry\n                key={country.Country}\n                name={country.Country}\n                color={continentColors[country.Continent]}\n                x={this.xAccessorScaled(country)}\n                y={this.yAccessorScaled(country)}\n                isSelected={_.includes(selectedCountryValues, country.Country)}\n              />\n            ))}\n\n            {_.map(filteredData, country => (\n              <WDVPScatterCountryHighlight\n                key={country.Country}\n                name={country.Country}\n                color={continentColors[country.Continent]}\n                x={this.xAccessorScaled(country)}\n                y={this.yAccessorScaled(country)}\n                isSelected={_.includes(selectedCountryValues, country.Country)}\n                isShowingLabels={filteredData.length < 55}\n              />\n            ))}\n\n            {tooltipInfo && (\n              <rect\n                className=\"WDVPScatter__crosshair\"\n                x={tooltipInfo.x}\n                y={margin.top}\n                width={1}\n                height={height - margin.top - margin.bottom}\n              />\n            )}\n\n            {_.isFinite(angleOfMostVariance) && _.isFinite(meanX) && (\n              <WDVPScatterLine\n                angle={angleOfMostVariance}\n                meanX={meanX}\n                meanY={meanY}\n                width={width}\n                height={height}\n                margin={margin}\n              />\n            )}\n          </Chart>\n\n          {tooltipInfo && (\n            <WDVPScatterTooltip\n              style={{transform: `translate3d(calc(-50% + ${tooltipInfo.boundedX}px), calc(-100% + ${tooltipInfo.y}px), 0)`}}\n              {...tooltipInfo}\n            />\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default WDVPScatter\n\n\n\nconst WDVPScatterTooltip = ({ continents, year, x, boundedX, y, ...props }) => (\n  <div className=\"WDVPScatterTooltip\" {...props}>\n    <h6 className=\"WDVPScatterTooltip__header\">{ year }</h6>\n    <div className=\"WDVPScatterTooltip__continents\">\n      {_.map(continents, continent => _.isObject(continent) && (\n        <div className={`WDVPScatterTooltip__continent WDVPScatterTooltip__continent--is-${continent.isSelected ? \"selected\" : \"not-selected\"}`} key={continent.continent}>\n          <div className=\"WDVPScatterTooltip__continent-color\" style={{background: continentColors[continent]}} />\n          <div className=\"WDVPScatterTooltip__continent__index\">\n            { continent.index }.\n          </div>\n          <div className=\"WDVPScatterTooltip__continent__label\">\n            { continent.continent }\n          </div>\n          <div className=\"WDVPScatterTooltip__continent__value\">\n            { formatNumber(continent.value) }\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n)\n\nconst WDVPScatterCountry = React.memo(({ color, x, y }) => _.isFinite(x) && _.isFinite(y) && (\n  <circle\n    className=\"WDVPScatterCountry\"\n    cx={x}\n    cy={y}\n    r={5}\n    fill={color}\n  />\n))\n\nconst WDVPScatterCountryHighlight = React.memo(({ name, color, x, y, isSelected, isShowingLabels }) => _.isFinite(x) && _.isFinite(y) && (\n  <g className=\"WDVPScatterCountryHighlight\">\n    <circle\n      className=\"WDVPScatterCountryHighlight__outline\"\n      cx={x}\n      cy={y}\n      r={9}\n      style={{\n        fill: \"transparent\",\n        stroke: isSelected ? \"#114D4D\" : \"transparent\",\n        strokeWidth: 4,\n      }}\n    />\n      <g\n        className=\"WDVPScatterCountryHighlight__text-wrapper\"\n        style={{\n          opacity: isShowingLabels || isSelected ? 1 : 0,\n      }}>\n        <text\n          className=\"WDVPScatterCountryHighlight__text\"\n          x={x}\n          y={y - 13}\n          // fill={color}\n          stroke=\"white\"\n          strokeWidth=\"3\"\n          >\n          { name }\n        </text>\n        <text\n          className=\"WDVPScatterCountryHighlight__text\"\n          x={x}\n          y={y - 13}\n          stroke=\"0\"\n          fill=\"black\"\n          // fill={color}\n        >\n        { name }\n      </text>\n    </g>\n  </g>\n))\n\nconst WDVPScatterLine = ({ angle, meanX, meanY, width, height, margin }) => {\n  const boundedWidth = width - margin.left - margin.right\n  const boundedHeight = height - margin.top - margin.bottom\n  const x1 = meanX + boundedWidth / 2 * Math.cos(angle / 180 * Math.PI)\n  const y1 = meanY - boundedHeight / 2 * Math.sin(angle / 180 * Math.PI)\n  const x2 = meanX - boundedWidth / 2 * Math.cos(angle / 180 * Math.PI)\n  const y2 = meanY + boundedHeight / 2 * Math.sin(angle / 180 * Math.PI)\n  // const arrowWidth = 10\n  // const arrowHeight = 10\n\n  return (\n    <g\n      style={{\n        // transform: `rotate(${-angle}deg)`,\n        // transformOrigin: \"center center\",\n      }}>\n        {/* <rect x=\"0\" y=\"0\" width={boundedWidth} height={boundedHeight} fill=\"none\" stroke=\"green\" /> */}\n        {/* <text\n          x={width - margin.left - margin.right / 2}\n          y={meanY}>Axis of Good</text> */}\n        <line\n          className=\"WDVPScatter__line\"\n          // x1={meanX - ((width) / 2)}\n          // y1={meanY}\n          // x2={meanX + ((width) / 2)}\n          // y2={meanY}\n          // x1={meanX - vectorOfMostVariance[0] * 300}\n          // y1={meanY + vectorOfMostVariance[1] * 300}\n          // x2={meanX + vectorOfMostVariance[0] * 300}\n          // y2={meanY - vectorOfMostVariance[1] * 300}\n          x1={x1}\n          y1={y1}\n          x2={x2}\n          y2={y2}\n          stroke=\"black\"\n        />\n        {/* <path d={\"M \" + [\n          [width - arrowWidth / 2, meanY - arrowHeight / 2].join(\" \"),\n          [width + arrowWidth / 2, meanY + 0].join(\" \"),\n          [width - arrowWidth / 2, meanY + arrowHeight / 2].join(\" \"),\n        ].join(\" L \") + \" Z\"} /> */}\n    </g>\n  )\n}"],"sourceRoot":""}