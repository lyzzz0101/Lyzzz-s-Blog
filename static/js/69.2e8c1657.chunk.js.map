{"version":3,"sources":["components/Articles/HypeCycle2/data.csv","../node_modules/troika-worker-utils/dist/troika-worker-utils.esm.js","../node_modules/troika-three-utils/dist/troika-three-utils.esm.js","../node_modules/troika-three-text/dist/troika-three-text.esm.js","components/Articles/HypeCycle2/HypeCycle.jsx","components/Articles/HypeCycle/OrbitControls.js"],"names":["module","exports","__webpack_require__","p","process","BespokeThenable","value","state","queue","scheduled","completeCalled","resolve","oneTime","val","complete","reject","reason","st","ignoreThrow","thenableObj","recursiveError","valThen","getThenableThen","call","v","scheduleQueueFlush","e","setTimeout","flushQueue","q","forEach","callIt","fn","isFn","then","called","args","len","arguments","length","apply","this","TypeError","onResolve","onReject","nextThenable","push","cb","result","resultThen","err","NativePromiseThenable","promise","Promise","res","rej","bind","d","__webpack_exports__","ThenableWorkerModule","defineWorkerModule","all","items","resultCount","results","out","DefaultThenable","item","i","itemThenable","workerBootstrap","modules","Object","create","rehydrate","name","str","self","troikaDefine","r","url","URL","createObjectURL","Blob","replace","type","importScripts","console","error","revokeObjectURL","addEventListener","ref","data","messageId","action","registerModule","callback","id","dependencies","init","getTransferables","map","dep","isWorkerModule","depResult","Error","noLog","postMessage","success","message","isCallable","ref$1","handleResult","tx","Array","isArray","undefined","callModule","transferables","stack","_supportsWorkers","supported","window","document","Worker","terminate","log","_workerModuleId","_messageId","_allowInitAsString","workers","openRequests","obj","_count","options","workerId","moduleFunc","_getInitResult","initResult","initThenable","deps","defineMainThreadModule","registrationThenable","callWorker","workerModuleData","stringifyFunction","toString","test","thenable","response","count","warn","worker","bootstrap","onmessage","msgId","getWorker","Thenable","voidMainRegExp","expandShaderIncludes","source","match","include","chunk","three_module","troika_three_utils_esm_assign","assign","target","prop","hasOwnProperty","epoch","Date","now","CONSTRUCTOR_CACHE","WeakMap","SHADER_UPGRADE_CACHE","Map","materialInstanceId","createDerivedMaterial","baseMaterial","optionsKey","optionsHash","JSON","stringify","optionsJsonReplacer","optionsHashesToIds","get","set","_idCtr","getKeyForOptions","ctorsByDerivation","privateBeforeCompileProp","concat","onBeforeCompile","shaderInfo","cacheKey","vertexShader","fragmentShader","upgradedShaders","upgraded","_ref","key","vertexDefs","vertexMainIntro","vertexMainOutro","vertexTransform","fragmentDefs","fragmentMainIntro","fragmentMainOutro","fragmentColorTransform","customRewriter","timeUniform","postChunks","join","code","match1","index","fullStr","substr","injectIntoShaderCode","upgradeShaders","uniforms","DerivedMaterial","derive","chained","clone","base","derived","descriptor","defineProperty","uuid","generateUUID","defines","extensions","_listeners","constructor","isDerivedMaterial","customProgramCacheKey","copy","writable","configurable","isShaderMaterial","newBase","getDepthMaterial","depthMaterial","_depthMaterial","depthPacking","IS_DEPTH_MATERIAL","getDistanceMaterial","distanceMaterial","_distanceMaterial","IS_DISTANCE_MATERIAL","dispose","shaderCode","defs","intro","outro","troika_three_utils_esm_geometry","defaultBaseMaterial","color","side","workerModule","troika_worker_utils_esm","Typr","parse","buff","bin","_bin","Uint8Array","readASCII","offset","readUshort","numF","readUint","fnts","foff","_readFont","ooff","readFixed","numTables","tags","_data","_offset","tabs","tag","toffset","t","trim","_tabOffset","tab","o","readF2dot14","readShort","readInt","a","uint8","int32","readInt8","int8","int16","readUshorts","arr","uint32","readUint64","l","s","String","fromCharCode","readUnicode","c","_tdec","readUTF8","tdec","readBytes","readASCIIArray","ArrayBuffer","Int8Array","Int16Array","uint16","Uint16Array","Int32Array","Uint32Array","_lctf","font","subt","offset0","offScriptList","offFeatureList","offLookupList","scriptList","readScriptList","featureList","readFeatureList","lookupList","readLookupList","noff","lut","readLookupTable","ltype","flag","cnt","numOfOnes","n","num","readClassDef","format","startGlyph","glyphCount","getInterval","start","end","readCoverage","cvg","fmt","coverageIndex","indexOf","ind","readFeatureTable","lookupCount","indices","readScriptTable","defLangSysOff","default","readLangSysTable","langSysCount","langSysOff","reqFeature","featureCount","features","CFF","buffer","ninds","readIndex","names","tdinds","topDicts","readDict","topdict","sinds","strings","readSubrs","CharStrings","cstr","ROS","FDArray","fdind","dict","_readFDict","FDSelect","rns","Encoding","readEncoding","charset","readCharset","ss","Private","Subrs","gsubinds","bias","nSubrs","Bias","tableSE","glyphByUnicode","cff","glyphBySE","charcode","array","nCodes","first","nLeft","inds","offsize","getCharString","b0","b1","vs","op","size","readCharString","carr","nibs","b","nib0","nib1","chars","parseFloat","cmap","offs","tables","platformID","encodingID","noffset","tind","parse0","parse4","parse6","parse12","segCountX2","segCount","searchRange","entrySelector","rangeShift","endCount","startCount","idDelta","idRangeOffset","glyphIdArray","firstCode","entryCount","nGroups","groups","off","startCharCode","endCharCode","startGlyphID","glyf","g","maxp","numGlyphs","_parseGlyf","loca","gl","noc","xMin","yMin","xMax","yMax","endPts","instructionLength","instructions","crdnum","flags","rep","j","xs","i8","same","ys","x","y","parts","part","m","ty","p1","p2","glyphIndex","arg1","arg2","numInstr","instr","GPOS","covOff","coverage","valFmt1","ones1","pos","readValueRecord","valFmt2","ones2","pairsets","psc","psoff","pvc","gid2","value1","value2","val1","val2","classDef1","classDef2","class1Count","class2Count","matrix","row","valFmt","GSUB","delta","newg","vals","loff","readLigatureSet","cDefOffset","cDef","scset","subClassSetCount","scsOff","readSubClassSet","cvgs","backCvg","inptCvg","ahedCvg","lookupRec","readSubstLookupRecords","rUs","lset","readSubClassRule","rule","gcount","scount","input","substLookupRecords","readChainSubClassSet","readChainSubClassRule","pps","pi","subst","lcnt","readLigature","lig","chain","nglyph","ccnt","k","head","fontRevision","unitsPerEm","created","modified","macStyle","lowestRecPPEM","fontDirectionHint","indexToLocFormat","glyphDataFormat","hhea","ascender","descender","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","caretOffset","metricDataFormat","numberOfHMetrics","hmtx","aWidth","lsBearing","aw","lsb","kern","version","parseV1","nTables","glyph1","rval","readFormat0","pleft","nPairs","left","right","glyph2","ver","maxPoints","maxContours","maxCompositePoints","maxCompositeContours","maxZones","maxTwilightPoints","maxStorage","maxFunctionDefs","maxInstructionDefs","maxStackElements","maxSizeOfInstructions","maxComponentElements","maxComponentDepth","tname","languageID","nameID","slen","cname","soff","tid","_lang","postScriptName","version0","version1","version2","version5","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","ulUnicodeRange1","ulUnicodeRange2","ulUnicodeRange3","ulUnicodeRange4","achVendID","fsSelection","usFirstCharIndex","usLastCharIndex","sTypoAscender","sTypoDescender","sTypoLineGap","usWinAscent","usWinDescent","ulCodePageRange1","ulCodePageRange2","sxHeight","sCapHeight","usDefault","usBreak","usMaxContext","usLowerOpticalPointSize","usUpperOpticalPointSize","post","italicAngle","underlinePosition","underlineThickness","SVG","entries","svgDocIndexOffset","numEntries","endGlyphID","svgDocOffset","svgDocLength","sbuf","svg","f","toPath","pth","cmds","crds","DOMParser","firstChild","tagName","nextSibling","vb","getAttribute","split","_toPath","children","nds","fill","ni","nd","tn","cfl","toks","_tokens","_toksToPath","ts","rn","cn","cc","charCodeAt","ch","charAt","isNum","ox","oy","pc","M","L","H","V","S","C","cmd","cmu","toUpperCase","ps","reps","_reps","xi","yi","x1","y1","x2","y2","x3","y3","co","Math","max","U","codeToGlyph","p0e4","p3e1","p1e0","p0e3","sind","grp","glyphToPath","gid","path","nStems","haveWidth","width","defaultWidthX","open","pdct","gi","_drawCFF","_drawGlyf","_simpleGlyph","_compoGlyph","i0","il","pr","nx","onCurve","prOnCurve","nxOnCurve","P","moveTo","lineTo","qcurveTo","closePath","prt","_getGlyphClass","cd","intr","getPairAdjustment","g1","g2","gpos","llist","flist","tused","fl","ti","ltab","adj","c1","c2","ind1","ind2","stringToGlyphs","gls","codePointAt","gsub","cligs","fi","ci","feat","_getWPfeature","_applySubs","wsep","R","slft","srgt","rlim","rl","good","em1","cind","cls","scs","sc","inp","cind2","lrs","_glsCovered","lr","tab2","glyphsToPath","clr","tpath","pathToSVG","prec","lmap","Q","toFixed","pathToContext","ctx","bezierCurveTo","quadraticCurveTo","beginPath","fillStyle","curveTo","c1x","c1y","c2x","c2y","c3x","c3y","c4x","c4y","jpx","jpy","shift","nominalWidthX","pop","isX","sval","abs","adx","ady","bchar","achar","aind","subr","count1","alternate","tinyInflate","TINF_OK","TINF_DATA_ERROR","Tree","table","trans","Data","dest","sourceIndex","bitcount","destLen","ltree","dtree","sltree","sdtree","length_bits","length_base","dist_bits","dist_base","clcidx","code_tree","lengths","tinf_build_bits_base","bits","sum","tinf_build_tree","tinf_getbit","bit","tinf_read_bits","tinf_decode_symbol","cur","tinf_decode_trees","lt","dt","hlit","hdist","hclen","clen","sym","prev","tinf_inflate_block_data","dist","tinf_inflate_uncompressed_block","tinf_build_fixed_trees","bfinal","slice","subarray","bufferIn","dataViewIn","DataView","offsetIn","read2","getUint16","read4","getUint32","write2","dataViewOut","setUint16","offsetOut","write4","setUint32","WOFFHeader","signature","flavor","reserved","totalSfntSize","majorVersion","minorVersion","metaOffset","metaLength","metaOrigLength","privOffset","privLength","pow","TableDirectoryEntries","compLength","origLength","origChecksum","arrayOut","reduce","acc","entry","bufferOut","TableDirectoryEntry","outOffset","compressedData","uncompressedData","padding","convert_streams","woff2otf","cmdArgLengths","Z","peek","typrFont","glyphMap","fontObj","forEachGlyph","text","fontSize","letterSpacing","glyphX","fontScale","glyphIndices","charIndex","glyphObj","_Typr$U$glyphToPath","Infinity","advanceWidth","pathCommandCount","forEachPathCommand","argsIndex","argsArray","_i3","_len","numArgs","wrapFontObj","typrFactory","woff2otfFactory","parserFactory","CONFIG","defaultFontURL","sdfGlyphSize","sdfMargin","sdfExponent","textureWidth","tempColor","linkEl","atlases","getTextRenderInfo","troika_three_text_esm_assign","createElement","href","toAbsoluteURL","colorRanges","colors","getHex","freeze","atlasKey","atlas","sdfTexture","processInWorker","newGlyphSDFs","_ref2","textureData","atlasIndex","texImg","image","biggerArray","height","cols","baseStartIndex","floor","srcStartIndex","rowStartIndex","needsUpdate","parameters","glyphBounds","glyphAtlasIndices","glyphColors","caretPositions","caretHeight","chunkedBounds","lineHeight","topBaseline","blockBounds","visibleBounds","timings","totalBounds","totalBlockSize","_result$blockBounds2","slicedToArray","x0","y0","toObj","fromObj","fontProcessorWorkerModule","needsSort","segments","sortSegments","sort","maxX","absSquareDistanceToLineSegment","lineX0","lineY0","lineX1","lineY1","ldx","ldy","lengthSq","min","dx","dy","addLineSegment","segment","minX","minY","maxY","findNearestSignedDistance","closestDistSq","closestDist","seg","distSq","sqrt","inside","intersects","isPointInPoly","createGlyphSegmentsIndex","config","CURVE_POINTS","pointOnQuadraticBezier","t2","pointOnCubicBezier","sdfSize","glyphW","glyphH","fontUnitsMaxSearchDist","fontUnitsMargin","textureMinFontX","textureMinFontY","textureMaxFontX","textureMaxFontY","fontUnitsTextureWidth","fontUnitsTextureHeight","fontUnitsTextureMaxDim","firstX","firstY","prevX","prevY","lineSegmentsIndex","prevPoint","nextPoint","_prevPoint","_i","_nextPoint","sdfX","sdfY","signedDist","alpha","round","renderingBounds","fontParser","sdfGenerator","fontAtlases","fonts","INF","loadFont","fontUrl","pending","tryLoad","onError","request","XMLHttpRequest","responseType","onload","status","statusText","onerror","send","doLoadFont","callbacks","_ref$text","_ref$font","_ref$sdfGlyphSize","_ref$fontSize","_ref$letterSpacing","_ref$lineHeight","_ref$maxWidth","maxWidth","_ref$textAlign","textAlign","_ref$textIndent","textIndent","_ref$whiteSpace","whiteSpace","_ref$overflowWrap","overflowWrap","_ref$anchorX","anchorX","_ref$anchorY","anchorY","_ref$includeCaretPosi","includeCaretPositions","_ref$chunkedBoundsSiz","chunkedBoundsSize","_ref$colorRanges","metricsOnly","mainStart","total","fontLoad","layout","sdf","sdfTotal","glyphs","getSdfAtlas","hasMaxWidth","isFinite","newGlyphs","maxLineWidth","renderableGlyphCount","canWrap","layoutStart","fontSizeMult","halfLeading","caretBottomOffset","lineXOffset","currentLine","TextLine","lines","nextLine","char","glyphWidth","curLineCount","isWhitespace","isEmpty","glyphAt","adjustX","splitAt","isSoftWrapped","fly","line","_line$glyphAt","anchorXOffset","anchorYOffset","parsePercent","Float32Array","lineYOffset","currentColor","renderableGlyphIndex","prevCharIndex","colorCharIndex","lineGlyphCount","lineWidth","_lineXOffset","justifyAdjust","whitespaceCount","_i2","glyphInfo","_charIndex","idx","glyphAtlasInfo","sdfStart","glyphSDFData","bounds","startIdx","xStart","yStart","visX0","visY0","visX1","visY1","rect","chunkRect","pct","NaN","isNaN","performance","prototype","ceil","flyweight","newLine","splice","measure","_result$blockBounds","createSDFGenerator","createFontProcessor","fontProcessor","troika_three_text_esm_GlyphsGeometry","templateGeometries","tempVec3","GlyphsGeometry","_InstancedBufferGeome","inherits","_super","createSuper","_this","classCallCheck","detail","materialIndex","boundingSphere","boundingBox","createClass","updateBufferAttr","_chunkedBounds","setInstanceCount","sphere","center","radius","distanceTo","box","clipRect","chunks","w","z","_this2","_detail","tpl","geom","translate","getTemplateGeometry","attr","attributes","setIndex","getIndex","attrName","newArray","itemSize","setAttribute","_maxInstanceCount","deleteAttribute","attribute","VERTEX_DEFS","VERTEX_TRANSFORM","FRAGMENT_DEFS","FRAGMENT_TRANSFORM","troika_three_text_esm_Text","defaultMaterial","transparent","tempMat4","tempVec3a","tempVec3b","tempArray","origin","defaultOrient","raycastMesh","syncStartEvent","syncCompleteEvent","SYNCABLE_PROPS","COPYABLE_PROPS","Text","_Mesh","_super2","_this3","geometry","material","outlineWidth","outlineColor","depthOffset","orientation","glyphGeometryDetail","debugSDF","_this4","_needsSync","_isSyncing","_queuedSyncs","dispatchEvent","textRenderInfo","_textRenderInfo","updateGlyphs","queued","sync","renderer","scene","camera","group","isTroikaTextMaterial","_prepareForRender","isOutline","isTextOutlineMaterial","textInfo","uTroikaSDFTexture","uTroikaSDFTextureSize","uTroikaSDFGlyphSize","uTroikaSDFExponent","uTroikaTotalBounds","fromArray","uTroikaUseGlyphColors","distanceOffset","uTroikaDistanceOffset","uTroikaClipRect","pad","applyClipRect","uTroikaSDFDebug","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","colorObj","_input","orient","_orientation","rotMat","uTroikaOrient","_match","_match2","hSign","hAxis","vSign","vAxis","lookAt","cross","setFromMatrix4","identity","raycaster","matrixWorld","multiplyMatrices","raycast","object","_this5","getPrototypeOf","derivedMaterial","_derivedMaterial","_baseMaterial","_defaultMaterial","textMaterial","derivatives","_ref4","uDiffuseRE","defineProperties","shadowSide","createTextDerivedMaterial","onDispose","removeEventListener","outlineMaterial","_outlineMtl","depthWrite","privateKey","deprMsgShown","_deprecated_anchor","ordinalColors","categories","fromPairs","slug","label","categoryColors","category","curveDepth","years","range","yearsScale","scaleLinear","domain","HypeCycle","_useState","useState","_useState2","setData","_useState3","_useState4","hoveredDot","setHoveredDot","_useState5","_useState6","showingCategories","setShowingCategories","loadData","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","next","csv","dataUrl","sent","hasHadIndex","pointIndex","year","percent","Number","firstYearIndex","filter","runningIndex","points","_curvePoints$index","curvePoints","newPoint","THREE","absRange","construct","toConsumableArray","time","stop","useEffect","data3d","useMemo","react_default","className","List","HypeCycle_Categories","Wrapper","rel","fov","near","far","position.z","Controls","_useThree","useThree","invalidate","useRef","useFrame","current","update","domElement","vertices","props","objectWithoutProperties","_useState7","_useState8","react_three_fiber_esm","pixelRatio","devicePixelRatio","HypeCycle_Controls","position","intensity","rotation-x","PI","attach","HypeCycle_CurveLine","HypeCycle_Path","isHovered","onHover","onHoverDot","HypeCycle_Curve","extend","OrbitControls","extrudeSettings","steps","depth","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","curveSegments","curve","point","getPointAt","Curve","opacity","Path","_ref3","three","onPointerOver","lineBasicMaterial","CurveLine","position-z","memo","_ref5","_useState9","_useState10","isHovering","setIsHovering","wrapperElement","elem","getElementsByClassName","kebabCase","scrollIntoView","sortedItems","onMouseEnter","onMouseLeave","react_flip_move_es","_ref6","ListItem","forwardRef","_ref7","style","--color","Categories","_ref8","counts","countBy","sortedCategories","includes","onClick","reverse","three__WEBPACK_IMPORTED_MODULE_0__","enabled","minDistance","maxDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MIDDLE","target0","position0","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","saveState","scope","reset","updateProjectionMatrix","changeEvent","STATE","NONE","quat","setFromUnitVectors","up","quatInverse","inverse","lastPosition","lastQuaternion","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","scale","add","panOffset","setFromSpherical","multiplyScalar","zoomChanged","distanceToSquared","EPS","dot","quaternion","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","PAN","TOUCH_ROTATE","TOUCH_DOLLY_PAN","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","angle","rotateUp","panLeft","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","body","isPerspectiveCamera","targetDistance","tan","clientHeight","isOrthographicCamera","clientWidth","top","bottom","dollyIn","dollyScale","dollyOut","handleMouseDownPan","event","clientX","clientY","preventDefault","focus","button","ctrlKey","metaKey","shiftKey","handleMouseDownRotate","handleMouseDownDolly","subVectors","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","touches","pageX","pageY","handleTouchStartRotate","handleTouchStartDollyPan","handleTouchMoveRotate","handleTouchMoveDollyPan","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor"],"mappings":"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","file":"static/js/69.2e8c1657.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"25fd7aa1a88466c6560f386ec0a6a49c.csv\";","/**\n * Lightweight thenable implementation that is entirely self-contained within a single\n * function with no external dependencies so it can be easily shipped across to a WorkerModule.\n *\n * This implementation conforms fully to the Promises/A+ spec so it can safely interoperate\n * with other thenable implementations. https://github.com/promises-aplus/promises-spec\n *\n * *However*, it is _not_ a full implementation of ES2015 Promises, e.g. it does not\n * have the same constructor signature and does not expose a `catch` method or the static\n * `resolve`/`reject`/`all`/`race` initializer methods. If you need to hand a Thenable\n * instance off to consuming code that may expect a true Promise, you'll want to wrap it\n * in a native-or-polyfilled Promise first.\n *\n * (Why yet another Promises/A+ implementation? Great question. We needed a polyfill-like\n * thing that was (a) wrapped in a single function for easy serialization across to a Worker,\n * and (b) was as small as possible -- at ~900B minified (~500B gzipped) this is the smallest\n * implementation I've found. And also, exercises like this are challenging and fun.)\n */\nfunction BespokeThenable() {\n  var state = 0; // 0=pending, 1=fulfilled, -1=rejected\n\n  var queue = [];\n  var value;\n  var scheduled = 0;\n  var completeCalled = 0;\n\n  function then(onResolve, onReject) {\n    var nextThenable = BespokeThenable();\n\n    function handleNext() {\n      var cb = state > 0 ? onResolve : onReject;\n\n      if (isFn(cb)) {\n        try {\n          var result = cb(value);\n\n          if (result === nextThenable) {\n            recursiveError();\n          }\n\n          var resultThen = getThenableThen(result);\n\n          if (resultThen) {\n            resultThen.call(result, nextThenable.resolve, nextThenable.reject);\n          } else {\n            nextThenable.resolve(result);\n          }\n        } catch (err) {\n          nextThenable.reject(err);\n        }\n      } else {\n        nextThenable[state > 0 ? 'resolve' : 'reject'](value);\n      }\n    }\n\n    queue.push(handleNext);\n\n    if (state) {\n      scheduleQueueFlush();\n    }\n\n    return nextThenable;\n  }\n\n  var resolve = oneTime(function (val) {\n    if (!completeCalled) {\n      complete(1, val);\n    }\n  });\n  var reject = oneTime(function (reason) {\n    if (!completeCalled) {\n      complete(-1, reason);\n    }\n  });\n\n  function complete(st, val) {\n    completeCalled++;\n    var ignoreThrow = 0;\n\n    try {\n      if (val === thenableObj) {\n        recursiveError();\n      }\n\n      var valThen = st > 0 && getThenableThen(val);\n\n      if (valThen) {\n        valThen.call(val, oneTime(function (v) {\n          ignoreThrow++;\n          complete(1, v);\n        }), oneTime(function (v) {\n          ignoreThrow++;\n          complete(-1, v);\n        }));\n      } else {\n        state = st;\n        value = val;\n        scheduleQueueFlush();\n      }\n    } catch (e) {\n      if (!state && !ignoreThrow) {\n        complete(-1, e);\n      }\n    }\n  }\n\n  function scheduleQueueFlush() {\n    if (!scheduled) {\n      setTimeout(flushQueue, 0); //TODO setImmediate or postMessage approach if available?\n\n      scheduled = 1;\n    }\n  }\n\n  function flushQueue() {\n    var q = queue;\n    scheduled = 0;\n    queue = [];\n    q.forEach(callIt);\n  }\n\n  function callIt(fn) {\n    fn();\n  }\n\n  function getThenableThen(val) {\n    var valThen = val && (isFn(val) || typeof val === 'object') && val.then;\n    return isFn(valThen) && valThen;\n  }\n\n  function oneTime(fn) {\n    var called = 0;\n    return function () {\n      var args = [],\n          len = arguments.length;\n\n      while (len--) {\n        args[len] = arguments[len];\n      }\n\n      if (!called++) {\n        fn.apply(this, args);\n      }\n    };\n  }\n\n  function recursiveError() {\n    throw new TypeError('Chaining cycle detected');\n  }\n\n  var isFn = function isFn(v) {\n    return typeof v === 'function';\n  };\n\n  var thenableObj = {\n    then: then,\n    resolve: resolve,\n    reject: reject\n  };\n  return thenableObj;\n}\n/**\n * Thenable implementation that uses a native Promise under the covers. This implementation\n * is preferred if Promise is available, for better performance and dev tools integration.\n * @constructor\n */\n\n\nfunction NativePromiseThenable() {\n  var resolve, reject;\n  var promise = new Promise(function (res, rej) {\n    resolve = res;\n    reject = rej;\n  });\n  return {\n    then: promise.then.bind(promise),\n    resolve: resolve,\n    reject: reject\n  };\n}\n/**\n * Promise.all() impl:\n */\n\n\nBespokeThenable.all = NativePromiseThenable.all = function (items) {\n  var resultCount = 0;\n  var results = [];\n  var out = DefaultThenable();\n\n  if (items.length === 0) {\n    out.resolve([]);\n  } else {\n    items.forEach(function (item, i) {\n      var itemThenable = DefaultThenable();\n      itemThenable.resolve(item);\n      itemThenable.then(function (res) {\n        resultCount++;\n        results[i] = res;\n\n        if (resultCount === items.length) {\n          out.resolve(results);\n        }\n      }, out.reject);\n    });\n  }\n\n  return out;\n};\n/**\n * Choose the best Thenable implementation and export it as the default.\n */\n\n\nvar DefaultThenable = typeof Promise === 'function' ? NativePromiseThenable : BespokeThenable;\n/**\n * Main content for the worker that handles the loading and execution of\n * modules within it.\n */\n\nfunction workerBootstrap() {\n  var modules = Object.create(null); // Handle messages for registering a module\n\n  function registerModule(ref, callback) {\n    var id = ref.id;\n    var name = ref.name;\n    var dependencies = ref.dependencies;\n    if (dependencies === void 0) dependencies = [];\n    var init = ref.init;\n    if (init === void 0) init = function init() {};\n    var getTransferables = ref.getTransferables;\n    if (getTransferables === void 0) getTransferables = null; // Only register once\n\n    if (modules[id]) {\n      return;\n    }\n\n    try {\n      // If any dependencies are modules, ensure they're registered and grab their value\n      dependencies = dependencies.map(function (dep) {\n        if (dep && dep.isWorkerModule) {\n          registerModule(dep, function (depResult) {\n            if (depResult instanceof Error) {\n              throw depResult;\n            }\n          });\n          dep = modules[dep.id].value;\n        }\n\n        return dep;\n      }); // Rehydrate functions\n\n      init = rehydrate(\"<\" + name + \">.init\", init);\n\n      if (getTransferables) {\n        getTransferables = rehydrate(\"<\" + name + \">.getTransferables\", getTransferables);\n      } // Initialize the module and store its value\n\n\n      var value = null;\n\n      if (typeof init === 'function') {\n        value = init.apply(void 0, dependencies);\n      } else {\n        console.error('worker module init function failed to rehydrate');\n      }\n\n      modules[id] = {\n        id: id,\n        value: value,\n        getTransferables: getTransferables\n      };\n      callback(value);\n    } catch (err) {\n      if (!(err && err.noLog)) {\n        console.error(err);\n      }\n\n      callback(err);\n    }\n  } // Handle messages for calling a registered module's result function\n\n\n  function callModule(ref, callback) {\n    var ref$1;\n    var id = ref.id;\n    var args = ref.args;\n\n    if (!modules[id] || typeof modules[id].value !== 'function') {\n      callback(new Error(\"Worker module \" + id + \": not found or its 'init' did not return a function\"));\n    }\n\n    try {\n      var result = (ref$1 = modules[id]).value.apply(ref$1, args);\n\n      if (result && typeof result.then === 'function') {\n        result.then(handleResult, function (rej) {\n          return callback(rej instanceof Error ? rej : new Error('' + rej));\n        });\n      } else {\n        handleResult(result);\n      }\n    } catch (err) {\n      callback(err);\n    }\n\n    function handleResult(result) {\n      try {\n        var tx = modules[id].getTransferables && modules[id].getTransferables(result);\n\n        if (!tx || !Array.isArray(tx) || !tx.length) {\n          tx = undefined; //postMessage is very picky about not passing null or empty transferables\n        }\n\n        callback(result, tx);\n      } catch (err) {\n        console.error(err);\n        callback(err);\n      }\n    }\n  }\n\n  function rehydrate(name, str) {\n    var result = void 0;\n\n    self.troikaDefine = function (r) {\n      return result = r;\n    };\n\n    var url = URL.createObjectURL(new Blob([\"/** \" + name.replace(/\\*/g, '') + \" **/\\n\\ntroikaDefine(\\n\" + str + \"\\n)\"], {\n      type: 'application/javascript'\n    }));\n\n    try {\n      importScripts(url);\n    } catch (err) {\n      console.error(err);\n    }\n\n    URL.revokeObjectURL(url);\n    delete self.troikaDefine;\n    return result;\n  } // Handler for all messages within the worker\n\n\n  self.addEventListener('message', function (e) {\n    var ref = e.data;\n    var messageId = ref.messageId;\n    var action = ref.action;\n    var data = ref.data;\n\n    try {\n      // Module registration\n      if (action === 'registerModule') {\n        registerModule(data, function (result) {\n          if (result instanceof Error) {\n            postMessage({\n              messageId: messageId,\n              success: false,\n              error: result.message\n            });\n          } else {\n            postMessage({\n              messageId: messageId,\n              success: true,\n              result: {\n                isCallable: typeof result === 'function'\n              }\n            });\n          }\n        });\n      } // Invocation\n\n\n      if (action === 'callModule') {\n        callModule(data, function (result, transferables) {\n          if (result instanceof Error) {\n            postMessage({\n              messageId: messageId,\n              success: false,\n              error: result.message\n            });\n          } else {\n            postMessage({\n              messageId: messageId,\n              success: true,\n              result: result\n            }, transferables || undefined);\n          }\n        });\n      }\n    } catch (err) {\n      postMessage({\n        messageId: messageId,\n        success: false,\n        error: err.stack\n      });\n    }\n  });\n}\n/**\n * Fallback for `defineWorkerModule` that behaves identically but runs in the main\n * thread, for when the execution environment doesn't support web workers or they\n * are disallowed due to e.g. CSP security restrictions.\n */\n\n\nfunction defineMainThreadModule(options) {\n  var moduleFunc = function moduleFunc() {\n    var args = [],\n        len = arguments.length;\n\n    while (len--) {\n      args[len] = arguments[len];\n    }\n\n    return moduleFunc._getInitResult().then(function (initResult) {\n      if (typeof initResult === 'function') {\n        return initResult.apply(void 0, args);\n      } else {\n        throw new Error('Worker module function was called but `init` did not return a callable function');\n      }\n    });\n  };\n\n  moduleFunc._getInitResult = function () {\n    // We can ignore getTransferables in main thread. TODO workerId?\n    var dependencies = options.dependencies;\n    var init = options.init; // Resolve dependencies\n\n    dependencies = Array.isArray(dependencies) ? dependencies.map(function (dep) {\n      return dep && dep._getInitResult ? dep._getInitResult() : dep;\n    }) : []; // Invoke init with the resolved dependencies\n\n    var initThenable = DefaultThenable.all(dependencies).then(function (deps) {\n      return init.apply(null, deps);\n    }); // Cache the resolved promise for subsequent calls\n\n    moduleFunc._getInitResult = function () {\n      return initThenable;\n    };\n\n    return initThenable;\n  };\n\n  return moduleFunc;\n}\n\nvar _supportsWorkers = function supportsWorkers() {\n  var supported = false; // Only attempt worker initialization in browsers; elsewhere it would just be\n  // noise e.g. loading into a Node environment for SSR.\n\n  if (typeof window !== 'undefined' && typeof window.document !== 'undefined') {\n    try {\n      // TODO additional checks for things like importScripts within the worker?\n      //  Would need to be an async check.\n      var worker = new Worker(URL.createObjectURL(new Blob([''], {\n        type: 'application/javascript'\n      })));\n      worker.terminate();\n      supported = true;\n    } catch (err) {\n      if (typeof process !== 'undefined' && process.env.NODE_ENV === 'test') ;else {\n        console.log(\"Troika createWorkerModule: web workers not allowed; falling back to main thread execution. Cause: [\" + err.message + \"]\");\n      }\n    }\n  } // Cached result\n\n\n  _supportsWorkers = function supportsWorkers() {\n    return supported;\n  };\n\n  return supported;\n};\n\nvar _workerModuleId = 0;\nvar _messageId = 0;\nvar _allowInitAsString = false;\nvar workers = Object.create(null);\n\nvar openRequests = /*#__PURE__*/function () {\n  var obj = Object.create(null);\n  obj._count = 0;\n  return obj;\n}();\n/**\n * Define a module of code that will be executed with a web worker. This provides a simple\n * interface for moving chunks of logic off the main thread, and managing their dependencies\n * among one another.\n *\n * @param {object} options\n * @param {function} options.init - The main function that initializes the module. This will be run\n *        within the worker, and will be passed the resolved dependencies as arguments. Its\n *        return value becomes the module's content, which can then be used by other modules\n *        that depend on it. This function can perform any logic using those dependencies, but\n *        must not depend on anything from its parent closures.\n * @param {array} [options.dependencies] - Provides any dependencies required by the init function:\n *        - Primitives like strings, numbers, booleans\n *        - Raw functions; these will be stringified and rehydrated within the worker so they\n *          must not depend on anything from their parent closures\n *        - Other worker modules; these will be resolved within the worker, and therefore modules\n *          that provide functions can be called without having to cross the worker/main thread\n *          boundary.\n * @param {function} [options.getTransferables] - An optional function that will be run in the worker\n *        just before posting the response value from a module call back to the main thread.\n *        It will be passed that response value, and if it returns an array then that will be\n *        used as the \"transferables\" parameter to `postMessage`. Use this if there are values\n *        in the response that can/should be transfered rather than cloned.\n * @param {string} [options.name] - A descriptive name for this module; this can be useful for\n *        debugging but is not currently used for anything else.\n * @param {string} [options.workerId] - By default all modules will run in the same dedicated worker,\n *        but if you want to use multiple workers you can pass a `workerId` to indicate a specific\n *        worker to spawn. Note that each worker is completely standalone and no data or state will\n *        be shared between them. If a worker module is used as a dependency by worker modules\n *        using different `workerId`s, then that dependency will be re-registered in each worker.\n * @return {function(...[*]): {then}}\n */\n\n\nfunction defineWorkerModule(options) {\n  if ((!options || typeof options.init !== 'function') && !_allowInitAsString) {\n    throw new Error('requires `options.init` function');\n  }\n\n  var dependencies = options.dependencies;\n  var init = options.init;\n  var getTransferables = options.getTransferables;\n  var workerId = options.workerId;\n\n  if (!_supportsWorkers()) {\n    return defineMainThreadModule(options);\n  }\n\n  if (workerId == null) {\n    workerId = '#default';\n  }\n\n  var id = \"workerModule\" + ++_workerModuleId;\n  var name = options.name || id;\n  var registrationThenable = null;\n  dependencies = dependencies && dependencies.map(function (dep) {\n    // Wrap raw functions as worker modules with no dependencies\n    if (typeof dep === 'function' && !dep.workerModuleData) {\n      _allowInitAsString = true;\n      dep = defineWorkerModule({\n        workerId: workerId,\n        name: \"<\" + name + \"> function dependency: \" + dep.name,\n        init: \"function(){return (\\n\" + stringifyFunction(dep) + \"\\n)}\"\n      });\n      _allowInitAsString = false;\n    } // Grab postable data for worker modules\n\n\n    if (dep && dep.workerModuleData) {\n      dep = dep.workerModuleData;\n    }\n\n    return dep;\n  });\n\n  function moduleFunc() {\n    var args = [],\n        len = arguments.length;\n\n    while (len--) {\n      args[len] = arguments[len];\n    } // Register this module if needed\n\n\n    if (!registrationThenable) {\n      registrationThenable = callWorker(workerId, 'registerModule', moduleFunc.workerModuleData);\n    } // Invoke the module, returning a thenable\n\n\n    return registrationThenable.then(function (ref) {\n      var isCallable = ref.isCallable;\n\n      if (isCallable) {\n        return callWorker(workerId, 'callModule', {\n          id: id,\n          args: args\n        });\n      } else {\n        throw new Error('Worker module function was called but `init` did not return a callable function');\n      }\n    });\n  }\n\n  moduleFunc.workerModuleData = {\n    isWorkerModule: true,\n    id: id,\n    name: name,\n    dependencies: dependencies,\n    init: stringifyFunction(init),\n    getTransferables: getTransferables && stringifyFunction(getTransferables)\n  };\n  return moduleFunc;\n}\n/**\n * Stringifies a function into a form that can be deserialized in the worker\n * @param fn\n */\n\n\nfunction stringifyFunction(fn) {\n  var str = fn.toString(); // If it was defined in object method/property format, it needs to be modified\n\n  if (!/^function/.test(str) && /^\\w+\\s*\\(/.test(str)) {\n    str = 'function ' + str;\n  }\n\n  return str;\n}\n\nfunction getWorker(workerId) {\n  var worker = workers[workerId];\n\n  if (!worker) {\n    // Bootstrap the worker's content\n    var bootstrap = stringifyFunction(workerBootstrap); // Create the worker from the bootstrap function content\n\n    worker = workers[workerId] = new Worker(URL.createObjectURL(new Blob([\"/** Worker Module Bootstrap: \" + workerId.replace(/\\*/g, '') + \" **/\\n\\n;(\" + bootstrap + \")()\"], {\n      type: 'application/javascript'\n    }))); // Single handler for response messages from the worker\n\n    worker.onmessage = function (e) {\n      var response = e.data;\n      var msgId = response.messageId;\n      var callback = openRequests[msgId];\n\n      if (!callback) {\n        throw new Error('WorkerModule response with empty or unknown messageId');\n      }\n\n      delete openRequests[msgId];\n      openRequests.count--;\n      callback(response);\n    };\n  }\n\n  return worker;\n} // Issue a call to the worker with a callback to handle the response\n\n\nfunction callWorker(workerId, action, data) {\n  var thenable = DefaultThenable();\n  var messageId = ++_messageId;\n\n  openRequests[messageId] = function (response) {\n    if (response.success) {\n      thenable.resolve(response.result);\n    } else {\n      thenable.reject(new Error(\"Error in worker \" + action + \" call: \" + response.error));\n    }\n  };\n\n  openRequests._count++;\n\n  if (openRequests.count > 1000) {\n    //detect leaks\n    console.warn('Large number of open WorkerModule requests, some may not be returning');\n  }\n\n  getWorker(workerId).postMessage({\n    messageId: messageId,\n    action: action,\n    data: data\n  });\n  return thenable;\n}\n/**\n * Just the {@link Thenable} function wrapped as a worker module. If another worker\n * module needs Thenable as a dependency, it's better to pass this module rather than\n * the raw function in its `dependencies` array so it only gets registered once.\n */\n\n\nvar ThenableWorkerModule = /*#__PURE__*/defineWorkerModule({\n  name: 'Thenable',\n  dependencies: [DefaultThenable],\n  init: function init(Thenable) {\n    return Thenable;\n  }\n});\nexport { DefaultThenable as Thenable, ThenableWorkerModule, defineWorkerModule, stringifyFunction };","import _inherits from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ShaderChunk, MathUtils, UniformsUtils, MeshDepthMaterial, RGBADepthPacking, MeshDistanceMaterial, ShaderLib, DataTexture, Vector3, Mesh, CylinderBufferGeometry, Vector2, MeshStandardMaterial, DoubleSide } from 'three';\n/**\r\n * Regular expression for matching the `void main() {` opener line in GLSL.\r\n * @type {RegExp}\r\n */\n\nvar voidMainRegExp = /\\bvoid\\s+main\\s*\\(\\s*\\)\\s*{/g;\n/**\r\n * Recursively expands all `#include <xyz>` statements within string of shader code.\r\n * Copied from three's WebGLProgram#parseIncludes for external use.\r\n *\r\n * @param {string} source - The GLSL source code to evaluate\r\n * @return {string} The GLSL code with all includes expanded\r\n */\n\nfunction expandShaderIncludes(source) {\n  var pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n  function replace(match, include) {\n    var chunk = ShaderChunk[include];\n    return chunk ? expandShaderIncludes(chunk) : match;\n  }\n\n  return source.replace(pattern, replace);\n} // Local assign polyfill to avoid importing troika-core\n\n\nvar assign = Object.assign || function ()\n/*target, ...sources*/\n{\n  var target = arguments[0];\n\n  for (var i = 1, len = arguments.length; i < len; i++) {\n    var source = arguments[i];\n\n    if (source) {\n      for (var prop in source) {\n        if (source.hasOwnProperty(prop)) {\n          target[prop] = source[prop];\n        }\n      }\n    }\n  }\n\n  return target;\n};\n\nvar epoch = Date.now();\nvar CONSTRUCTOR_CACHE = new WeakMap();\nvar SHADER_UPGRADE_CACHE = new Map(); // Material ids must be integers, but we can't access the increment from Three's `Material` module,\n// so let's choose a sufficiently large starting value that should theoretically never collide.\n\nvar materialInstanceId = 1e10;\n/**\r\n * A utility for creating a custom shader material derived from another material's\r\n * shaders. This allows you to inject custom shader logic and transforms into the\r\n * builtin ThreeJS materials without having to recreate them from scratch.\r\n *\r\n * @param {THREE.Material} baseMaterial - the original material to derive from\r\n *\r\n * @param {Object} options - How the base material should be modified.\r\n * @param {Object} options.defines - Custom `defines` for the material\r\n * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`\r\n * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can\r\n *        be accessed and manipulated via the resulting material's `uniforms` property, just like\r\n *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.\r\n * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into\r\n *        both shaders, and it will automatically be updated on each render frame with a number of\r\n *        elapsed milliseconds. The \"zero\" epoch time is not significant so don't rely on this as a\r\n *        true calendar time.\r\n * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level\r\n *        definitions, above the `void main()` function.\r\n * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex\r\n *        shader's `void main` function.\r\n * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex\r\n *        shader's `void main` function.\r\n * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,\r\n *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with\r\n *        those attributes exposed by their normal names as read/write values.\r\n * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level\r\n *        definitions, above the `void main()` function.\r\n * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment\r\n *        shader's `void main` function.\r\n * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment\r\n *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes\r\n *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you\r\n *        want those to apply to your changes use `fragmentColorTransform` instead.\r\n * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`\r\n *        output value. Will be injected near the end of the `void main` function, but before any\r\n *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the\r\n *        `fragmentMainOutro`.\r\n * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function\r\n *        for performing custom rewrites of the full shader code. Useful if you need to do something\r\n *        special that's not covered by the other builtin options. This function will be executed before\r\n *        any other transforms are applied.\r\n * @param {boolean} options.chained - Set to `true` to prototype-chain the derived material to the base\r\n *        material, rather than the default behavior of copying it. This allows the derived material to\r\n *        automatically pick up changes made to the base material and its properties. This can be useful\r\n *        where the derived material is hidden from the user as an implementation detail, allowing them\r\n *        to work with the original material like normal. But it can result in unexpected behavior if not\r\n *        handled carefully.\r\n *\r\n * @return {THREE.Material}\r\n *\r\n * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,\r\n * which can be called to get a variant of the derived material for use in shadow casting. If the\r\n * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`\r\n * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to\r\n * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These\r\n * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look\r\n * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance\r\n * scenarios, e.g. skipping antialiasing or expensive shader logic.\r\n */\n\nfunction createDerivedMaterial(baseMaterial, options) {\n  // Generate a key that is unique to the content of these `options`. We'll use this\n  // throughout for caching and for generating the upgraded shader code. This increases\n  // the likelihood that the resulting shaders will line up across multiple calls so\n  // their GL programs can be shared and cached.\n  var optionsKey = getKeyForOptions(options); // First check to see if we've already derived from this baseMaterial using this\n  // unique set of options, and if so reuse the constructor to avoid some allocations.\n\n  var ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);\n\n  if (!ctorsByDerivation) {\n    CONSTRUCTOR_CACHE.set(baseMaterial, ctorsByDerivation = Object.create(null));\n  }\n\n  if (ctorsByDerivation[optionsKey]) {\n    return new ctorsByDerivation[optionsKey]();\n  }\n\n  var privateBeforeCompileProp = \"_onBeforeCompile\".concat(optionsKey); // Private onBeforeCompile handler that injects the modified shaders and uniforms when\n  // the renderer switches to this material's program\n\n  var onBeforeCompile = function onBeforeCompile(shaderInfo) {\n    baseMaterial.onBeforeCompile.call(this, shaderInfo); // Upgrade the shaders, caching the result by incoming source code\n\n    var cacheKey = optionsKey + '|||' + shaderInfo.vertexShader + '|||' + shaderInfo.fragmentShader;\n    var upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];\n\n    if (!upgradedShaders) {\n      var upgraded = upgradeShaders(shaderInfo, options, optionsKey);\n      upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;\n    } // Inject upgraded shaders and uniforms into the program\n\n\n    shaderInfo.vertexShader = upgradedShaders.vertexShader;\n    shaderInfo.fragmentShader = upgradedShaders.fragmentShader;\n    assign(shaderInfo.uniforms, this.uniforms); // Inject auto-updating time uniform if requested\n\n    if (options.timeUniform) {\n      shaderInfo.uniforms[options.timeUniform] = {\n        get value() {\n          return Date.now() - epoch;\n        }\n\n      };\n    } // Users can still add their own handlers on top of ours\n\n\n    if (this[privateBeforeCompileProp]) {\n      this[privateBeforeCompileProp](shaderInfo);\n    }\n  };\n\n  var DerivedMaterial = function DerivedMaterial() {\n    return derive(options.chained ? baseMaterial : baseMaterial.clone());\n  };\n\n  var derive = function derive(base) {\n    // Prototype chain to the base material\n    var derived = Object.create(base, descriptor); // Store the baseMaterial for reference; this is always the original even when cloning\n\n    Object.defineProperty(derived, 'baseMaterial', {\n      value: baseMaterial\n    }); // Needs its own ids\n\n    Object.defineProperty(derived, 'id', {\n      value: materialInstanceId++\n    });\n    derived.uuid = MathUtils.generateUUID(); // Merge uniforms, defines, and extensions\n\n    derived.uniforms = assign({}, base.uniforms, options.uniforms);\n    derived.defines = assign({}, base.defines, options.defines);\n    derived.defines[\"TROIKA_DERIVED_MATERIAL_\".concat(optionsKey)] = ''; //force a program change from the base material\n\n    derived.extensions = assign({}, base.extensions, options.extensions); // Don't inherit EventDispatcher listeners\n\n    derived._listeners = undefined;\n    return derived;\n  };\n\n  var descriptor = {\n    constructor: {\n      value: DerivedMaterial\n    },\n    isDerivedMaterial: {\n      value: true\n    },\n    customProgramCacheKey: {\n      value: function value() {\n        return optionsKey;\n      }\n    },\n    onBeforeCompile: {\n      get: function get() {\n        return onBeforeCompile;\n      },\n      set: function set(fn) {\n        this[privateBeforeCompileProp] = fn;\n      }\n    },\n    copy: {\n      writable: true,\n      configurable: true,\n      value: function value(source) {\n        baseMaterial.copy.call(this, source);\n\n        if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {\n          assign(this.extensions, source.extensions);\n          assign(this.defines, source.defines);\n          assign(this.uniforms, UniformsUtils.clone(source.uniforms));\n        }\n\n        return this;\n      }\n    },\n    clone: {\n      writable: true,\n      configurable: true,\n      value: function value() {\n        var newBase = new baseMaterial.constructor();\n        return derive(newBase).copy(this);\n      }\n    },\n\n    /**\r\n     * Utility to get a MeshDepthMaterial that will honor this derived material's vertex\r\n     * transformations and discarded fragments.\r\n     */\n    getDepthMaterial: {\n      writable: true,\n      configurable: true,\n      value: function value() {\n        var depthMaterial = this._depthMaterial;\n\n        if (!depthMaterial) {\n          depthMaterial = this._depthMaterial = createDerivedMaterial(baseMaterial.isDerivedMaterial ? baseMaterial.getDepthMaterial() : new MeshDepthMaterial({\n            depthPacking: RGBADepthPacking\n          }), options);\n          depthMaterial.defines.IS_DEPTH_MATERIAL = '';\n          depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n\n        return depthMaterial;\n      }\n    },\n\n    /**\r\n     * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex\r\n     * transformations and discarded fragments.\r\n     */\n    getDistanceMaterial: {\n      writable: true,\n      configurable: true,\n      value: function value() {\n        var distanceMaterial = this._distanceMaterial;\n\n        if (!distanceMaterial) {\n          distanceMaterial = this._distanceMaterial = createDerivedMaterial(baseMaterial.isDerivedMaterial ? baseMaterial.getDistanceMaterial() : new MeshDistanceMaterial(), options);\n          distanceMaterial.defines.IS_DISTANCE_MATERIAL = '';\n          distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n\n        return distanceMaterial;\n      }\n    },\n    dispose: {\n      writable: true,\n      configurable: true,\n      value: function value() {\n        var _depthMaterial = this._depthMaterial,\n            _distanceMaterial = this._distanceMaterial;\n        if (_depthMaterial) _depthMaterial.dispose();\n        if (_distanceMaterial) _distanceMaterial.dispose();\n        baseMaterial.dispose.call(this);\n      }\n    }\n  };\n  ctorsByDerivation[optionsKey] = DerivedMaterial;\n  return new DerivedMaterial();\n}\n\nfunction upgradeShaders(_ref, options, key) {\n  var vertexShader = _ref.vertexShader,\n      fragmentShader = _ref.fragmentShader;\n  var vertexDefs = options.vertexDefs,\n      vertexMainIntro = options.vertexMainIntro,\n      vertexMainOutro = options.vertexMainOutro,\n      vertexTransform = options.vertexTransform,\n      fragmentDefs = options.fragmentDefs,\n      fragmentMainIntro = options.fragmentMainIntro,\n      fragmentMainOutro = options.fragmentMainOutro,\n      fragmentColorTransform = options.fragmentColorTransform,\n      customRewriter = options.customRewriter,\n      timeUniform = options.timeUniform;\n  vertexDefs = vertexDefs || '';\n  vertexMainIntro = vertexMainIntro || '';\n  vertexMainOutro = vertexMainOutro || '';\n  fragmentDefs = fragmentDefs || '';\n  fragmentMainIntro = fragmentMainIntro || '';\n  fragmentMainOutro = fragmentMainOutro || ''; // Expand includes if needed\n\n  if (vertexTransform || customRewriter) {\n    vertexShader = expandShaderIncludes(vertexShader);\n  }\n\n  if (fragmentColorTransform || customRewriter) {\n    // We need to be able to find postprocessing chunks after include expansion in order to\n    // put them after the fragmentColorTransform, so mark them with comments first. Even if\n    // this particular derivation doesn't have a fragmentColorTransform, other derivations may,\n    // so we still mark them.\n    fragmentShader = fragmentShader.replace(/^[ \\t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm, '\\n//!BEGIN_POST_CHUNK $1\\n$&\\n//!END_POST_CHUNK\\n');\n    fragmentShader = expandShaderIncludes(fragmentShader);\n  } // Apply custom rewriter function\n\n\n  if (customRewriter) {\n    var res = customRewriter({\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader\n    });\n    vertexShader = res.vertexShader;\n    fragmentShader = res.fragmentShader;\n  } // The fragmentColorTransform needs to go before any postprocessing chunks, so extract\n  // those and re-insert them into the outro in the correct place:\n\n\n  if (fragmentColorTransform) {\n    var postChunks = [];\n    fragmentShader = fragmentShader.replace(/^\\/\\/!BEGIN_POST_CHUNK[^]+?^\\/\\/!END_POST_CHUNK/gm, // [^]+? = non-greedy match of any chars including newlines\n    function (match) {\n      postChunks.push(match);\n      return '';\n    });\n    fragmentMainOutro = \"\".concat(fragmentColorTransform, \"\\n\").concat(postChunks.join('\\n'), \"\\n\").concat(fragmentMainOutro);\n  } // Inject auto-updating time uniform if requested\n\n\n  if (timeUniform) {\n    var code = \"\\nuniform float \".concat(timeUniform, \";\\n\");\n    vertexDefs = code + vertexDefs;\n    fragmentDefs = code + fragmentDefs;\n  } // Inject a function for the vertexTransform and rename all usages of position/normal/uv\n\n\n  if (vertexTransform) {\n    vertexDefs = \"\".concat(vertexDefs, \"\\nvec3 troika_position_\").concat(key, \";\\nvec3 troika_normal_\").concat(key, \";\\nvec2 troika_uv_\").concat(key, \";\\nvoid troikaVertexTransform\").concat(key, \"(inout vec3 position, inout vec3 normal, inout vec2 uv) {\\n  \").concat(vertexTransform, \"\\n}\\n\");\n    vertexMainIntro = \"\\ntroika_position_\".concat(key, \" = vec3(position);\\ntroika_normal_\").concat(key, \" = vec3(normal);\\ntroika_uv_\").concat(key, \" = vec2(uv);\\ntroikaVertexTransform\").concat(key, \"(troika_position_\").concat(key, \", troika_normal_\").concat(key, \", troika_uv_\").concat(key, \");\\n\").concat(vertexMainIntro, \"\\n\");\n    vertexShader = vertexShader.replace(/\\b(position|normal|uv)\\b/g, function (match, match1, index, fullStr) {\n      return /\\battribute\\s+vec[23]\\s+$/.test(fullStr.substr(0, index)) ? match1 : \"troika_\".concat(match1, \"_\").concat(key);\n    });\n  } // Inject defs and intro/outro snippets\n\n\n  vertexShader = injectIntoShaderCode(vertexShader, key, vertexDefs, vertexMainIntro, vertexMainOutro);\n  fragmentShader = injectIntoShaderCode(fragmentShader, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);\n  return {\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader\n  };\n}\n\nfunction injectIntoShaderCode(shaderCode, id, defs, intro, outro) {\n  if (intro || outro || defs) {\n    shaderCode = shaderCode.replace(voidMainRegExp, \"\\n\".concat(defs, \"\\nvoid troikaOrigMain\").concat(id, \"() {\"));\n    shaderCode += \"\\nvoid main() {\\n  \".concat(intro, \"\\n  troikaOrigMain\").concat(id, \"();\\n  \").concat(outro, \"\\n}\");\n  }\n\n  return shaderCode;\n}\n\nfunction optionsJsonReplacer(key, value) {\n  return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value;\n}\n\nvar _idCtr = 0;\nvar optionsHashesToIds = new Map();\n\nfunction getKeyForOptions(options) {\n  var optionsHash = JSON.stringify(options, optionsJsonReplacer);\n  var id = optionsHashesToIds.get(optionsHash);\n\n  if (id == null) {\n    optionsHashesToIds.set(optionsHash, id = ++_idCtr);\n  }\n\n  return id;\n} // Copied from threejs WebGLPrograms.js so we can resolve builtin materials to their shaders\n// TODO how can we keep this from getting stale?\n\n\nvar MATERIAL_TYPES_TO_SHADERS = {\n  MeshDepthMaterial: 'depth',\n  MeshDistanceMaterial: 'distanceRGBA',\n  MeshNormalMaterial: 'normal',\n  MeshBasicMaterial: 'basic',\n  MeshLambertMaterial: 'lambert',\n  MeshPhongMaterial: 'phong',\n  MeshToonMaterial: 'phong',\n  MeshStandardMaterial: 'physical',\n  MeshPhysicalMaterial: 'physical',\n  MeshMatcapMaterial: 'matcap',\n  LineBasicMaterial: 'basic',\n  LineDashedMaterial: 'dashed',\n  PointsMaterial: 'points',\n  ShadowMaterial: 'shadow',\n  SpriteMaterial: 'sprite'\n};\n/**\r\n * Given a Three.js `Material` instance, find the shaders/uniforms that will be\r\n * used to render that material.\r\n *\r\n * @param material - the Material instance\r\n * @return {object} - the material's shader info: `{uniforms:{}, fragmentShader:'', vertexShader:''}`\r\n */\n\nfunction getShadersForMaterial(material) {\n  var builtinType = MATERIAL_TYPES_TO_SHADERS[material.type];\n  return builtinType ? ShaderLib[builtinType] : material; //TODO fallback for unknown type?\n}\n/**\r\n * Find all uniforms and their types within a shader code string.\r\n *\r\n * @param {string} shader - The shader code to parse\r\n * @return {object} mapping of uniform names to their glsl type\r\n */\n\n\nfunction getShaderUniformTypes(shader) {\n  var uniformRE = /\\buniform\\s+(int|float|vec[234])\\s+([A-Za-z_][\\w]*)/g;\n  var uniforms = Object.create(null);\n  var match;\n\n  while ((match = uniformRE.exec(shader)) !== null) {\n    uniforms[match[2]] = match[1];\n  }\n\n  return uniforms;\n}\n/**\r\n * @class ShaderFloatArray\r\n *\r\n * When writing a custom WebGL shader, sometimes you need to pass it an array of floating\r\n * point numbers that it can read from. Unfortunately this is very difficult to do in WebGL,\r\n * because:\r\n *\r\n *   - GLSL \"array\" uniforms can only be of a constant length.\r\n *   - Textures can only hold floating point numbers in WebGL1 if the `OES_texture_float`\r\n *     extension is available.\r\n *\r\n * ShaderFloatArray is an array-like abstraction that encodes its floating point data into\r\n * an RGBA texture's four Uint8 components, and provides the corresponding ThreeJS uniforms\r\n * and GLSL code for you to put in your custom shader to query the float values by array index.\r\n *\r\n * This should generally only be used within a fragment shader, as some environments (e.g. iOS)\r\n * only allow texture lookups in fragment shaders.\r\n *\r\n * TODO:\r\n *   - Fix texture to fill both dimensions so we don't easily hit max texture size limits\r\n *   - Use a float texture if the extension is available so we can skip the encoding process\r\n */\n\n\nvar ShaderFloatArray = /*#__PURE__*/function () {\n  function ShaderFloatArray(name) {\n    _classCallCheck(this, ShaderFloatArray);\n\n    this.name = name;\n    this.textureUniform = \"dataTex_\".concat(name);\n    this.textureSizeUniform = \"dataTexSize_\".concat(name);\n    this.multiplierUniform = \"dataMultiplier_\".concat(name);\n    /**\r\n     * @property dataSizeUniform - the name of the GLSL uniform that will hold the\r\n     * length of the data array.\r\n     * @type {string}\r\n     */\n\n    this.dataSizeUniform = \"dataSize_\".concat(name);\n    /**\r\n     * @property readFunction - the name of the GLSL function that should be called to\r\n     * read data out of the array by index.\r\n     * @type {string}\r\n     */\n\n    this.readFunction = \"readData_\".concat(name);\n    this._raw = new Float32Array(0);\n    this._texture = new DataTexture(new Uint8Array(0), 0, 1);\n    this._length = 0;\n    this._multiplier = 1;\n  }\n  /**\r\n   * @property length - the current length of the data array\r\n   * @type {number}\r\n   */\n\n\n  _createClass(ShaderFloatArray, [{\n    key: \"push\",\n\n    /**\r\n     * Add a value to the end of the data array\r\n     * @param {number} value\r\n     */\n    value: function push(value) {\n      return this.set(this.length++, value);\n    }\n    /**\r\n     * Replace the existing data with that from a new array\r\n     * @param {ArrayLike<number>} array\r\n     */\n\n  }, {\n    key: \"setArray\",\n    value: function setArray(array) {\n      this.length = array.length;\n\n      this._raw.set(array);\n\n      this._needsRepack = true;\n    }\n    /**\r\n     * Get the current value at index\r\n     * @param {number} index\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this._raw[index];\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      if (index + 1 > this._length) {\n        this.length = index + 1;\n      }\n\n      if (value !== this._raw[index]) {\n        this._raw[index] = value;\n        encodeFloatToFourInts(value / this._multiplier, this._texture.image.data, index * 4);\n        this._needsMultCheck = true;\n      }\n    }\n    /**\r\n     * Make a copy of this ShaderFloatArray\r\n     * @return {ShaderFloatArray}\r\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new ShaderFloatArray(this.name);\n      clone.setArray(this._raw);\n      return clone;\n    }\n    /**\r\n     * Retrieve the set of Uniforms that must to be added to the target ShaderMaterial or\r\n     * DerivedMaterial, to feed the GLSL code generated by {@link #getShaderHeaderCode}.\r\n     * @return {Object}\r\n     */\n\n  }, {\n    key: \"getShaderUniforms\",\n    value: function getShaderUniforms() {\n      var _ref2;\n\n      var me = this;\n      return _ref2 = {}, _defineProperty(_ref2, this.textureUniform, {\n        get value() {\n          me._sync();\n\n          return me._texture;\n        }\n\n      }), _defineProperty(_ref2, this.textureSizeUniform, {\n        get value() {\n          me._sync();\n\n          return me._texture.image.width;\n        }\n\n      }), _defineProperty(_ref2, this.dataSizeUniform, {\n        get value() {\n          me._sync();\n\n          return me.length;\n        }\n\n      }), _defineProperty(_ref2, this.multiplierUniform, {\n        get value() {\n          me._sync();\n\n          return me._multiplier;\n        }\n\n      }), _ref2;\n    }\n    /**\r\n     * Retrieve the GLSL code that must be injected into the shader's definitions area to\r\n     * enable reading from the data array. This exposes a function with a name matching\r\n     * the {@link #readFunction} property, which other shader code can call to read values\r\n     * from the array by their index.\r\n     * @return {string}\r\n     */\n\n  }, {\n    key: \"getShaderHeaderCode\",\n    value: function getShaderHeaderCode() {\n      var textureUniform = this.textureUniform,\n          textureSizeUniform = this.textureSizeUniform,\n          dataSizeUniform = this.dataSizeUniform,\n          multiplierUniform = this.multiplierUniform,\n          readFunction = this.readFunction;\n      return \"\\nuniform sampler2D \".concat(textureUniform, \";\\nuniform float \").concat(textureSizeUniform, \";\\nuniform float \").concat(dataSizeUniform, \";\\nuniform float \").concat(multiplierUniform, \";\\n\\nfloat \").concat(readFunction, \"(float index) {\\n  vec2 texUV = vec2((index + 0.5) / \").concat(textureSizeUniform, \", 0.5);\\n  vec4 pixel = texture2D(\").concat(textureUniform, \", texUV);\\n  return dot(pixel, 1.0 / vec4(1.0, 255.0, 65025.0, 16581375.0)) * \").concat(multiplierUniform, \";\\n}\\n\");\n    }\n    /**\r\n     * @private Synchronize any pending changes to the underlying DataTexture\r\n     */\n\n  }, {\n    key: \"_sync\",\n    value: function _sync() {\n      var tex = this._texture;\n      var raw = this._raw;\n      var needsRepack = this._needsRepack; // If the size of the raw array changed, resize the texture to match\n\n      if (raw.length !== tex.image.width) {\n        tex.image = {\n          data: new Uint8Array(raw.length * 4),\n          width: raw.length,\n          height: 1\n        };\n        needsRepack = true;\n      } // If the values changed, check the multiplier. This should be a value by which\n      // all the values are divided to constrain them to the [0,1] range required by\n      // the Uint8 packing algorithm. We pick the nearest power of 2 that holds the\n      // maximum value for greatest accuracy.\n\n\n      if (needsRepack || this._needsMultCheck) {\n        var maxVal = this._raw.reduce(function (a, b) {\n          return Math.max(a, b);\n        }, 0);\n\n        var mult = Math.pow(2, Math.ceil(Math.log2(maxVal)));\n\n        if (mult !== this._multiplier) {\n          this._multiplier = mult;\n          needsRepack = true;\n        }\n\n        tex.needsUpdate = true;\n        this._needsMultCheck = false;\n      } // If things changed in a way we need to repack, do so\n\n\n      if (needsRepack) {\n        for (var i = 0, len = raw.length, _mult = this._multiplier; i < len; i++) {\n          encodeFloatToFourInts(raw[i] / _mult, tex.image.data, i * 4);\n        }\n\n        this._needsRepack = false;\n      }\n    }\n  }, {\n    key: \"length\",\n    set: function set(value) {\n      if (value !== this._length) {\n        // Find nearest power-of-2 that holds the new length\n        var size = Math.pow(2, Math.ceil(Math.log2(value)));\n        var raw = this._raw;\n\n        if (size < raw.length) {\n          this._raw = raw.subarray(0, size);\n        } else if (size > raw.length) {\n          this._raw = new Float32Array(size);\n\n          this._raw.set(raw);\n        }\n\n        this._length = value;\n      }\n    },\n    get: function get() {\n      return this._length;\n    }\n  }]);\n\n  return ShaderFloatArray;\n}();\n/**\r\n * Encode a floating point number into a set of four 8-bit integers.\r\n * Also see the companion decoder function #decodeFloatFromFourInts.\r\n *\r\n * This is adapted to JavaScript from the basic approach at\r\n * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n * but writes out integers in the range 0-255 instead of floats in the range 0-1\r\n * so they can be more easily used in a Uint8Array for standard WebGL rgba textures.\r\n *\r\n * Some precision will necessarily be lost during the encoding and decoding process.\r\n * Testing shows that the maximum precision error is ~1.18e-10 which should be good\r\n * enough for most cases.\r\n *\r\n * @param {Number} value - the floating point number to encode. Must be in the range [0, 1]\r\n *        otherwise the results will be incorrect.\r\n * @param {Array|Uint8Array} array - an array into which the four ints should be written\r\n * @param {Number} startIndex - index in the output array at which to start writing the ints\r\n * @return {Array|Uint8Array}\r\n */\n\n\nfunction encodeFloatToFourInts(value, array, startIndex) {\n  // This is adapted to JS from the basic approach at\n  // http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n  // but writes to a Uint8Array instead of floats. Input values must be in\n  // the range [0, 1]. The maximum error after encoding and decoding is ~1.18e-10\n  var enc0 = 255 * value;\n  var enc1 = 255 * (enc0 % 1);\n  var enc2 = 255 * (enc1 % 1);\n  var enc3 = 255 * (enc2 % 1);\n  enc0 = enc0 & 255;\n  enc1 = enc1 & 255;\n  enc2 = enc2 & 255;\n  enc3 = Math.round(enc3) & 255;\n  array[startIndex] = enc0;\n  array[startIndex + 1] = enc1;\n  array[startIndex + 2] = enc2;\n  array[startIndex + 3] = enc3;\n  return array;\n}\n/*\r\nInput geometry is a cylinder with r=1, height in y dimension from 0 to 1,\r\ndivided into a reasonable number of height segments.\r\n*/\n\n\nvar vertexDefs = \"\\nuniform vec3 pointA;\\nuniform vec3 controlA;\\nuniform vec3 controlB;\\nuniform vec3 pointB;\\nuniform float radius;\\nvarying float bezierT;\\n\\nvec3 cubicBezier(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\\n  float t2 = 1.0 - t;\\n  float b0 = t2 * t2 * t2;\\n  float b1 = 3.0 * t * t2 * t2;\\n  float b2 = 3.0 * t * t * t2;\\n  float b3 = t * t * t;\\n  return b0 * p1 + b1 * c1 + b2 * c2 + b3 * p2;\\n}\\n\\nvec3 cubicBezierDerivative(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\\n  float t2 = 1.0 - t;\\n  return -3.0 * p1 * t2 * t2 +\\n    c1 * (3.0 * t2 * t2 - 6.0 * t2 * t) +\\n    c2 * (6.0 * t2 * t - 3.0 * t * t) +\\n    3.0 * p2 * t * t;\\n}\\n\";\nvar vertexTransform = \"\\nfloat t = position.y;\\nbezierT = t;\\nvec3 bezierCenterPos = cubicBezier(pointA, controlA, controlB, pointB, t);\\nvec3 bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t));\\n\\n// Make \\\"sideways\\\" always perpendicular to the camera ray; this ensures that any twists\\n// in the cylinder occur where you won't see them: \\nvec3 viewDirection = normalMatrix * vec3(0.0, 0.0, 1.0);\\nif (bezierDir == viewDirection) {\\n  bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t == 1.0 ? t - 0.0001 : t + 0.0001));\\n}\\nvec3 sideways = normalize(cross(bezierDir, viewDirection));\\nvec3 upish = normalize(cross(sideways, bezierDir));\\n\\n// Build a matrix for transforming this disc in the cylinder:\\nmat4 discTx;\\ndiscTx[0].xyz = sideways * radius;\\ndiscTx[1].xyz = bezierDir * radius;\\ndiscTx[2].xyz = upish * radius;\\ndiscTx[3].xyz = bezierCenterPos;\\ndiscTx[3][3] = 1.0;\\n\\n// Apply transform, ignoring original y\\nposition = (discTx * vec4(position.x, 0.0, position.z, 1.0)).xyz;\\nnormal = normalize(mat3(discTx) * normal);\\n\";\nvar fragmentDefs = \"\\nuniform vec3 dashing;\\nvarying float bezierT;\\n\";\nvar fragmentMainIntro = \"\\nif (dashing.x + dashing.y > 0.0) {\\n  float dashFrac = mod(bezierT - dashing.z, dashing.x + dashing.y);\\n  if (dashFrac > dashing.x) {\\n    discard;\\n  }\\n}\\n\"; // Debugging: separate color for each of the 6 sides:\n// const fragmentColorTransform = `\n// float sideNum = floor(vUV.x * 6.0);\n// vec3 mixColor = sideNum < 1.0 ? vec3(1.0, 0.0, 0.0) :\n//   sideNum < 2.0 ? vec3(0.0, 1.0, 1.0) :\n//   sideNum < 3.0 ? vec3(1.0, 1.0, 0.0) :\n//   sideNum < 4.0 ? vec3(0.0, 0.0, 1.0) :\n//   sideNum < 5.0 ? vec3(0.0, 1.0, 0.0) :\n//   vec3(1.0, 0.0, 1.0);\n// gl_FragColor.xyz = mix(gl_FragColor.xyz, mixColor, 0.5);\n// `\n\nfunction createBezierMeshMaterial(baseMaterial) {\n  return createDerivedMaterial(baseMaterial, {\n    chained: true,\n    uniforms: {\n      pointA: {\n        value: new Vector3()\n      },\n      controlA: {\n        value: new Vector3()\n      },\n      controlB: {\n        value: new Vector3()\n      },\n      pointB: {\n        value: new Vector3()\n      },\n      radius: {\n        value: 0.01\n      },\n      dashing: {\n        value: new Vector3()\n      } //on, off, offset\n\n    },\n    vertexDefs: vertexDefs,\n    vertexTransform: vertexTransform,\n    fragmentDefs: fragmentDefs,\n    fragmentMainIntro: fragmentMainIntro\n  });\n}\n\nvar geometry = null;\nvar defaultBaseMaterial = /*#__PURE__*/new MeshStandardMaterial({\n  color: 0xffffff,\n  side: DoubleSide\n});\n/**\r\n * A ThreeJS `Mesh` that bends a tube shape along a 3D cubic bezier path. The bending is done\r\n * by deforming a straight cylindrical geometry in the vertex shader based on a set of four\r\n * control point uniforms. It patches the necessary GLSL into the mesh's assigned `material`\r\n * automatically.\r\n *\r\n * The cubiz bezier path is determined by its four `Vector3` properties:\r\n * - `pointA`\r\n * - `controlA`\r\n * - `controlB`\r\n * - `pointB`\r\n *\r\n * The tube's radius is controlled by its `radius` property, which defaults to `0.01`.\r\n *\r\n * You can also give the tube a dashed appearance with two properties:\r\n *\r\n * - `dashArray` - an array of two numbers, defining the length of \"on\" and \"off\" parts of\r\n *   the dash. Each is a 0-1 ratio of the entire path's length. (Actually this is the `t` length\r\n *   used as input to the cubic bezier function, not its visible length.)\r\n * - `dashOffset` - offset of where the dash starts. You can animate this to make the dashes move.\r\n *\r\n * Note that the dashes will appear like a hollow tube, not solid. This will be more apparent on\r\n * thicker tubes.\r\n *\r\n * TODO: proper geometry bounding sphere and raycasting\r\n * TODO: allow control of the geometry's segment counts\r\n */\n\nvar BezierMesh = /*#__PURE__*/function (_Mesh) {\n  _inherits(BezierMesh, _Mesh);\n\n  var _super = _createSuper(BezierMesh);\n\n  _createClass(BezierMesh, null, [{\n    key: \"getGeometry\",\n    value: function getGeometry() {\n      return geometry || (geometry = new CylinderBufferGeometry(1, 1, 1, 6, 64).translate(0, 0.5, 0));\n    }\n  }]);\n\n  function BezierMesh() {\n    var _this;\n\n    _classCallCheck(this, BezierMesh);\n\n    _this = _super.call(this, BezierMesh.getGeometry(), defaultBaseMaterial);\n    _this.pointA = new Vector3();\n    _this.controlA = new Vector3();\n    _this.controlB = new Vector3();\n    _this.pointB = new Vector3();\n    _this.radius = 0.01;\n    _this.dashArray = new Vector2();\n    _this.dashOffset = 0; // TODO - disabling frustum culling until I figure out how to customize the\n    //  geometry's bounding sphere that gets used\n\n    _this.frustumCulled = false;\n    return _this;\n  } // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n  // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n\n\n  _createClass(BezierMesh, [{\n    key: \"onBeforeRender\",\n    value: function onBeforeRender(shaderInfo) {\n      var uniforms = this.material.uniforms;\n      var pointA = this.pointA,\n          controlA = this.controlA,\n          controlB = this.controlB,\n          pointB = this.pointB,\n          radius = this.radius,\n          dashArray = this.dashArray,\n          dashOffset = this.dashOffset;\n      uniforms.pointA.value.copy(pointA);\n      uniforms.controlA.value.copy(controlA);\n      uniforms.controlB.value.copy(controlB);\n      uniforms.pointB.value.copy(pointB);\n      uniforms.radius.value = radius;\n      uniforms.dashing.value.set(dashArray.x, dashArray.y, dashOffset || 0);\n    }\n  }, {\n    key: \"raycast\",\n    value: function raycast(raycaster, intersects) {// TODO - just fail for now\n    }\n  }, {\n    key: \"material\",\n    get: function get() {\n      var derivedMaterial = this._derivedMaterial;\n      var baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultBaseMaterial.clone());\n\n      if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n        derivedMaterial = this._derivedMaterial = createBezierMeshMaterial(baseMaterial); // dispose the derived material when its base material is disposed:\n\n        baseMaterial.addEventListener('dispose', function onDispose() {\n          baseMaterial.removeEventListener('dispose', onDispose);\n          derivedMaterial.dispose();\n        });\n      }\n\n      return derivedMaterial;\n    },\n    set: function set(baseMaterial) {\n      this._baseMaterial = baseMaterial;\n    } // Create and update material for shadows upon request:\n\n  }, {\n    key: \"customDepthMaterial\",\n    get: function get() {\n      return this.material.getDepthMaterial();\n    }\n  }, {\n    key: \"customDistanceMaterial\",\n    get: function get() {\n      return this.material.getDistanceMaterial();\n    }\n  }]);\n\n  return BezierMesh;\n}(Mesh);\n\nexport { BezierMesh, ShaderFloatArray, createDerivedMaterial, expandShaderIncludes, getShaderUniformTypes, getShadersForMaterial, voidMainRegExp };","import _get from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _classCallCheck from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _slicedToArray from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { DataTexture, LuminanceFormat, LinearFilter, Color, Vector3, InstancedBufferGeometry, Sphere, Box3, InstancedBufferAttribute, PlaneBufferGeometry, Vector2, Vector4, Matrix3, MeshBasicMaterial, DoubleSide, Matrix4, Mesh } from 'three';\nimport { defineWorkerModule, ThenableWorkerModule } from 'troika-worker-utils';\nimport { createDerivedMaterial, voidMainRegExp } from 'troika-three-utils';\n/**\r\n * Initializes and returns a function to generate an SDF texture for a given glyph.\r\n * @param {function} createGlyphSegmentsIndex - factory for a GlyphSegmentsIndex implementation.\r\n * @param {number} config.sdfExponent\r\n * @param {number} config.sdfMargin\r\n *\r\n * @return {function(Object): {renderingBounds: [minX, minY, maxX, maxY], textureData: Uint8Array}}\r\n */\n\nfunction createSDFGenerator(createGlyphSegmentsIndex, config) {\n  var sdfExponent = config.sdfExponent,\n      sdfMargin = config.sdfMargin;\n  /**\r\n   * How many straight line segments to use when approximating a glyph's quadratic/cubic bezier curves.\r\n   */\n\n  var CURVE_POINTS = 16;\n  /**\r\n   * Find the point on a quadratic bezier curve at t where t is in the range [0, 1]\r\n   */\n\n  function pointOnQuadraticBezier(x0, y0, x1, y1, x2, y2, t) {\n    var t2 = 1 - t;\n    return {\n      x: t2 * t2 * x0 + 2 * t2 * t * x1 + t * t * x2,\n      y: t2 * t2 * y0 + 2 * t2 * t * y1 + t * t * y2\n    };\n  }\n  /**\r\n   * Find the point on a cubic bezier curve at t where t is in the range [0, 1]\r\n   */\n\n\n  function pointOnCubicBezier(x0, y0, x1, y1, x2, y2, x3, y3, t) {\n    var t2 = 1 - t;\n    return {\n      x: t2 * t2 * t2 * x0 + 3 * t2 * t2 * t * x1 + 3 * t2 * t * t * x2 + t * t * t * x3,\n      y: t2 * t2 * t2 * y0 + 3 * t2 * t2 * t * y1 + 3 * t2 * t * t * y2 + t * t * t * y3\n    };\n  }\n  /**\r\n   * Generate an SDF texture segment for a single glyph.\r\n   * @param {object} glyphObj\r\n   * @param {number} sdfSize - the length of one side of the SDF image.\r\n   *        Larger images encode more details. Must be a power of 2.\r\n   * @return {{textureData: Uint8Array, renderingBounds: *[]}}\r\n   */\n\n\n  function generateSDF(glyphObj, sdfSize) {\n    //console.time('glyphSDF')\n    var textureData = new Uint8Array(sdfSize * sdfSize); // Determine mapping between glyph grid coords and sdf grid coords\n\n    var glyphW = glyphObj.xMax - glyphObj.xMin;\n    var glyphH = glyphObj.yMax - glyphObj.yMin; // Choose a maximum search distance radius in font units, based on the glyph's max dimensions\n\n    var fontUnitsMaxSearchDist = Math.max(glyphW, glyphH); // Margin - add an extra 0.5 over the configured value because the outer 0.5 doesn't contain\n    // useful interpolated values and will be ignored anyway.\n\n    var fontUnitsMargin = Math.max(glyphW, glyphH) / sdfSize * (sdfMargin * sdfSize + 0.5); // Metrics of the texture/quad in font units\n\n    var textureMinFontX = glyphObj.xMin - fontUnitsMargin;\n    var textureMinFontY = glyphObj.yMin - fontUnitsMargin;\n    var textureMaxFontX = glyphObj.xMax + fontUnitsMargin;\n    var textureMaxFontY = glyphObj.yMax + fontUnitsMargin;\n    var fontUnitsTextureWidth = textureMaxFontX - textureMinFontX;\n    var fontUnitsTextureHeight = textureMaxFontY - textureMinFontY;\n    var fontUnitsTextureMaxDim = Math.max(fontUnitsTextureWidth, fontUnitsTextureHeight);\n\n    function textureXToFontX(x) {\n      return textureMinFontX + fontUnitsTextureWidth * x / sdfSize;\n    }\n\n    function textureYToFontY(y) {\n      return textureMinFontY + fontUnitsTextureHeight * y / sdfSize;\n    }\n\n    if (glyphObj.pathCommandCount) {\n      //whitespace chars will have no commands, so we can skip all this\n      // Decompose all paths into straight line segments and add them to a quadtree\n      var lineSegmentsIndex = createGlyphSegmentsIndex(glyphObj);\n      var firstX, firstY, prevX, prevY;\n      glyphObj.forEachPathCommand(function (type, x0, y0, x1, y1, x2, y2) {\n        switch (type) {\n          case 'M':\n            prevX = firstX = x0;\n            prevY = firstY = y0;\n            break;\n\n          case 'L':\n            if (x0 !== prevX || y0 !== prevY) {\n              //yup, some fonts have zero-length line commands\n              lineSegmentsIndex.addLineSegment(prevX, prevY, prevX = x0, prevY = y0);\n            }\n\n            break;\n\n          case 'Q':\n            {\n              var prevPoint = {\n                x: prevX,\n                y: prevY\n              };\n\n              for (var i = 1; i < CURVE_POINTS; i++) {\n                var nextPoint = pointOnQuadraticBezier(prevX, prevY, x0, y0, x1, y1, i / (CURVE_POINTS - 1));\n                lineSegmentsIndex.addLineSegment(prevPoint.x, prevPoint.y, nextPoint.x, nextPoint.y);\n                prevPoint = nextPoint;\n              }\n\n              prevX = x1;\n              prevY = y1;\n              break;\n            }\n\n          case 'C':\n            {\n              var _prevPoint = {\n                x: prevX,\n                y: prevY\n              };\n\n              for (var _i = 1; _i < CURVE_POINTS; _i++) {\n                var _nextPoint = pointOnCubicBezier(prevX, prevY, x0, y0, x1, y1, x2, y2, _i / (CURVE_POINTS - 1));\n\n                lineSegmentsIndex.addLineSegment(_prevPoint.x, _prevPoint.y, _nextPoint.x, _nextPoint.y);\n                _prevPoint = _nextPoint;\n              }\n\n              prevX = x2;\n              prevY = y2;\n              break;\n            }\n\n          case 'Z':\n            if (prevX !== firstX || prevY !== firstY) {\n              lineSegmentsIndex.addLineSegment(prevX, prevY, firstX, firstY);\n            }\n\n            break;\n        }\n      }); // For each target SDF texel, find the distance from its center to its nearest line segment,\n      // map that distance to an alpha value, and write that alpha to the texel\n\n      for (var sdfX = 0; sdfX < sdfSize; sdfX++) {\n        for (var sdfY = 0; sdfY < sdfSize; sdfY++) {\n          var signedDist = lineSegmentsIndex.findNearestSignedDistance(textureXToFontX(sdfX + 0.5), textureYToFontY(sdfY + 0.5), fontUnitsMaxSearchDist); // Use an exponential scale to ensure the texels very near the glyph path have adequate\n          // precision, while allowing the distance field to cover the entire texture, given that\n          // there are only 8 bits available. Formula visualized: https://www.desmos.com/calculator/uiaq5aqiam\n\n          var alpha = Math.pow(1 - Math.abs(signedDist) / fontUnitsTextureMaxDim, sdfExponent) / 2;\n\n          if (signedDist < 0) {\n            alpha = 1 - alpha;\n          }\n\n          alpha = Math.max(0, Math.min(255, Math.round(alpha * 255))); //clamp\n\n          textureData[sdfY * sdfSize + sdfX] = alpha;\n        }\n      }\n    } //console.timeEnd('glyphSDF')\n\n\n    return {\n      textureData: textureData,\n      renderingBounds: [textureMinFontX, textureMinFontY, textureMaxFontX, textureMaxFontY]\n    };\n  }\n\n  return generateSDF;\n}\n/**\r\n * Creates a self-contained environment for processing text rendering requests.\r\n *\r\n * It is important that this function has no closure dependencies, so that it can be easily injected\r\n * into the source for a Worker without requiring a build step or complex dependency loading. All its\r\n * dependencies must be passed in at initialization.\r\n *\r\n * @param {function} fontParser - a function that accepts an ArrayBuffer of the font data and returns\r\n * a standardized structure giving access to the font and its glyphs:\r\n *   {\r\n *     unitsPerEm: number,\r\n *     ascender: number,\r\n *     descender: number,\r\n *     forEachGlyph(string, fontSize, letterSpacing, callback) {\r\n *       //invokes callback for each glyph to render, passing it an object:\r\n *       callback({\r\n *         index: number,\r\n *         advanceWidth: number,\r\n *         xMin: number,\r\n *         yMin: number,\r\n *         xMax: number,\r\n *         yMax: number,\r\n *         pathCommandCount: number,\r\n *         forEachPathCommand(callback) {\r\n *           //invokes callback for each path command, with args:\r\n *           callback(\r\n *             type: 'M|L|C|Q|Z',\r\n *             ...args //0 to 6 args depending on the type\r\n *           )\r\n *         }\r\n *       })\r\n *     }\r\n *   }\r\n * @param {function} sdfGenerator - a function that accepts a glyph object and generates an SDF texture\r\n * from it.\r\n * @param {Object} config\r\n * @return {Object}\r\n */\n\n\nfunction createFontProcessor(fontParser, sdfGenerator, config) {\n  var defaultFontURL = config.defaultFontURL;\n  /**\r\n   * @private\r\n   * Holds data about font glyphs and how they relate to SDF atlases\r\n   *\r\n   * {\r\n   *   'fontUrl@sdfSize': {\r\n   *     fontObj: {}, //result of the fontParser\r\n   *     glyphs: {\r\n   *       [glyphIndex]: {\r\n   *         atlasIndex: 0,\r\n   *         glyphObj: {}, //glyph object from the fontParser\r\n   *         renderingBounds: [x0, y0, x1, y1]\r\n   *       },\r\n   *       ...\r\n   *     },\r\n   *     glyphCount: 123\r\n   *   }\r\n   * }\r\n   */\n\n  var fontAtlases = Object.create(null);\n  /**\r\n   * Holds parsed font objects by url\r\n   */\n\n  var fonts = Object.create(null);\n  var INF = Infinity;\n  /**\r\n   * Load a given font url\r\n   */\n\n  function doLoadFont(url, callback) {\n    function tryLoad() {\n      var onError = function onError(err) {\n        console.error(\"Failure loading font \".concat(url).concat(url === defaultFontURL ? '' : '; trying fallback'), err);\n\n        if (url !== defaultFontURL) {\n          url = defaultFontURL;\n          tryLoad();\n        }\n      };\n\n      try {\n        var request = new XMLHttpRequest();\n        request.open('get', url, true);\n        request.responseType = 'arraybuffer';\n\n        request.onload = function () {\n          if (request.status >= 400) {\n            onError(new Error(request.statusText));\n          } else if (request.status > 0) {\n            try {\n              var fontObj = fontParser(request.response);\n              callback(fontObj);\n            } catch (e) {\n              onError(e);\n            }\n          }\n        };\n\n        request.onerror = onError;\n        request.send();\n      } catch (err) {\n        onError(err);\n      }\n    }\n\n    tryLoad();\n  }\n  /**\r\n   * Load a given font url if needed, invoking a callback when it's loaded. If already\r\n   * loaded, the callback will be called synchronously.\r\n   */\n\n\n  function loadFont(fontUrl, callback) {\n    if (!fontUrl) fontUrl = defaultFontURL;\n    var font = fonts[fontUrl];\n\n    if (font) {\n      // if currently loading font, add to callbacks, otherwise execute immediately\n      if (font.pending) {\n        font.pending.push(callback);\n      } else {\n        callback(font);\n      }\n    } else {\n      fonts[fontUrl] = {\n        pending: [callback]\n      };\n      doLoadFont(fontUrl, function (fontObj) {\n        var callbacks = fonts[fontUrl].pending;\n        fonts[fontUrl] = fontObj;\n        callbacks.forEach(function (cb) {\n          return cb(fontObj);\n        });\n      });\n    }\n  }\n  /**\r\n   * Get the atlas data for a given font url, loading it from the network and initializing\r\n   * its atlas data objects if necessary.\r\n   */\n\n\n  function getSdfAtlas(fontUrl, sdfGlyphSize, callback) {\n    if (!fontUrl) fontUrl = defaultFontURL;\n    var atlasKey = \"\".concat(fontUrl, \"@\").concat(sdfGlyphSize);\n    var atlas = fontAtlases[atlasKey];\n\n    if (atlas) {\n      callback(atlas);\n    } else {\n      loadFont(fontUrl, function (fontObj) {\n        atlas = fontAtlases[atlasKey] || (fontAtlases[atlasKey] = {\n          fontObj: fontObj,\n          glyphs: {},\n          glyphCount: 0\n        });\n        callback(atlas);\n      });\n    }\n  }\n  /**\r\n   * Main entry point.\r\n   * Process a text string with given font and formatting parameters, and return all info\r\n   * necessary to render all its glyphs.\r\n   */\n\n\n  function process(_ref, callback) {\n    var _ref$text = _ref.text,\n        text = _ref$text === void 0 ? '' : _ref$text,\n        _ref$font = _ref.font,\n        font = _ref$font === void 0 ? defaultFontURL : _ref$font,\n        _ref$sdfGlyphSize = _ref.sdfGlyphSize,\n        sdfGlyphSize = _ref$sdfGlyphSize === void 0 ? 64 : _ref$sdfGlyphSize,\n        _ref$fontSize = _ref.fontSize,\n        fontSize = _ref$fontSize === void 0 ? 1 : _ref$fontSize,\n        _ref$letterSpacing = _ref.letterSpacing,\n        letterSpacing = _ref$letterSpacing === void 0 ? 0 : _ref$letterSpacing,\n        _ref$lineHeight = _ref.lineHeight,\n        lineHeight = _ref$lineHeight === void 0 ? 'normal' : _ref$lineHeight,\n        _ref$maxWidth = _ref.maxWidth,\n        maxWidth = _ref$maxWidth === void 0 ? INF : _ref$maxWidth,\n        _ref$textAlign = _ref.textAlign,\n        textAlign = _ref$textAlign === void 0 ? 'left' : _ref$textAlign,\n        _ref$textIndent = _ref.textIndent,\n        textIndent = _ref$textIndent === void 0 ? 0 : _ref$textIndent,\n        _ref$whiteSpace = _ref.whiteSpace,\n        whiteSpace = _ref$whiteSpace === void 0 ? 'normal' : _ref$whiteSpace,\n        _ref$overflowWrap = _ref.overflowWrap,\n        overflowWrap = _ref$overflowWrap === void 0 ? 'normal' : _ref$overflowWrap,\n        _ref$anchorX = _ref.anchorX,\n        anchorX = _ref$anchorX === void 0 ? 0 : _ref$anchorX,\n        _ref$anchorY = _ref.anchorY,\n        anchorY = _ref$anchorY === void 0 ? 0 : _ref$anchorY,\n        _ref$includeCaretPosi = _ref.includeCaretPositions,\n        includeCaretPositions = _ref$includeCaretPosi === void 0 ? false : _ref$includeCaretPosi,\n        _ref$chunkedBoundsSiz = _ref.chunkedBoundsSize,\n        chunkedBoundsSize = _ref$chunkedBoundsSiz === void 0 ? 8192 : _ref$chunkedBoundsSiz,\n        _ref$colorRanges = _ref.colorRanges,\n        colorRanges = _ref$colorRanges === void 0 ? null : _ref$colorRanges;\n    var metricsOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var mainStart = now();\n    var timings = {\n      total: 0,\n      fontLoad: 0,\n      layout: 0,\n      sdf: {},\n      sdfTotal: 0\n    }; // Ensure newlines are normalized\n\n    if (text.indexOf('\\r') > -1) {\n      console.warn('FontProcessor.process: got text with \\\\r chars; normalizing to \\\\n');\n      text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n    } // Ensure we've got numbers not strings\n\n\n    fontSize = +fontSize;\n    letterSpacing = +letterSpacing;\n    maxWidth = +maxWidth;\n    lineHeight = lineHeight || 'normal';\n    textIndent = +textIndent;\n    getSdfAtlas(font, sdfGlyphSize, function (atlas) {\n      var fontObj = atlas.fontObj;\n      var hasMaxWidth = isFinite(maxWidth);\n      var newGlyphs = null;\n      var glyphBounds = null;\n      var glyphAtlasIndices = null;\n      var glyphColors = null;\n      var caretPositions = null;\n      var visibleBounds = null;\n      var chunkedBounds = null;\n      var maxLineWidth = 0;\n      var renderableGlyphCount = 0;\n      var canWrap = whiteSpace !== 'nowrap';\n      var ascender = fontObj.ascender,\n          descender = fontObj.descender,\n          unitsPerEm = fontObj.unitsPerEm;\n      timings.fontLoad = now() - mainStart;\n      var layoutStart = now(); // Find conversion between native font units and fontSize units; this will already be done\n      // for the gx/gy values below but everything else we'll need to convert\n\n      var fontSizeMult = fontSize / unitsPerEm; // Determine appropriate value for 'normal' line height based on the font's actual metrics\n      // TODO this does not guarantee individual glyphs won't exceed the line height, e.g. Roboto; should we use yMin/Max instead?\n\n      if (lineHeight === 'normal') {\n        lineHeight = (ascender - descender) / unitsPerEm;\n      } // Determine line height and leading adjustments\n\n\n      lineHeight = lineHeight * fontSize;\n      var halfLeading = (lineHeight - (ascender - descender) * fontSizeMult) / 2;\n      var topBaseline = -(ascender * fontSizeMult + halfLeading);\n      var caretHeight = Math.min(lineHeight, (ascender - descender) * fontSizeMult);\n      var caretBottomOffset = (ascender + descender) / 2 * fontSizeMult - caretHeight / 2; // Distribute glyphs into lines based on wrapping\n\n      var lineXOffset = textIndent;\n      var currentLine = new TextLine();\n      var lines = [currentLine];\n      fontObj.forEachGlyph(text, fontSize, letterSpacing, function (glyphObj, glyphX, charIndex) {\n        var char = text.charAt(charIndex);\n        var glyphWidth = glyphObj.advanceWidth * fontSizeMult;\n        var curLineCount = currentLine.count;\n        var nextLine; // Calc isWhitespace and isEmpty once per glyphObj\n\n        if (!('isEmpty' in glyphObj)) {\n          glyphObj.isWhitespace = !!char && /\\s/.test(char);\n          glyphObj.isEmpty = glyphObj.xMin === glyphObj.xMax || glyphObj.yMin === glyphObj.yMax;\n        }\n\n        if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\n          renderableGlyphCount++;\n        } // If a non-whitespace character overflows the max width, we need to soft-wrap\n\n\n        if (canWrap && hasMaxWidth && !glyphObj.isWhitespace && glyphX + glyphWidth + lineXOffset > maxWidth && curLineCount) {\n          // If it's the first char after a whitespace, start a new line\n          if (currentLine.glyphAt(curLineCount - 1).glyphObj.isWhitespace) {\n            nextLine = new TextLine();\n            lineXOffset = -glyphX;\n          } else {\n            // Back up looking for a whitespace character to wrap at\n            for (var i = curLineCount; i--;) {\n              // If we got the start of the line there's no soft break point; make hard break if overflowWrap='break-word'\n              if (i === 0 && overflowWrap === 'break-word') {\n                nextLine = new TextLine();\n                lineXOffset = -glyphX;\n                break;\n              } // Found a soft break point; move all chars since it to a new line\n              else if (currentLine.glyphAt(i).glyphObj.isWhitespace) {\n                  nextLine = currentLine.splitAt(i + 1);\n                  var adjustX = nextLine.glyphAt(0).x;\n                  lineXOffset -= adjustX;\n\n                  for (var j = nextLine.count; j--;) {\n                    nextLine.glyphAt(j).x -= adjustX;\n                  }\n\n                  break;\n                }\n            }\n          }\n\n          if (nextLine) {\n            currentLine.isSoftWrapped = true;\n            currentLine = nextLine;\n            lines.push(currentLine);\n            maxLineWidth = maxWidth; //after soft wrapping use maxWidth as calculated width\n          }\n        }\n\n        var fly = currentLine.glyphAt(currentLine.count);\n        fly.glyphObj = glyphObj;\n        fly.x = glyphX + lineXOffset;\n        fly.width = glyphWidth;\n        fly.charIndex = charIndex; // Handle hard line breaks\n\n        if (char === '\\n') {\n          currentLine = new TextLine();\n          lines.push(currentLine);\n          lineXOffset = -(glyphX + glyphWidth + letterSpacing * fontSize) + textIndent;\n        }\n      }); // Calculate width of each line (excluding trailing whitespace) and maximum block width\n\n      lines.forEach(function (line) {\n        for (var i = line.count; i--;) {\n          var _line$glyphAt = line.glyphAt(i),\n              glyphObj = _line$glyphAt.glyphObj,\n              x = _line$glyphAt.x,\n              width = _line$glyphAt.width;\n\n          if (!glyphObj.isWhitespace) {\n            line.width = x + width;\n\n            if (line.width > maxLineWidth) {\n              maxLineWidth = line.width;\n            }\n\n            return;\n          }\n        }\n      }); // Find overall position adjustments for anchoring\n\n      var anchorXOffset = 0;\n      var anchorYOffset = 0;\n\n      if (anchorX) {\n        if (typeof anchorX === 'number') {\n          anchorXOffset = -anchorX;\n        } else if (typeof anchorX === 'string') {\n          anchorXOffset = -maxLineWidth * (anchorX === 'left' ? 0 : anchorX === 'center' ? 0.5 : anchorX === 'right' ? 1 : parsePercent(anchorX));\n        }\n      }\n\n      if (anchorY) {\n        if (typeof anchorY === 'number') {\n          anchorYOffset = -anchorY;\n        } else if (typeof anchorY === 'string') {\n          var height = lines.length * lineHeight;\n          anchorYOffset = anchorY === 'top' ? 0 : anchorY === 'top-baseline' ? -topBaseline : anchorY === 'middle' ? height / 2 : anchorY === 'bottom' ? height : anchorY === 'bottom-baseline' ? height - halfLeading + descender * fontSizeMult : parsePercent(anchorY) * height;\n        }\n      }\n\n      if (!metricsOnly) {\n        // Process each line, applying alignment offsets, adding each glyph to the atlas, and\n        // collecting all renderable glyphs into a single collection.\n        glyphBounds = new Float32Array(renderableGlyphCount * 4);\n        glyphAtlasIndices = new Float32Array(renderableGlyphCount);\n        visibleBounds = [INF, INF, -INF, -INF];\n        chunkedBounds = [];\n        var lineYOffset = topBaseline;\n\n        if (includeCaretPositions) {\n          caretPositions = new Float32Array(text.length * 3);\n        }\n\n        if (colorRanges) {\n          glyphColors = new Uint8Array(renderableGlyphCount * 3);\n        }\n\n        var renderableGlyphIndex = 0;\n        var prevCharIndex = -1;\n        var colorCharIndex = -1;\n        var chunk;\n        var currentColor;\n        lines.forEach(function (line) {\n          var lineGlyphCount = line.count,\n              lineWidth = line.width; // Ignore empty lines\n\n          if (lineGlyphCount > 0) {\n            // Find x offset for horizontal alignment\n            var _lineXOffset = 0;\n            var justifyAdjust = 0;\n\n            if (textAlign === 'center') {\n              _lineXOffset = (maxLineWidth - lineWidth) / 2;\n            } else if (textAlign === 'right') {\n              _lineXOffset = maxLineWidth - lineWidth;\n            } else if (textAlign === 'justify' && line.isSoftWrapped) {\n              // just count the non-trailing whitespace characters, and we'll adjust the offsets per\n              // character in the next loop\n              var whitespaceCount = 0;\n\n              for (var i = lineGlyphCount; i--;) {\n                if (!line.glyphAt(i).glyphObj.isWhitespace) {\n                  while (i--) {\n                    if (!line.glyphAt(i).glyphObj) {\n                      debugger;\n                    }\n\n                    if (line.glyphAt(i).glyphObj.isWhitespace) {\n                      whitespaceCount++;\n                    }\n                  }\n\n                  break;\n                }\n              }\n\n              justifyAdjust = (maxLineWidth - lineWidth) / whitespaceCount;\n            }\n\n            for (var _i2 = 0; _i2 < lineGlyphCount; _i2++) {\n              var glyphInfo = line.glyphAt(_i2);\n              var glyphObj = glyphInfo.glyphObj; // Apply position adjustments\n\n              if (_lineXOffset) glyphInfo.x += _lineXOffset; // Expand whitespaces for justify alignment\n\n              if (justifyAdjust !== 0 && glyphObj.isWhitespace) {\n                _lineXOffset += justifyAdjust;\n                glyphInfo.width += justifyAdjust;\n              } // Add caret positions\n\n\n              if (includeCaretPositions) {\n                var charIndex = glyphInfo.charIndex;\n                caretPositions[charIndex * 3] = glyphInfo.x + anchorXOffset; //left edge x\n\n                caretPositions[charIndex * 3 + 1] = glyphInfo.x + glyphInfo.width + anchorXOffset; //right edge x\n\n                caretPositions[charIndex * 3 + 2] = lineYOffset + caretBottomOffset + anchorYOffset; //common bottom y\n                // If we skipped any chars from the previous glyph (due to ligature subs), copy the\n                // previous glyph's info to those missing char indices. In the future we may try to\n                // use the font's LigatureCaretList table to get interior caret positions.\n\n                while (charIndex - prevCharIndex > 1) {\n                  caretPositions[(prevCharIndex + 1) * 3] = caretPositions[prevCharIndex * 3 + 1];\n                  caretPositions[(prevCharIndex + 1) * 3 + 1] = caretPositions[prevCharIndex * 3 + 1];\n                  caretPositions[(prevCharIndex + 1) * 3 + 2] = caretPositions[prevCharIndex * 3 + 2];\n                  prevCharIndex++;\n                }\n\n                prevCharIndex = charIndex;\n              } // Track current color range\n\n\n              if (colorRanges) {\n                var _charIndex = glyphInfo.charIndex;\n\n                while (_charIndex > colorCharIndex) {\n                  colorCharIndex++;\n\n                  if (colorRanges.hasOwnProperty(colorCharIndex)) {\n                    currentColor = colorRanges[colorCharIndex];\n                  }\n                }\n              } // Get atlas data for renderable glyphs\n\n\n              if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\n                var idx = renderableGlyphIndex++; // If we haven't seen this glyph yet, generate its SDF\n\n                var glyphAtlasInfo = atlas.glyphs[glyphObj.index];\n\n                if (!glyphAtlasInfo) {\n                  var sdfStart = now();\n                  var glyphSDFData = sdfGenerator(glyphObj, sdfGlyphSize);\n                  timings.sdf[text.charAt(glyphInfo.charIndex)] = now() - sdfStart; // Assign this glyph the next available atlas index\n\n                  glyphSDFData.atlasIndex = atlas.glyphCount++; // Queue it up in the response's newGlyphs list\n\n                  if (!newGlyphs) newGlyphs = [];\n                  newGlyphs.push(glyphSDFData); // Store its metadata (not the texture) in our atlas info\n\n                  glyphAtlasInfo = atlas.glyphs[glyphObj.index] = {\n                    atlasIndex: glyphSDFData.atlasIndex,\n                    glyphObj: glyphObj,\n                    renderingBounds: glyphSDFData.renderingBounds\n                  };\n                } // Determine final glyph quad bounds and add them to the glyphBounds array\n\n\n                var bounds = glyphAtlasInfo.renderingBounds;\n                var startIdx = idx * 4;\n                var xStart = glyphInfo.x + anchorXOffset;\n                var yStart = lineYOffset + anchorYOffset;\n                glyphBounds[startIdx] = xStart + bounds[0] * fontSizeMult;\n                glyphBounds[startIdx + 1] = yStart + bounds[1] * fontSizeMult;\n                glyphBounds[startIdx + 2] = xStart + bounds[2] * fontSizeMult;\n                glyphBounds[startIdx + 3] = yStart + bounds[3] * fontSizeMult; // Track total visible bounds\n\n                var visX0 = xStart + glyphObj.xMin * fontSizeMult;\n                var visY0 = yStart + glyphObj.yMin * fontSizeMult;\n                var visX1 = xStart + glyphObj.xMax * fontSizeMult;\n                var visY1 = yStart + glyphObj.yMax * fontSizeMult;\n                if (visX0 < visibleBounds[0]) visibleBounds[0] = visX0;\n                if (visY0 < visibleBounds[1]) visibleBounds[1] = visY0;\n                if (visX1 > visibleBounds[2]) visibleBounds[2] = visX1;\n                if (visY1 > visibleBounds[3]) visibleBounds[3] = visY1; // Track bounding rects for each chunk of N glyphs\n\n                if (idx % chunkedBoundsSize === 0) {\n                  chunk = {\n                    start: idx,\n                    end: idx,\n                    rect: [INF, INF, -INF, -INF]\n                  };\n                  chunkedBounds.push(chunk);\n                }\n\n                chunk.end++;\n                var chunkRect = chunk.rect;\n                if (visX0 < chunkRect[0]) chunkRect[0] = visX0;\n                if (visY0 < chunkRect[1]) chunkRect[1] = visY0;\n                if (visX1 > chunkRect[2]) chunkRect[2] = visX1;\n                if (visY1 > chunkRect[3]) chunkRect[3] = visY1; // Add to atlas indices array\n\n                glyphAtlasIndices[idx] = glyphAtlasInfo.atlasIndex; // Add colors\n\n                if (colorRanges) {\n                  var start = idx * 3;\n                  glyphColors[start] = currentColor >> 16 & 255;\n                  glyphColors[start + 1] = currentColor >> 8 & 255;\n                  glyphColors[start + 2] = currentColor & 255;\n                }\n              }\n            }\n          } // Increment y offset for next line\n\n\n          lineYOffset -= lineHeight;\n        });\n      } // Timing stats\n\n\n      for (var ch in timings.sdf) {\n        timings.sdfTotal += timings.sdf[ch];\n      }\n\n      timings.layout = now() - layoutStart - timings.sdfTotal;\n      timings.total = now() - mainStart;\n      callback({\n        glyphBounds: glyphBounds,\n        //rendering quad bounds for each glyph [x1, y1, x2, y2]\n        glyphAtlasIndices: glyphAtlasIndices,\n        //atlas indices for each glyph\n        caretPositions: caretPositions,\n        //x,y of bottom of cursor position before each char, plus one after last char\n        caretHeight: caretHeight,\n        //height of cursor from bottom to top\n        glyphColors: glyphColors,\n        //color for each glyph, if color ranges supplied\n        chunkedBounds: chunkedBounds,\n        //total rects per (n=chunkedBoundsSize) consecutive glyphs\n        ascender: ascender * fontSizeMult,\n        //font ascender\n        descender: descender * fontSizeMult,\n        //font descender\n        lineHeight: lineHeight,\n        //computed line height\n        topBaseline: topBaseline,\n        //y coordinate of the top line's baseline\n        blockBounds: [//bounds for the whole block of text, including vertical padding for lineHeight\n        anchorXOffset, anchorYOffset - lines.length * lineHeight, anchorXOffset + maxLineWidth, anchorYOffset],\n        visibleBounds: visibleBounds,\n        //total bounds of visible text paths, may be larger or smaller than totalBounds\n        newGlyphSDFs: newGlyphs,\n        //if this request included any new SDFs for the atlas, they'll be included here\n        timings: timings\n      });\n    });\n  }\n  /**\r\n   * For a given text string and font parameters, determine the resulting block dimensions\r\n   * after wrapping for the given maxWidth.\r\n   * @param args\r\n   * @param callback\r\n   */\n\n\n  function measure(args, callback) {\n    process(args, function (result) {\n      var _result$blockBounds = _slicedToArray(result.blockBounds, 4),\n          x0 = _result$blockBounds[0],\n          y0 = _result$blockBounds[1],\n          x1 = _result$blockBounds[2],\n          y1 = _result$blockBounds[3];\n\n      callback({\n        width: x1 - x0,\n        height: y1 - y0\n      });\n    }, {\n      metricsOnly: true\n    });\n  }\n\n  function parsePercent(str) {\n    var match = str.match(/^([\\d.]+)%$/);\n    var pct = match ? parseFloat(match[1]) : NaN;\n    return isNaN(pct) ? 0 : pct / 100;\n  }\n\n  function now() {\n    return (self.performance || Date).now();\n  } // Array-backed structure for a single line's glyphs data\n\n\n  function TextLine() {\n    this.data = [];\n  }\n\n  TextLine.prototype = {\n    width: 0,\n    isSoftWrapped: false,\n\n    get count() {\n      return Math.ceil(this.data.length / 4);\n    },\n\n    glyphAt: function glyphAt(i) {\n      var fly = TextLine.flyweight;\n      fly.data = this.data;\n      fly.index = i;\n      return fly;\n    },\n    splitAt: function splitAt(i) {\n      var newLine = new TextLine();\n      newLine.data = this.data.splice(i * 4);\n      return newLine;\n    }\n  };\n  TextLine.flyweight = ['glyphObj', 'x', 'width', 'charIndex'].reduce(function (obj, prop, i, all) {\n    Object.defineProperty(obj, prop, {\n      get: function get() {\n        return this.data[this.index * 4 + i];\n      },\n      set: function set(val) {\n        this.data[this.index * 4 + i] = val;\n      }\n    });\n    return obj;\n  }, {\n    data: null,\n    index: 0\n  });\n  return {\n    process: process,\n    measure: measure,\n    loadFont: loadFont\n  };\n}\n/**\r\n * Index for performing fast spatial searches of a glyph's line segments.\r\n * @return {{addLineSegment:function, findNearestSignedDistance:function}}\r\n */\n\n\nfunction createGlyphSegmentsIndex() {\n  var needsSort = false;\n  var segments = [];\n\n  function sortSegments() {\n    if (needsSort) {\n      // sort by maxX, this will let us short-circuit some loops below\n      segments.sort(function (a, b) {\n        return a.maxX - b.maxX;\n      });\n      needsSort = false;\n    }\n  }\n  /**\r\n   * Add a line segment to the index.\r\n   * @param x0\r\n   * @param y0\r\n   * @param x1\r\n   * @param y1\r\n   */\n\n\n  function addLineSegment(x0, y0, x1, y1) {\n    var segment = {\n      x0: x0,\n      y0: y0,\n      x1: x1,\n      y1: y1,\n      minX: Math.min(x0, x1),\n      minY: Math.min(y0, y1),\n      maxX: Math.max(x0, x1),\n      maxY: Math.max(y0, y1)\n    };\n    segments.push(segment);\n    needsSort = true;\n  }\n  /**\r\n   * For a given x/y, search the index for the closest line segment and return\r\n   * its signed distance. Negative = inside, positive = outside, zero = on edge\r\n   * @param x\r\n   * @param y\r\n   * @returns {number}\r\n   */\n\n\n  function findNearestSignedDistance(x, y) {\n    sortSegments();\n    var closestDistSq = Infinity;\n    var closestDist = Infinity;\n\n    for (var i = segments.length; i--;) {\n      var seg = segments[i];\n      if (seg.maxX + closestDist <= x) break; //sorting by maxX means no more can be closer, so we can short-circuit\n\n      if (x + closestDist > seg.minX && y - closestDist < seg.maxY && y + closestDist > seg.minY) {\n        var distSq = absSquareDistanceToLineSegment(x, y, seg.x0, seg.y0, seg.x1, seg.y1);\n\n        if (distSq < closestDistSq) {\n          closestDistSq = distSq;\n          closestDist = Math.sqrt(closestDistSq);\n        }\n      }\n    } // Flip to negative distance if inside the poly\n\n\n    if (isPointInPoly(x, y)) {\n      closestDist = -closestDist;\n    }\n\n    return closestDist;\n  } // Determine whether the given point lies inside or outside the glyph. Uses a simple\n  // ray casting algorithm using a ray pointing east from the point.\n\n\n  function isPointInPoly(x, y) {\n    sortSegments();\n    var inside = false;\n\n    for (var i = segments.length; i--;) {\n      var seg = segments[i];\n      if (seg.maxX <= x) break; //sorting by maxX means no more can cross, so we can short-circuit\n\n      if (seg.minY < y && seg.maxY > y) {\n        var intersects = seg.y0 > y !== seg.y1 > y && x < (seg.x1 - seg.x0) * (y - seg.y0) / (seg.y1 - seg.y0) + seg.x0;\n\n        if (intersects) {\n          inside = !inside;\n        }\n      }\n    }\n\n    return inside;\n  } // Find the absolute distance from a point to a line segment at closest approach\n\n\n  function absSquareDistanceToLineSegment(x, y, lineX0, lineY0, lineX1, lineY1) {\n    var ldx = lineX1 - lineX0;\n    var ldy = lineY1 - lineY0;\n    var lengthSq = ldx * ldx + ldy * ldy;\n    var t = lengthSq ? Math.max(0, Math.min(1, ((x - lineX0) * ldx + (y - lineY0) * ldy) / lengthSq)) : 0;\n    var dx = x - (lineX0 + t * ldx);\n    var dy = y - (lineY0 + t * ldy);\n    return dx * dx + dy * dy;\n  }\n\n  return {\n    addLineSegment: addLineSegment,\n    findNearestSignedDistance: findNearestSignedDistance\n  };\n} // Custom bundle of Typr.js (https://github.com/photopea/Typr.js) for use in troika-3d-text. \n// Original MIT license applies: https://github.com/photopea/Typr.js/blob/gh-pages/LICENSE\n\n\nfunction typrFactory() {\n  var window = self; // Begin Typr.js\n\n  var Typr = {};\n\n  Typr.parse = function (buff) {\n    var bin = Typr._bin;\n    var data = new Uint8Array(buff);\n    var tag = bin.readASCII(data, 0, 4);\n\n    if (tag == \"ttcf\") {\n      var offset = 4;\n      var majV = bin.readUshort(data, offset);\n      offset += 2;\n      var minV = bin.readUshort(data, offset);\n      offset += 2;\n      var numF = bin.readUint(data, offset);\n      offset += 4;\n      var fnts = [];\n\n      for (var i = 0; i < numF; i++) {\n        var foff = bin.readUint(data, offset);\n        offset += 4;\n        fnts.push(Typr._readFont(data, foff));\n      }\n\n      return fnts;\n    } else return [Typr._readFont(data, 0)];\n  };\n\n  Typr._readFont = function (data, offset) {\n    var bin = Typr._bin;\n    var ooff = offset;\n    var sfnt_version = bin.readFixed(data, offset);\n    offset += 4;\n    var numTables = bin.readUshort(data, offset);\n    offset += 2;\n    var searchRange = bin.readUshort(data, offset);\n    offset += 2;\n    var entrySelector = bin.readUshort(data, offset);\n    offset += 2;\n    var rangeShift = bin.readUshort(data, offset);\n    offset += 2;\n    var tags = [\"cmap\", \"head\", \"hhea\", \"maxp\", \"hmtx\", \"name\", \"OS/2\", \"post\", //\"cvt\",\n    //\"fpgm\",\n    \"loca\", \"glyf\", \"kern\", //\"prep\"\n    //\"gasp\"\n    \"CFF \", \"GPOS\", \"GSUB\", \"SVG \" //\"VORG\",\n    ];\n    var obj = {\n      _data: data,\n      _offset: ooff\n    }; //console.log(sfnt_version, numTables, searchRange, entrySelector, rangeShift);\n\n    var tabs = {};\n\n    for (var i = 0; i < numTables; i++) {\n      var tag = bin.readASCII(data, offset, 4);\n      offset += 4;\n      var checkSum = bin.readUint(data, offset);\n      offset += 4;\n      var toffset = bin.readUint(data, offset);\n      offset += 4;\n      var length = bin.readUint(data, offset);\n      offset += 4;\n      tabs[tag] = {\n        offset: toffset,\n        length: length\n      }; //if(tags.indexOf(tag)==-1) console.log(\"unknown tag\", tag, length);\n    }\n\n    for (var i = 0; i < tags.length; i++) {\n      var t = tags[i]; //console.log(t);\n      //if(tabs[t]) console.log(t, tabs[t].offset, tabs[t].length);\n\n      if (tabs[t]) obj[t.trim()] = Typr[t.trim()].parse(data, tabs[t].offset, tabs[t].length, obj);\n    }\n\n    return obj;\n  };\n\n  Typr._tabOffset = function (data, tab, foff) {\n    var bin = Typr._bin;\n    var numTables = bin.readUshort(data, foff + 4);\n    var offset = foff + 12;\n\n    for (var i = 0; i < numTables; i++) {\n      var tag = bin.readASCII(data, offset, 4);\n      offset += 4;\n      var checkSum = bin.readUint(data, offset);\n      offset += 4;\n      var toffset = bin.readUint(data, offset);\n      offset += 4;\n      var length = bin.readUint(data, offset);\n      offset += 4;\n      if (tag == tab) return toffset;\n    }\n\n    return 0;\n  };\n\n  Typr._bin = {\n    readFixed: function readFixed(data, o) {\n      return (data[o] << 8 | data[o + 1]) + (data[o + 2] << 8 | data[o + 3]) / (256 * 256 + 4);\n    },\n    readF2dot14: function readF2dot14(data, o) {\n      var num = Typr._bin.readShort(data, o);\n\n      return num / 16384;\n    },\n    readInt: function readInt(buff, p) {\n      //if(p>=buff.length) throw \"error\";\n      var a = Typr._bin.t.uint8;\n      a[0] = buff[p + 3];\n      a[1] = buff[p + 2];\n      a[2] = buff[p + 1];\n      a[3] = buff[p];\n      return Typr._bin.t.int32[0];\n    },\n    readInt8: function readInt8(buff, p) {\n      //if(p>=buff.length) throw \"error\";\n      var a = Typr._bin.t.uint8;\n      a[0] = buff[p];\n      return Typr._bin.t.int8[0];\n    },\n    readShort: function readShort(buff, p) {\n      //if(p>=buff.length) throw \"error\";\n      var a = Typr._bin.t.uint8;\n      a[1] = buff[p];\n      a[0] = buff[p + 1];\n      return Typr._bin.t.int16[0];\n    },\n    readUshort: function readUshort(buff, p) {\n      //if(p>=buff.length) throw \"error\";\n      return buff[p] << 8 | buff[p + 1];\n    },\n    readUshorts: function readUshorts(buff, p, len) {\n      var arr = [];\n\n      for (var i = 0; i < len; i++) {\n        arr.push(Typr._bin.readUshort(buff, p + i * 2));\n      }\n\n      return arr;\n    },\n    readUint: function readUint(buff, p) {\n      //if(p>=buff.length) throw \"error\";\n      var a = Typr._bin.t.uint8;\n      a[3] = buff[p];\n      a[2] = buff[p + 1];\n      a[1] = buff[p + 2];\n      a[0] = buff[p + 3];\n      return Typr._bin.t.uint32[0];\n    },\n    readUint64: function readUint64(buff, p) {\n      //if(p>=buff.length) throw \"error\";\n      return Typr._bin.readUint(buff, p) * (0xffffffff + 1) + Typr._bin.readUint(buff, p + 4);\n    },\n    readASCII: function readASCII(buff, p, l) // l : length in Characters (not Bytes)\n    {\n      //if(p>=buff.length) throw \"error\";\n      var s = \"\";\n\n      for (var i = 0; i < l; i++) {\n        s += String.fromCharCode(buff[p + i]);\n      }\n\n      return s;\n    },\n    readUnicode: function readUnicode(buff, p, l) {\n      //if(p>=buff.length) throw \"error\";\n      var s = \"\";\n\n      for (var i = 0; i < l; i++) {\n        var c = buff[p++] << 8 | buff[p++];\n        s += String.fromCharCode(c);\n      }\n\n      return s;\n    },\n    _tdec: window[\"TextDecoder\"] ? new window[\"TextDecoder\"]() : null,\n    readUTF8: function readUTF8(buff, p, l) {\n      var tdec = Typr._bin._tdec;\n      if (tdec && p == 0 && l == buff.length) return tdec[\"decode\"](buff);\n      return Typr._bin.readASCII(buff, p, l);\n    },\n    readBytes: function readBytes(buff, p, l) {\n      //if(p>=buff.length) throw \"error\";\n      var arr = [];\n\n      for (var i = 0; i < l; i++) {\n        arr.push(buff[p + i]);\n      }\n\n      return arr;\n    },\n    readASCIIArray: function readASCIIArray(buff, p, l) // l : length in Characters (not Bytes)\n    {\n      //if(p>=buff.length) throw \"error\";\n      var s = [];\n\n      for (var i = 0; i < l; i++) {\n        s.push(String.fromCharCode(buff[p + i]));\n      }\n\n      return s;\n    }\n  };\n  Typr._bin.t = {\n    buff: new ArrayBuffer(8)\n  };\n  Typr._bin.t.int8 = new Int8Array(Typr._bin.t.buff);\n  Typr._bin.t.uint8 = new Uint8Array(Typr._bin.t.buff);\n  Typr._bin.t.int16 = new Int16Array(Typr._bin.t.buff);\n  Typr._bin.t.uint16 = new Uint16Array(Typr._bin.t.buff);\n  Typr._bin.t.int32 = new Int32Array(Typr._bin.t.buff);\n  Typr._bin.t.uint32 = new Uint32Array(Typr._bin.t.buff); // OpenType Layout Common Table Formats\n\n  Typr._lctf = {};\n\n  Typr._lctf.parse = function (data, offset, length, font, subt) {\n    var bin = Typr._bin;\n    var obj = {};\n    var offset0 = offset;\n    var tableVersion = bin.readFixed(data, offset);\n    offset += 4;\n    var offScriptList = bin.readUshort(data, offset);\n    offset += 2;\n    var offFeatureList = bin.readUshort(data, offset);\n    offset += 2;\n    var offLookupList = bin.readUshort(data, offset);\n    offset += 2;\n    obj.scriptList = Typr._lctf.readScriptList(data, offset0 + offScriptList);\n    obj.featureList = Typr._lctf.readFeatureList(data, offset0 + offFeatureList);\n    obj.lookupList = Typr._lctf.readLookupList(data, offset0 + offLookupList, subt);\n    return obj;\n  };\n\n  Typr._lctf.readLookupList = function (data, offset, subt) {\n    var bin = Typr._bin;\n    var offset0 = offset;\n    var obj = [];\n    var count = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < count; i++) {\n      var noff = bin.readUshort(data, offset);\n      offset += 2;\n\n      var lut = Typr._lctf.readLookupTable(data, offset0 + noff, subt);\n\n      obj.push(lut);\n    }\n\n    return obj;\n  };\n\n  Typr._lctf.readLookupTable = function (data, offset, subt) {\n    //console.log(\"Parsing lookup table\", offset);\n    var bin = Typr._bin;\n    var offset0 = offset;\n    var obj = {\n      tabs: []\n    };\n    obj.ltype = bin.readUshort(data, offset);\n    offset += 2;\n    obj.flag = bin.readUshort(data, offset);\n    offset += 2;\n    var cnt = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < cnt; i++) {\n      var noff = bin.readUshort(data, offset);\n      offset += 2;\n      var tab = subt(data, obj.ltype, offset0 + noff); //console.log(obj.type, tab);\n\n      obj.tabs.push(tab);\n    }\n\n    return obj;\n  };\n\n  Typr._lctf.numOfOnes = function (n) {\n    var num = 0;\n\n    for (var i = 0; i < 32; i++) {\n      if ((n >>> i & 1) != 0) num++;\n    }\n\n    return num;\n  };\n\n  Typr._lctf.readClassDef = function (data, offset) {\n    var bin = Typr._bin;\n    var obj = [];\n    var format = bin.readUshort(data, offset);\n    offset += 2;\n\n    if (format == 1) {\n      var startGlyph = bin.readUshort(data, offset);\n      offset += 2;\n      var glyphCount = bin.readUshort(data, offset);\n      offset += 2;\n\n      for (var i = 0; i < glyphCount; i++) {\n        obj.push(startGlyph + i);\n        obj.push(startGlyph + i);\n        obj.push(bin.readUshort(data, offset));\n        offset += 2;\n      }\n    }\n\n    if (format == 2) {\n      var count = bin.readUshort(data, offset);\n      offset += 2;\n\n      for (var i = 0; i < count; i++) {\n        obj.push(bin.readUshort(data, offset));\n        offset += 2;\n        obj.push(bin.readUshort(data, offset));\n        offset += 2;\n        obj.push(bin.readUshort(data, offset));\n        offset += 2;\n      }\n    }\n\n    return obj;\n  };\n\n  Typr._lctf.getInterval = function (tab, val) {\n    for (var i = 0; i < tab.length; i += 3) {\n      var start = tab[i],\n          end = tab[i + 1],\n          index = tab[i + 2];\n      if (start <= val && val <= end) return i;\n    }\n\n    return -1;\n  };\n\n  Typr._lctf.readCoverage = function (data, offset) {\n    var bin = Typr._bin;\n    var cvg = {};\n    cvg.fmt = bin.readUshort(data, offset);\n    offset += 2;\n    var count = bin.readUshort(data, offset);\n    offset += 2; //console.log(\"parsing coverage\", offset-4, format, count);\n\n    if (cvg.fmt == 1) cvg.tab = bin.readUshorts(data, offset, count);\n    if (cvg.fmt == 2) cvg.tab = bin.readUshorts(data, offset, count * 3);\n    return cvg;\n  };\n\n  Typr._lctf.coverageIndex = function (cvg, val) {\n    var tab = cvg.tab;\n    if (cvg.fmt == 1) return tab.indexOf(val);\n\n    if (cvg.fmt == 2) {\n      var ind = Typr._lctf.getInterval(tab, val);\n\n      if (ind != -1) return tab[ind + 2] + (val - tab[ind]);\n    }\n\n    return -1;\n  };\n\n  Typr._lctf.readFeatureList = function (data, offset) {\n    var bin = Typr._bin;\n    var offset0 = offset;\n    var obj = [];\n    var count = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < count; i++) {\n      var tag = bin.readASCII(data, offset, 4);\n      offset += 4;\n      var noff = bin.readUshort(data, offset);\n      offset += 2;\n      obj.push({\n        tag: tag.trim(),\n        tab: Typr._lctf.readFeatureTable(data, offset0 + noff)\n      });\n    }\n\n    return obj;\n  };\n\n  Typr._lctf.readFeatureTable = function (data, offset) {\n    var bin = Typr._bin;\n    var featureParams = bin.readUshort(data, offset);\n    offset += 2; // = 0\n\n    var lookupCount = bin.readUshort(data, offset);\n    offset += 2;\n    var indices = [];\n\n    for (var i = 0; i < lookupCount; i++) {\n      indices.push(bin.readUshort(data, offset + 2 * i));\n    }\n\n    return indices;\n  };\n\n  Typr._lctf.readScriptList = function (data, offset) {\n    var bin = Typr._bin;\n    var offset0 = offset;\n    var obj = {};\n    var count = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < count; i++) {\n      var tag = bin.readASCII(data, offset, 4);\n      offset += 4;\n      var noff = bin.readUshort(data, offset);\n      offset += 2;\n      obj[tag.trim()] = Typr._lctf.readScriptTable(data, offset0 + noff);\n    }\n\n    return obj;\n  };\n\n  Typr._lctf.readScriptTable = function (data, offset) {\n    var bin = Typr._bin;\n    var offset0 = offset;\n    var obj = {};\n    var defLangSysOff = bin.readUshort(data, offset);\n    offset += 2;\n    obj.default = Typr._lctf.readLangSysTable(data, offset0 + defLangSysOff);\n    var langSysCount = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < langSysCount; i++) {\n      var tag = bin.readASCII(data, offset, 4);\n      offset += 4;\n      var langSysOff = bin.readUshort(data, offset);\n      offset += 2;\n      obj[tag.trim()] = Typr._lctf.readLangSysTable(data, offset0 + langSysOff);\n    }\n\n    return obj;\n  };\n\n  Typr._lctf.readLangSysTable = function (data, offset) {\n    var bin = Typr._bin;\n    var obj = {};\n    var lookupOrder = bin.readUshort(data, offset);\n    offset += 2; //if(lookupOrder!=0)  throw \"lookupOrder not 0\";\n\n    obj.reqFeature = bin.readUshort(data, offset);\n    offset += 2; //if(obj.reqFeature != 0xffff) throw \"reqFeatureIndex != 0xffff\";\n    //console.log(lookupOrder, obj.reqFeature);\n\n    var featureCount = bin.readUshort(data, offset);\n    offset += 2;\n    obj.features = bin.readUshorts(data, offset, featureCount);\n    return obj;\n  };\n\n  Typr.CFF = {};\n\n  Typr.CFF.parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    data = new Uint8Array(data.buffer, offset, length);\n    offset = 0; // Header\n\n    var major = data[offset];\n    offset++;\n    var minor = data[offset];\n    offset++;\n    var hdrSize = data[offset];\n    offset++;\n    var offsize = data[offset];\n    offset++; //console.log(major, minor, hdrSize, offsize);\n    // Name INDEX\n\n    var ninds = [];\n    offset = Typr.CFF.readIndex(data, offset, ninds);\n    var names = [];\n\n    for (var i = 0; i < ninds.length - 1; i++) {\n      names.push(bin.readASCII(data, offset + ninds[i], ninds[i + 1] - ninds[i]));\n    }\n\n    offset += ninds[ninds.length - 1]; // Top DICT INDEX\n\n    var tdinds = [];\n    offset = Typr.CFF.readIndex(data, offset, tdinds); //console.log(tdinds);\n    // Top DICT Data\n\n    var topDicts = [];\n\n    for (var i = 0; i < tdinds.length - 1; i++) {\n      topDicts.push(Typr.CFF.readDict(data, offset + tdinds[i], offset + tdinds[i + 1]));\n    }\n\n    offset += tdinds[tdinds.length - 1];\n    var topdict = topDicts[0]; //console.log(topdict);\n    // String INDEX\n\n    var sinds = [];\n    offset = Typr.CFF.readIndex(data, offset, sinds); // String Data\n\n    var strings = [];\n\n    for (var i = 0; i < sinds.length - 1; i++) {\n      strings.push(bin.readASCII(data, offset + sinds[i], sinds[i + 1] - sinds[i]));\n    }\n\n    offset += sinds[sinds.length - 1]; // Global Subr INDEX  (subroutines)\t\t\n\n    Typr.CFF.readSubrs(data, offset, topdict); // charstrings\n\n    if (topdict.CharStrings) {\n      offset = topdict.CharStrings;\n      var sinds = [];\n      offset = Typr.CFF.readIndex(data, offset, sinds);\n      var cstr = [];\n\n      for (var i = 0; i < sinds.length - 1; i++) {\n        cstr.push(bin.readBytes(data, offset + sinds[i], sinds[i + 1] - sinds[i]));\n      } //offset += sinds[sinds.length-1];\n\n\n      topdict.CharStrings = cstr; //console.log(topdict.CharStrings);\n    } // CID font\n\n\n    if (topdict.ROS) {\n      offset = topdict.FDArray;\n      var fdind = [];\n      offset = Typr.CFF.readIndex(data, offset, fdind);\n      topdict.FDArray = [];\n\n      for (var i = 0; i < fdind.length - 1; i++) {\n        var dict = Typr.CFF.readDict(data, offset + fdind[i], offset + fdind[i + 1]);\n\n        Typr.CFF._readFDict(data, dict, strings);\n\n        topdict.FDArray.push(dict);\n      }\n\n      offset += fdind[fdind.length - 1];\n      offset = topdict.FDSelect;\n      topdict.FDSelect = [];\n      var fmt = data[offset];\n      offset++;\n\n      if (fmt == 3) {\n        var rns = bin.readUshort(data, offset);\n        offset += 2;\n\n        for (var i = 0; i < rns + 1; i++) {\n          topdict.FDSelect.push(bin.readUshort(data, offset), data[offset + 2]);\n          offset += 3;\n        }\n      } else throw fmt;\n    } // Encoding\n\n\n    if (topdict.Encoding) topdict.Encoding = Typr.CFF.readEncoding(data, topdict.Encoding, topdict.CharStrings.length); // charset\n\n    if (topdict.charset) topdict.charset = Typr.CFF.readCharset(data, topdict.charset, topdict.CharStrings.length);\n\n    Typr.CFF._readFDict(data, topdict, strings);\n\n    return topdict;\n  };\n\n  Typr.CFF._readFDict = function (data, dict, ss) {\n    var offset;\n\n    if (dict.Private) {\n      offset = dict.Private[1];\n      dict.Private = Typr.CFF.readDict(data, offset, offset + dict.Private[0]);\n      if (dict.Private.Subrs) Typr.CFF.readSubrs(data, offset + dict.Private.Subrs, dict.Private);\n    }\n\n    for (var p in dict) {\n      if ([\"FamilyName\", \"FontName\", \"FullName\", \"Notice\", \"version\", \"Copyright\"].indexOf(p) != -1) dict[p] = ss[dict[p] - 426 + 35];\n    }\n  };\n\n  Typr.CFF.readSubrs = function (data, offset, obj) {\n    var bin = Typr._bin;\n    var gsubinds = [];\n    offset = Typr.CFF.readIndex(data, offset, gsubinds);\n    var bias,\n        nSubrs = gsubinds.length;\n    if (nSubrs < 1240) bias = 107;else if (nSubrs < 33900) bias = 1131;else bias = 32768;\n    obj.Bias = bias;\n    obj.Subrs = [];\n\n    for (var i = 0; i < gsubinds.length - 1; i++) {\n      obj.Subrs.push(bin.readBytes(data, offset + gsubinds[i], gsubinds[i + 1] - gsubinds[i]));\n    } //offset += gsubinds[gsubinds.length-1];\n\n  };\n\n  Typr.CFF.tableSE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 0, 115, 116, 117, 118, 119, 120, 121, 122, 0, 123, 0, 124, 125, 126, 127, 128, 129, 130, 131, 0, 132, 133, 0, 134, 135, 136, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 139, 0, 0, 0, 0, 140, 141, 142, 143, 0, 0, 0, 0, 0, 144, 0, 0, 0, 145, 0, 0, 146, 147, 148, 149, 0, 0, 0, 0];\n\n  Typr.CFF.glyphByUnicode = function (cff, code) {\n    for (var i = 0; i < cff.charset.length; i++) {\n      if (cff.charset[i] == code) return i;\n    }\n\n    return -1;\n  };\n\n  Typr.CFF.glyphBySE = function (cff, charcode) // glyph by standard encoding\n  {\n    if (charcode < 0 || charcode > 255) return -1;\n    return Typr.CFF.glyphByUnicode(cff, Typr.CFF.tableSE[charcode]);\n  };\n\n  Typr.CFF.readEncoding = function (data, offset, num) {\n    var bin = Typr._bin;\n    var array = ['.notdef'];\n    var format = data[offset];\n    offset++; //console.log(\"Encoding\");\n    //console.log(format);\n\n    if (format == 0) {\n      var nCodes = data[offset];\n      offset++;\n\n      for (var i = 0; i < nCodes; i++) {\n        array.push(data[offset + i]);\n      }\n    }\n    /*\r\n    else if(format==1 || format==2)\r\n    {\r\n    \twhile(charset.length<num)\r\n    \t{\r\n    \t\tvar first = bin.readUshort(data, offset);  offset+=2;\r\n    \t\tvar nLeft=0;\r\n    \t\tif(format==1) {  nLeft = data[offset];  offset++;  }\r\n    \t\telse          {  nLeft = bin.readUshort(data, offset);  offset+=2;  }\r\n    \t\tfor(var i=0; i<=nLeft; i++)  {  charset.push(first);  first++;  }\r\n    \t}\r\n    }\r\n    */\n    else throw \"error: unknown encoding format: \" + format;\n\n    return array;\n  };\n\n  Typr.CFF.readCharset = function (data, offset, num) {\n    var bin = Typr._bin;\n    var charset = ['.notdef'];\n    var format = data[offset];\n    offset++;\n\n    if (format == 0) {\n      for (var i = 0; i < num; i++) {\n        var first = bin.readUshort(data, offset);\n        offset += 2;\n        charset.push(first);\n      }\n    } else if (format == 1 || format == 2) {\n      while (charset.length < num) {\n        var first = bin.readUshort(data, offset);\n        offset += 2;\n        var nLeft = 0;\n\n        if (format == 1) {\n          nLeft = data[offset];\n          offset++;\n        } else {\n          nLeft = bin.readUshort(data, offset);\n          offset += 2;\n        }\n\n        for (var i = 0; i <= nLeft; i++) {\n          charset.push(first);\n          first++;\n        }\n      }\n    } else throw \"error: format: \" + format;\n\n    return charset;\n  };\n\n  Typr.CFF.readIndex = function (data, offset, inds) {\n    var bin = Typr._bin;\n    var count = bin.readUshort(data, offset) + 1;\n    offset += 2;\n    var offsize = data[offset];\n    offset++;\n    if (offsize == 1) for (var i = 0; i < count; i++) {\n      inds.push(data[offset + i]);\n    } else if (offsize == 2) for (var i = 0; i < count; i++) {\n      inds.push(bin.readUshort(data, offset + i * 2));\n    } else if (offsize == 3) for (var i = 0; i < count; i++) {\n      inds.push(bin.readUint(data, offset + i * 3 - 1) & 0x00ffffff);\n    } else if (count != 1) throw \"unsupported offset size: \" + offsize + \", count: \" + count;\n    offset += count * offsize;\n    return offset - 1;\n  };\n\n  Typr.CFF.getCharString = function (data, offset, o) {\n    var bin = Typr._bin;\n    var b0 = data[offset],\n        b1 = data[offset + 1],\n        b2 = data[offset + 2],\n        b3 = data[offset + 3],\n        b4 = data[offset + 4];\n    var vs = 1;\n    var op = null,\n        val = null; // operand\n\n    if (b0 <= 20) {\n      op = b0;\n      vs = 1;\n    }\n\n    if (b0 == 12) {\n      op = b0 * 100 + b1;\n      vs = 2;\n    } //if(b0==19 || b0==20) { op = b0/*+\" \"+b1*/;  vs=2; }\n\n\n    if (21 <= b0 && b0 <= 27) {\n      op = b0;\n      vs = 1;\n    }\n\n    if (b0 == 28) {\n      val = bin.readShort(data, offset + 1);\n      vs = 3;\n    }\n\n    if (29 <= b0 && b0 <= 31) {\n      op = b0;\n      vs = 1;\n    }\n\n    if (32 <= b0 && b0 <= 246) {\n      val = b0 - 139;\n      vs = 1;\n    }\n\n    if (247 <= b0 && b0 <= 250) {\n      val = (b0 - 247) * 256 + b1 + 108;\n      vs = 2;\n    }\n\n    if (251 <= b0 && b0 <= 254) {\n      val = -(b0 - 251) * 256 - b1 - 108;\n      vs = 2;\n    }\n\n    if (b0 == 255) {\n      val = bin.readInt(data, offset + 1) / 0xffff;\n      vs = 5;\n    }\n\n    o.val = val != null ? val : \"o\" + op;\n    o.size = vs;\n  };\n\n  Typr.CFF.readCharString = function (data, offset, length) {\n    var end = offset + length;\n    var bin = Typr._bin;\n    var arr = [];\n\n    while (offset < end) {\n      var b0 = data[offset],\n          b1 = data[offset + 1],\n          b2 = data[offset + 2],\n          b3 = data[offset + 3],\n          b4 = data[offset + 4];\n      var vs = 1;\n      var op = null,\n          val = null; // operand\n\n      if (b0 <= 20) {\n        op = b0;\n        vs = 1;\n      }\n\n      if (b0 == 12) {\n        op = b0 * 100 + b1;\n        vs = 2;\n      }\n\n      if (b0 == 19 || b0 == 20) {\n        op = b0\n        /*+\" \"+b1*/\n        ;\n        vs = 2;\n      }\n\n      if (21 <= b0 && b0 <= 27) {\n        op = b0;\n        vs = 1;\n      }\n\n      if (b0 == 28) {\n        val = bin.readShort(data, offset + 1);\n        vs = 3;\n      }\n\n      if (29 <= b0 && b0 <= 31) {\n        op = b0;\n        vs = 1;\n      }\n\n      if (32 <= b0 && b0 <= 246) {\n        val = b0 - 139;\n        vs = 1;\n      }\n\n      if (247 <= b0 && b0 <= 250) {\n        val = (b0 - 247) * 256 + b1 + 108;\n        vs = 2;\n      }\n\n      if (251 <= b0 && b0 <= 254) {\n        val = -(b0 - 251) * 256 - b1 - 108;\n        vs = 2;\n      }\n\n      if (b0 == 255) {\n        val = bin.readInt(data, offset + 1) / 0xffff;\n        vs = 5;\n      }\n\n      arr.push(val != null ? val : \"o\" + op);\n      offset += vs; //var cv = arr[arr.length-1];\n      //if(cv==undefined) throw \"error\";\n      //console.log()\n    }\n\n    return arr;\n  };\n\n  Typr.CFF.readDict = function (data, offset, end) {\n    var bin = Typr._bin; //var dict = [];\n\n    var dict = {};\n    var carr = [];\n\n    while (offset < end) {\n      var b0 = data[offset],\n          b1 = data[offset + 1],\n          b2 = data[offset + 2],\n          b3 = data[offset + 3],\n          b4 = data[offset + 4];\n      var vs = 1;\n      var key = null,\n          val = null; // operand\n\n      if (b0 == 28) {\n        val = bin.readShort(data, offset + 1);\n        vs = 3;\n      }\n\n      if (b0 == 29) {\n        val = bin.readInt(data, offset + 1);\n        vs = 5;\n      }\n\n      if (32 <= b0 && b0 <= 246) {\n        val = b0 - 139;\n        vs = 1;\n      }\n\n      if (247 <= b0 && b0 <= 250) {\n        val = (b0 - 247) * 256 + b1 + 108;\n        vs = 2;\n      }\n\n      if (251 <= b0 && b0 <= 254) {\n        val = -(b0 - 251) * 256 - b1 - 108;\n        vs = 2;\n      }\n\n      if (b0 == 255) {\n        val = bin.readInt(data, offset + 1) / 0xffff;\n        vs = 5;\n        throw \"unknown number\";\n      }\n\n      if (b0 == 30) {\n        var nibs = [];\n        vs = 1;\n\n        while (true) {\n          var b = data[offset + vs];\n          vs++;\n          var nib0 = b >> 4,\n              nib1 = b & 0xf;\n          if (nib0 != 0xf) nibs.push(nib0);\n          if (nib1 != 0xf) nibs.push(nib1);\n          if (nib1 == 0xf) break;\n        }\n\n        var s = \"\";\n        var chars = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \".\", \"e\", \"e-\", \"reserved\", \"-\", \"endOfNumber\"];\n\n        for (var i = 0; i < nibs.length; i++) {\n          s += chars[nibs[i]];\n        } //console.log(nibs);\n\n\n        val = parseFloat(s);\n      }\n\n      if (b0 <= 21) // operator\n        {\n          var keys = [\"version\", \"Notice\", \"FullName\", \"FamilyName\", \"Weight\", \"FontBBox\", \"BlueValues\", \"OtherBlues\", \"FamilyBlues\", \"FamilyOtherBlues\", \"StdHW\", \"StdVW\", \"escape\", \"UniqueID\", \"XUID\", \"charset\", \"Encoding\", \"CharStrings\", \"Private\", \"Subrs\", \"defaultWidthX\", \"nominalWidthX\"];\n          key = keys[b0];\n          vs = 1;\n\n          if (b0 == 12) {\n            var keys = [\"Copyright\", \"isFixedPitch\", \"ItalicAngle\", \"UnderlinePosition\", \"UnderlineThickness\", \"PaintType\", \"CharstringType\", \"FontMatrix\", \"StrokeWidth\", \"BlueScale\", \"BlueShift\", \"BlueFuzz\", \"StemSnapH\", \"StemSnapV\", \"ForceBold\", 0, 0, \"LanguageGroup\", \"ExpansionFactor\", \"initialRandomSeed\", \"SyntheticBase\", \"PostScript\", \"BaseFontName\", \"BaseFontBlend\", 0, 0, 0, 0, 0, 0, \"ROS\", \"CIDFontVersion\", \"CIDFontRevision\", \"CIDFontType\", \"CIDCount\", \"UIDBase\", \"FDArray\", \"FDSelect\", \"FontName\"];\n            key = keys[b1];\n            vs = 2;\n          }\n        }\n\n      if (key != null) {\n        dict[key] = carr.length == 1 ? carr[0] : carr;\n        carr = [];\n      } else carr.push(val);\n\n      offset += vs;\n    }\n\n    return dict;\n  };\n\n  Typr.cmap = {};\n\n  Typr.cmap.parse = function (data, offset, length) {\n    data = new Uint8Array(data.buffer, offset, length);\n    offset = 0;\n    var bin = Typr._bin;\n    var obj = {};\n    var version = bin.readUshort(data, offset);\n    offset += 2;\n    var numTables = bin.readUshort(data, offset);\n    offset += 2; //console.log(version, numTables);\n\n    var offs = [];\n    obj.tables = [];\n\n    for (var i = 0; i < numTables; i++) {\n      var platformID = bin.readUshort(data, offset);\n      offset += 2;\n      var encodingID = bin.readUshort(data, offset);\n      offset += 2;\n      var noffset = bin.readUint(data, offset);\n      offset += 4;\n      var id = \"p\" + platformID + \"e\" + encodingID; //console.log(\"cmap subtable\", platformID, encodingID, noffset);\n\n      var tind = offs.indexOf(noffset);\n\n      if (tind == -1) {\n        tind = obj.tables.length;\n        var subt;\n        offs.push(noffset);\n        var format = bin.readUshort(data, noffset);\n        if (format == 0) subt = Typr.cmap.parse0(data, noffset);else if (format == 4) subt = Typr.cmap.parse4(data, noffset);else if (format == 6) subt = Typr.cmap.parse6(data, noffset);else if (format == 12) subt = Typr.cmap.parse12(data, noffset);else console.log(\"unknown format: \" + format, platformID, encodingID, noffset);\n        obj.tables.push(subt);\n      }\n\n      if (obj[id] != null) throw \"multiple tables for one platform+encoding\";\n      obj[id] = tind;\n    }\n\n    return obj;\n  };\n\n  Typr.cmap.parse0 = function (data, offset) {\n    var bin = Typr._bin;\n    var obj = {};\n    obj.format = bin.readUshort(data, offset);\n    offset += 2;\n    var len = bin.readUshort(data, offset);\n    offset += 2;\n    var lang = bin.readUshort(data, offset);\n    offset += 2;\n    obj.map = [];\n\n    for (var i = 0; i < len - 6; i++) {\n      obj.map.push(data[offset + i]);\n    }\n\n    return obj;\n  };\n\n  Typr.cmap.parse4 = function (data, offset) {\n    var bin = Typr._bin;\n    var offset0 = offset;\n    var obj = {};\n    obj.format = bin.readUshort(data, offset);\n    offset += 2;\n    var length = bin.readUshort(data, offset);\n    offset += 2;\n    var language = bin.readUshort(data, offset);\n    offset += 2;\n    var segCountX2 = bin.readUshort(data, offset);\n    offset += 2;\n    var segCount = segCountX2 / 2;\n    obj.searchRange = bin.readUshort(data, offset);\n    offset += 2;\n    obj.entrySelector = bin.readUshort(data, offset);\n    offset += 2;\n    obj.rangeShift = bin.readUshort(data, offset);\n    offset += 2;\n    obj.endCount = bin.readUshorts(data, offset, segCount);\n    offset += segCount * 2;\n    offset += 2;\n    obj.startCount = bin.readUshorts(data, offset, segCount);\n    offset += segCount * 2;\n    obj.idDelta = [];\n\n    for (var i = 0; i < segCount; i++) {\n      obj.idDelta.push(bin.readShort(data, offset));\n      offset += 2;\n    }\n\n    obj.idRangeOffset = bin.readUshorts(data, offset, segCount);\n    offset += segCount * 2;\n    obj.glyphIdArray = [];\n\n    while (offset < offset0 + length) {\n      obj.glyphIdArray.push(bin.readUshort(data, offset));\n      offset += 2;\n    }\n\n    return obj;\n  };\n\n  Typr.cmap.parse6 = function (data, offset) {\n    var bin = Typr._bin;\n    var obj = {};\n    obj.format = bin.readUshort(data, offset);\n    offset += 2;\n    var length = bin.readUshort(data, offset);\n    offset += 2;\n    var language = bin.readUshort(data, offset);\n    offset += 2;\n    obj.firstCode = bin.readUshort(data, offset);\n    offset += 2;\n    var entryCount = bin.readUshort(data, offset);\n    offset += 2;\n    obj.glyphIdArray = [];\n\n    for (var i = 0; i < entryCount; i++) {\n      obj.glyphIdArray.push(bin.readUshort(data, offset));\n      offset += 2;\n    }\n\n    return obj;\n  };\n\n  Typr.cmap.parse12 = function (data, offset) {\n    var bin = Typr._bin;\n    var obj = {};\n    obj.format = bin.readUshort(data, offset);\n    offset += 2;\n    offset += 2;\n    var length = bin.readUint(data, offset);\n    offset += 4;\n    var lang = bin.readUint(data, offset);\n    offset += 4;\n    var nGroups = bin.readUint(data, offset);\n    offset += 4;\n    obj.groups = [];\n\n    for (var i = 0; i < nGroups; i++) {\n      var off = offset + i * 12;\n      var startCharCode = bin.readUint(data, off + 0);\n      var endCharCode = bin.readUint(data, off + 4);\n      var startGlyphID = bin.readUint(data, off + 8);\n      obj.groups.push([startCharCode, endCharCode, startGlyphID]);\n    }\n\n    return obj;\n  };\n\n  Typr.glyf = {};\n\n  Typr.glyf.parse = function (data, offset, length, font) {\n    var obj = [];\n\n    for (var g = 0; g < font.maxp.numGlyphs; g++) {\n      obj.push(null);\n    }\n\n    return obj;\n  };\n\n  Typr.glyf._parseGlyf = function (font, g) {\n    var bin = Typr._bin;\n    var data = font._data;\n    var offset = Typr._tabOffset(data, \"glyf\", font._offset) + font.loca[g];\n    if (font.loca[g] == font.loca[g + 1]) return null;\n    var gl = {};\n    gl.noc = bin.readShort(data, offset);\n    offset += 2; // number of contours\n\n    gl.xMin = bin.readShort(data, offset);\n    offset += 2;\n    gl.yMin = bin.readShort(data, offset);\n    offset += 2;\n    gl.xMax = bin.readShort(data, offset);\n    offset += 2;\n    gl.yMax = bin.readShort(data, offset);\n    offset += 2;\n    if (gl.xMin >= gl.xMax || gl.yMin >= gl.yMax) return null;\n\n    if (gl.noc > 0) {\n      gl.endPts = [];\n\n      for (var i = 0; i < gl.noc; i++) {\n        gl.endPts.push(bin.readUshort(data, offset));\n        offset += 2;\n      }\n\n      var instructionLength = bin.readUshort(data, offset);\n      offset += 2;\n      if (data.length - offset < instructionLength) return null;\n      gl.instructions = bin.readBytes(data, offset, instructionLength);\n      offset += instructionLength;\n      var crdnum = gl.endPts[gl.noc - 1] + 1;\n      gl.flags = [];\n\n      for (var i = 0; i < crdnum; i++) {\n        var flag = data[offset];\n        offset++;\n        gl.flags.push(flag);\n\n        if ((flag & 8) != 0) {\n          var rep = data[offset];\n          offset++;\n\n          for (var j = 0; j < rep; j++) {\n            gl.flags.push(flag);\n            i++;\n          }\n        }\n      }\n\n      gl.xs = [];\n\n      for (var i = 0; i < crdnum; i++) {\n        var i8 = (gl.flags[i] & 2) != 0,\n            same = (gl.flags[i] & 16) != 0;\n\n        if (i8) {\n          gl.xs.push(same ? data[offset] : -data[offset]);\n          offset++;\n        } else {\n          if (same) gl.xs.push(0);else {\n            gl.xs.push(bin.readShort(data, offset));\n            offset += 2;\n          }\n        }\n      }\n\n      gl.ys = [];\n\n      for (var i = 0; i < crdnum; i++) {\n        var i8 = (gl.flags[i] & 4) != 0,\n            same = (gl.flags[i] & 32) != 0;\n\n        if (i8) {\n          gl.ys.push(same ? data[offset] : -data[offset]);\n          offset++;\n        } else {\n          if (same) gl.ys.push(0);else {\n            gl.ys.push(bin.readShort(data, offset));\n            offset += 2;\n          }\n        }\n      }\n\n      var x = 0,\n          y = 0;\n\n      for (var i = 0; i < crdnum; i++) {\n        x += gl.xs[i];\n        y += gl.ys[i];\n        gl.xs[i] = x;\n        gl.ys[i] = y;\n      } //console.log(endPtsOfContours, instructionLength, instructions, flags, xCoordinates, yCoordinates);\n\n    } else {\n      var ARG_1_AND_2_ARE_WORDS = 1 << 0;\n      var ARGS_ARE_XY_VALUES = 1 << 1;\n      var WE_HAVE_A_SCALE = 1 << 3;\n      var MORE_COMPONENTS = 1 << 5;\n      var WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;\n      var WE_HAVE_A_TWO_BY_TWO = 1 << 7;\n      var WE_HAVE_INSTRUCTIONS = 1 << 8;\n      gl.parts = [];\n      var flags;\n\n      do {\n        flags = bin.readUshort(data, offset);\n        offset += 2;\n        var part = {\n          m: {\n            a: 1,\n            b: 0,\n            c: 0,\n            d: 1,\n            tx: 0,\n            ty: 0\n          },\n          p1: -1,\n          p2: -1\n        };\n        gl.parts.push(part);\n        part.glyphIndex = bin.readUshort(data, offset);\n        offset += 2;\n\n        if (flags & ARG_1_AND_2_ARE_WORDS) {\n          var arg1 = bin.readShort(data, offset);\n          offset += 2;\n          var arg2 = bin.readShort(data, offset);\n          offset += 2;\n        } else {\n          var arg1 = bin.readInt8(data, offset);\n          offset++;\n          var arg2 = bin.readInt8(data, offset);\n          offset++;\n        }\n\n        if (flags & ARGS_ARE_XY_VALUES) {\n          part.m.tx = arg1;\n          part.m.ty = arg2;\n        } else {\n          part.p1 = arg1;\n          part.p2 = arg2;\n        } //part.m.tx = arg1;  part.m.ty = arg2;\n        //else { throw \"params are not XY values\"; }\n\n\n        if (flags & WE_HAVE_A_SCALE) {\n          part.m.a = part.m.d = bin.readF2dot14(data, offset);\n          offset += 2;\n        } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n          part.m.a = bin.readF2dot14(data, offset);\n          offset += 2;\n          part.m.d = bin.readF2dot14(data, offset);\n          offset += 2;\n        } else if (flags & WE_HAVE_A_TWO_BY_TWO) {\n          part.m.a = bin.readF2dot14(data, offset);\n          offset += 2;\n          part.m.b = bin.readF2dot14(data, offset);\n          offset += 2;\n          part.m.c = bin.readF2dot14(data, offset);\n          offset += 2;\n          part.m.d = bin.readF2dot14(data, offset);\n          offset += 2;\n        }\n      } while (flags & MORE_COMPONENTS);\n\n      if (flags & WE_HAVE_INSTRUCTIONS) {\n        var numInstr = bin.readUshort(data, offset);\n        offset += 2;\n        gl.instr = [];\n\n        for (var i = 0; i < numInstr; i++) {\n          gl.instr.push(data[offset]);\n          offset++;\n        }\n      }\n    }\n\n    return gl;\n  };\n\n  Typr.GPOS = {};\n\n  Typr.GPOS.parse = function (data, offset, length, font) {\n    return Typr._lctf.parse(data, offset, length, font, Typr.GPOS.subt);\n  };\n\n  Typr.GPOS.subt = function (data, ltype, offset) // lookup type\n  {\n    var bin = Typr._bin,\n        offset0 = offset,\n        tab = {};\n    tab.fmt = bin.readUshort(data, offset);\n    offset += 2; //console.log(ltype, tab.fmt);\n\n    if (ltype == 1 || ltype == 2 || ltype == 3 || ltype == 7 || ltype == 8 && tab.fmt <= 2) {\n      var covOff = bin.readUshort(data, offset);\n      offset += 2;\n      tab.coverage = Typr._lctf.readCoverage(data, covOff + offset0);\n    }\n\n    if (ltype == 1 && tab.fmt == 1) {\n      var valFmt1 = bin.readUshort(data, offset);\n      offset += 2;\n\n      var ones1 = Typr._lctf.numOfOnes(valFmt1);\n\n      if (valFmt1 != 0) tab.pos = Typr.GPOS.readValueRecord(data, offset, valFmt1);\n    } else if (ltype == 2) {\n      var valFmt1 = bin.readUshort(data, offset);\n      offset += 2;\n      var valFmt2 = bin.readUshort(data, offset);\n      offset += 2;\n\n      var ones1 = Typr._lctf.numOfOnes(valFmt1);\n\n      var ones2 = Typr._lctf.numOfOnes(valFmt2);\n\n      if (tab.fmt == 1) {\n        tab.pairsets = [];\n        var psc = bin.readUshort(data, offset);\n        offset += 2; // PairSetCount\n\n        for (var i = 0; i < psc; i++) {\n          var psoff = offset0 + bin.readUshort(data, offset);\n          offset += 2;\n          var pvc = bin.readUshort(data, psoff);\n          psoff += 2;\n          var arr = [];\n\n          for (var j = 0; j < pvc; j++) {\n            var gid2 = bin.readUshort(data, psoff);\n            psoff += 2;\n            var value1, value2;\n\n            if (valFmt1 != 0) {\n              value1 = Typr.GPOS.readValueRecord(data, psoff, valFmt1);\n              psoff += ones1 * 2;\n            }\n\n            if (valFmt2 != 0) {\n              value2 = Typr.GPOS.readValueRecord(data, psoff, valFmt2);\n              psoff += ones2 * 2;\n            } //if(value1!=null) throw \"e\";\n\n\n            arr.push({\n              gid2: gid2,\n              val1: value1,\n              val2: value2\n            });\n          }\n\n          tab.pairsets.push(arr);\n        }\n      }\n\n      if (tab.fmt == 2) {\n        var classDef1 = bin.readUshort(data, offset);\n        offset += 2;\n        var classDef2 = bin.readUshort(data, offset);\n        offset += 2;\n        var class1Count = bin.readUshort(data, offset);\n        offset += 2;\n        var class2Count = bin.readUshort(data, offset);\n        offset += 2;\n        tab.classDef1 = Typr._lctf.readClassDef(data, offset0 + classDef1);\n        tab.classDef2 = Typr._lctf.readClassDef(data, offset0 + classDef2);\n        tab.matrix = [];\n\n        for (var i = 0; i < class1Count; i++) {\n          var row = [];\n\n          for (var j = 0; j < class2Count; j++) {\n            var value1 = null,\n                value2 = null;\n\n            if (tab.valFmt1 != 0) {\n              value1 = Typr.GPOS.readValueRecord(data, offset, tab.valFmt1);\n              offset += ones1 * 2;\n            }\n\n            if (tab.valFmt2 != 0) {\n              value2 = Typr.GPOS.readValueRecord(data, offset, tab.valFmt2);\n              offset += ones2 * 2;\n            }\n\n            row.push({\n              val1: value1,\n              val2: value2\n            });\n          }\n\n          tab.matrix.push(row);\n        }\n      }\n    } else ;\n\n    return tab;\n  };\n\n  Typr.GPOS.readValueRecord = function (data, offset, valFmt) {\n    var bin = Typr._bin;\n    var arr = [];\n    arr.push(valFmt & 1 ? bin.readShort(data, offset) : 0);\n    offset += valFmt & 1 ? 2 : 0; // X_PLACEMENT\n\n    arr.push(valFmt & 2 ? bin.readShort(data, offset) : 0);\n    offset += valFmt & 2 ? 2 : 0; // Y_PLACEMENT\n\n    arr.push(valFmt & 4 ? bin.readShort(data, offset) : 0);\n    offset += valFmt & 4 ? 2 : 0; // X_ADVANCE\n\n    arr.push(valFmt & 8 ? bin.readShort(data, offset) : 0);\n    offset += valFmt & 8 ? 2 : 0; // Y_ADVANCE\n\n    return arr;\n  };\n\n  Typr.GSUB = {};\n\n  Typr.GSUB.parse = function (data, offset, length, font) {\n    return Typr._lctf.parse(data, offset, length, font, Typr.GSUB.subt);\n  };\n\n  Typr.GSUB.subt = function (data, ltype, offset) // lookup type\n  {\n    var bin = Typr._bin,\n        offset0 = offset,\n        tab = {};\n    tab.fmt = bin.readUshort(data, offset);\n    offset += 2;\n    if (ltype != 1 && ltype != 4 && ltype != 5 && ltype != 6) return null;\n\n    if (ltype == 1 || ltype == 4 || ltype == 5 && tab.fmt <= 2 || ltype == 6 && tab.fmt <= 2) {\n      var covOff = bin.readUshort(data, offset);\n      offset += 2;\n      tab.coverage = Typr._lctf.readCoverage(data, offset0 + covOff); // not always is coverage here\n    }\n\n    if (ltype == 1) {\n      if (tab.fmt == 1) {\n        tab.delta = bin.readShort(data, offset);\n        offset += 2;\n      } else if (tab.fmt == 2) {\n        var cnt = bin.readUshort(data, offset);\n        offset += 2;\n        tab.newg = bin.readUshorts(data, offset, cnt);\n        offset += tab.newg.length * 2;\n      }\n    } //  Ligature Substitution Subtable\n    else if (ltype == 4) {\n        tab.vals = [];\n        var cnt = bin.readUshort(data, offset);\n        offset += 2;\n\n        for (var i = 0; i < cnt; i++) {\n          var loff = bin.readUshort(data, offset);\n          offset += 2;\n          tab.vals.push(Typr.GSUB.readLigatureSet(data, offset0 + loff));\n        } //console.log(tab.coverage);\n        //console.log(tab.vals);\n\n      } //  Contextual Substitution Subtable\n      else if (ltype == 5) {\n          if (tab.fmt == 2) {\n            var cDefOffset = bin.readUshort(data, offset);\n            offset += 2;\n            tab.cDef = Typr._lctf.readClassDef(data, offset0 + cDefOffset);\n            tab.scset = [];\n            var subClassSetCount = bin.readUshort(data, offset);\n            offset += 2;\n\n            for (var i = 0; i < subClassSetCount; i++) {\n              var scsOff = bin.readUshort(data, offset);\n              offset += 2;\n              tab.scset.push(scsOff == 0 ? null : Typr.GSUB.readSubClassSet(data, offset0 + scsOff));\n            }\n          } //else console.log(\"unknown table format\", tab.fmt);\n\n        } //*\n        else if (ltype == 6) {\n            /*\r\n            if(tab.fmt==2) {\r\n            \tvar btDef = bin.readUshort(data, offset);  offset+=2;\r\n            \tvar inDef = bin.readUshort(data, offset);  offset+=2;\r\n            \tvar laDef = bin.readUshort(data, offset);  offset+=2;\r\n            \t\r\n            \ttab.btDef = Typr._lctf.readClassDef(data, offset0 + btDef);\r\n            \ttab.inDef = Typr._lctf.readClassDef(data, offset0 + inDef);\r\n            \ttab.laDef = Typr._lctf.readClassDef(data, offset0 + laDef);\r\n            \t\r\n            \ttab.scset = [];\r\n            \tvar cnt = bin.readUshort(data, offset);  offset+=2;\r\n            \tfor(var i=0; i<cnt; i++) {\r\n            \t\tvar loff = bin.readUshort(data, offset);  offset+=2;\r\n            \t\ttab.scset.push(Typr.GSUB.readChainSubClassSet(data, offset0+loff));\r\n            \t}\r\n            }\r\n            */\n            if (tab.fmt == 3) {\n              for (var i = 0; i < 3; i++) {\n                var cnt = bin.readUshort(data, offset);\n                offset += 2;\n                var cvgs = [];\n\n                for (var j = 0; j < cnt; j++) {\n                  cvgs.push(Typr._lctf.readCoverage(data, offset0 + bin.readUshort(data, offset + j * 2)));\n                }\n\n                offset += cnt * 2;\n                if (i == 0) tab.backCvg = cvgs;\n                if (i == 1) tab.inptCvg = cvgs;\n                if (i == 2) tab.ahedCvg = cvgs;\n              }\n\n              var cnt = bin.readUshort(data, offset);\n              offset += 2;\n              tab.lookupRec = Typr.GSUB.readSubstLookupRecords(data, offset, cnt);\n            } //console.log(tab);\n\n          } //*/\n    //if(tab.coverage.indexOf(3)!=-1) console.log(ltype, fmt, tab);\n\n\n    return tab;\n  };\n\n  Typr.GSUB.readSubClassSet = function (data, offset) {\n    var rUs = Typr._bin.readUshort,\n        offset0 = offset,\n        lset = [];\n    var cnt = rUs(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < cnt; i++) {\n      var loff = rUs(data, offset);\n      offset += 2;\n      lset.push(Typr.GSUB.readSubClassRule(data, offset0 + loff));\n    }\n\n    return lset;\n  };\n\n  Typr.GSUB.readSubClassRule = function (data, offset) {\n    var rUs = Typr._bin.readUshort,\n        rule = {};\n    var gcount = rUs(data, offset);\n    offset += 2;\n    var scount = rUs(data, offset);\n    offset += 2;\n    rule.input = [];\n\n    for (var i = 0; i < gcount - 1; i++) {\n      rule.input.push(rUs(data, offset));\n      offset += 2;\n    }\n\n    rule.substLookupRecords = Typr.GSUB.readSubstLookupRecords(data, offset, scount);\n    return rule;\n  };\n\n  Typr.GSUB.readSubstLookupRecords = function (data, offset, cnt) {\n    var rUs = Typr._bin.readUshort;\n    var out = [];\n\n    for (var i = 0; i < cnt; i++) {\n      out.push(rUs(data, offset), rUs(data, offset + 2));\n      offset += 4;\n    }\n\n    return out;\n  };\n\n  Typr.GSUB.readChainSubClassSet = function (data, offset) {\n    var bin = Typr._bin,\n        offset0 = offset,\n        lset = [];\n    var cnt = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < cnt; i++) {\n      var loff = bin.readUshort(data, offset);\n      offset += 2;\n      lset.push(Typr.GSUB.readChainSubClassRule(data, offset0 + loff));\n    }\n\n    return lset;\n  };\n\n  Typr.GSUB.readChainSubClassRule = function (data, offset) {\n    var bin = Typr._bin,\n        rule = {};\n    var pps = [\"backtrack\", \"input\", \"lookahead\"];\n\n    for (var pi = 0; pi < pps.length; pi++) {\n      var cnt = bin.readUshort(data, offset);\n      offset += 2;\n      if (pi == 1) cnt--;\n      rule[pps[pi]] = bin.readUshorts(data, offset, cnt);\n      offset += rule[pps[pi]].length * 2;\n    }\n\n    var cnt = bin.readUshort(data, offset);\n    offset += 2;\n    rule.subst = bin.readUshorts(data, offset, cnt * 2);\n    offset += rule.subst.length * 2;\n    return rule;\n  };\n\n  Typr.GSUB.readLigatureSet = function (data, offset) {\n    var bin = Typr._bin,\n        offset0 = offset,\n        lset = [];\n    var lcnt = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var j = 0; j < lcnt; j++) {\n      var loff = bin.readUshort(data, offset);\n      offset += 2;\n      lset.push(Typr.GSUB.readLigature(data, offset0 + loff));\n    }\n\n    return lset;\n  };\n\n  Typr.GSUB.readLigature = function (data, offset) {\n    var bin = Typr._bin,\n        lig = {\n      chain: []\n    };\n    lig.nglyph = bin.readUshort(data, offset);\n    offset += 2;\n    var ccnt = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var k = 0; k < ccnt - 1; k++) {\n      lig.chain.push(bin.readUshort(data, offset));\n      offset += 2;\n    }\n\n    return lig;\n  };\n\n  Typr.head = {};\n\n  Typr.head.parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    var obj = {};\n    var tableVersion = bin.readFixed(data, offset);\n    offset += 4;\n    obj.fontRevision = bin.readFixed(data, offset);\n    offset += 4;\n    var checkSumAdjustment = bin.readUint(data, offset);\n    offset += 4;\n    var magicNumber = bin.readUint(data, offset);\n    offset += 4;\n    obj.flags = bin.readUshort(data, offset);\n    offset += 2;\n    obj.unitsPerEm = bin.readUshort(data, offset);\n    offset += 2;\n    obj.created = bin.readUint64(data, offset);\n    offset += 8;\n    obj.modified = bin.readUint64(data, offset);\n    offset += 8;\n    obj.xMin = bin.readShort(data, offset);\n    offset += 2;\n    obj.yMin = bin.readShort(data, offset);\n    offset += 2;\n    obj.xMax = bin.readShort(data, offset);\n    offset += 2;\n    obj.yMax = bin.readShort(data, offset);\n    offset += 2;\n    obj.macStyle = bin.readUshort(data, offset);\n    offset += 2;\n    obj.lowestRecPPEM = bin.readUshort(data, offset);\n    offset += 2;\n    obj.fontDirectionHint = bin.readShort(data, offset);\n    offset += 2;\n    obj.indexToLocFormat = bin.readShort(data, offset);\n    offset += 2;\n    obj.glyphDataFormat = bin.readShort(data, offset);\n    offset += 2;\n    return obj;\n  };\n\n  Typr.hhea = {};\n\n  Typr.hhea.parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    var obj = {};\n    var tableVersion = bin.readFixed(data, offset);\n    offset += 4;\n    obj.ascender = bin.readShort(data, offset);\n    offset += 2;\n    obj.descender = bin.readShort(data, offset);\n    offset += 2;\n    obj.lineGap = bin.readShort(data, offset);\n    offset += 2;\n    obj.advanceWidthMax = bin.readUshort(data, offset);\n    offset += 2;\n    obj.minLeftSideBearing = bin.readShort(data, offset);\n    offset += 2;\n    obj.minRightSideBearing = bin.readShort(data, offset);\n    offset += 2;\n    obj.xMaxExtent = bin.readShort(data, offset);\n    offset += 2;\n    obj.caretSlopeRise = bin.readShort(data, offset);\n    offset += 2;\n    obj.caretSlopeRun = bin.readShort(data, offset);\n    offset += 2;\n    obj.caretOffset = bin.readShort(data, offset);\n    offset += 2;\n    offset += 4 * 2;\n    obj.metricDataFormat = bin.readShort(data, offset);\n    offset += 2;\n    obj.numberOfHMetrics = bin.readUshort(data, offset);\n    offset += 2;\n    return obj;\n  };\n\n  Typr.hmtx = {};\n\n  Typr.hmtx.parse = function (data, offset, length, font) {\n    var bin = Typr._bin;\n    var obj = {};\n    obj.aWidth = [];\n    obj.lsBearing = [];\n    var aw = 0,\n        lsb = 0;\n\n    for (var i = 0; i < font.maxp.numGlyphs; i++) {\n      if (i < font.hhea.numberOfHMetrics) {\n        aw = bin.readUshort(data, offset);\n        offset += 2;\n        lsb = bin.readShort(data, offset);\n        offset += 2;\n      }\n\n      obj.aWidth.push(aw);\n      obj.lsBearing.push(lsb);\n    }\n\n    return obj;\n  };\n\n  Typr.kern = {};\n\n  Typr.kern.parse = function (data, offset, length, font) {\n    var bin = Typr._bin;\n    var version = bin.readUshort(data, offset);\n    offset += 2;\n    if (version == 1) return Typr.kern.parseV1(data, offset - 2, length, font);\n    var nTables = bin.readUshort(data, offset);\n    offset += 2;\n    var map = {\n      glyph1: [],\n      rval: []\n    };\n\n    for (var i = 0; i < nTables; i++) {\n      offset += 2; // skip version\n\n      var length = bin.readUshort(data, offset);\n      offset += 2;\n      var coverage = bin.readUshort(data, offset);\n      offset += 2;\n      var format = coverage >>> 8;\n      /* I have seen format 128 once, that's why I do */\n\n      format &= 0xf;\n      if (format == 0) offset = Typr.kern.readFormat0(data, offset, map);else throw \"unknown kern table format: \" + format;\n    }\n\n    return map;\n  };\n\n  Typr.kern.parseV1 = function (data, offset, length, font) {\n    var bin = Typr._bin;\n    var version = bin.readFixed(data, offset);\n    offset += 4;\n    var nTables = bin.readUint(data, offset);\n    offset += 4;\n    var map = {\n      glyph1: [],\n      rval: []\n    };\n\n    for (var i = 0; i < nTables; i++) {\n      var length = bin.readUint(data, offset);\n      offset += 4;\n      var coverage = bin.readUshort(data, offset);\n      offset += 2;\n      var tupleIndex = bin.readUshort(data, offset);\n      offset += 2;\n      var format = coverage >>> 8;\n      /* I have seen format 128 once, that's why I do */\n\n      format &= 0xf;\n      if (format == 0) offset = Typr.kern.readFormat0(data, offset, map);else throw \"unknown kern table format: \" + format;\n    }\n\n    return map;\n  };\n\n  Typr.kern.readFormat0 = function (data, offset, map) {\n    var bin = Typr._bin;\n    var pleft = -1;\n    var nPairs = bin.readUshort(data, offset);\n    offset += 2;\n    var searchRange = bin.readUshort(data, offset);\n    offset += 2;\n    var entrySelector = bin.readUshort(data, offset);\n    offset += 2;\n    var rangeShift = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var j = 0; j < nPairs; j++) {\n      var left = bin.readUshort(data, offset);\n      offset += 2;\n      var right = bin.readUshort(data, offset);\n      offset += 2;\n      var value = bin.readShort(data, offset);\n      offset += 2;\n\n      if (left != pleft) {\n        map.glyph1.push(left);\n        map.rval.push({\n          glyph2: [],\n          vals: []\n        });\n      }\n\n      var rval = map.rval[map.rval.length - 1];\n      rval.glyph2.push(right);\n      rval.vals.push(value);\n      pleft = left;\n    }\n\n    return offset;\n  };\n\n  Typr.loca = {};\n\n  Typr.loca.parse = function (data, offset, length, font) {\n    var bin = Typr._bin;\n    var obj = [];\n    var ver = font.head.indexToLocFormat; //console.log(\"loca\", ver, length, 4*font.maxp.numGlyphs);\n\n    var len = font.maxp.numGlyphs + 1;\n    if (ver == 0) for (var i = 0; i < len; i++) {\n      obj.push(bin.readUshort(data, offset + (i << 1)) << 1);\n    }\n    if (ver == 1) for (var i = 0; i < len; i++) {\n      obj.push(bin.readUint(data, offset + (i << 2)));\n    }\n    return obj;\n  };\n\n  Typr.maxp = {};\n\n  Typr.maxp.parse = function (data, offset, length) {\n    //console.log(data.length, offset, length);\n    var bin = Typr._bin;\n    var obj = {}; // both versions 0.5 and 1.0\n\n    var ver = bin.readUint(data, offset);\n    offset += 4;\n    obj.numGlyphs = bin.readUshort(data, offset);\n    offset += 2; // only 1.0\n\n    if (ver == 0x00010000) {\n      obj.maxPoints = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxContours = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxCompositePoints = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxCompositeContours = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxZones = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxTwilightPoints = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxStorage = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxFunctionDefs = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxInstructionDefs = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxStackElements = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxSizeOfInstructions = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxComponentElements = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxComponentDepth = bin.readUshort(data, offset);\n      offset += 2;\n    }\n\n    return obj;\n  };\n\n  Typr.name = {};\n\n  Typr.name.parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    var obj = {};\n    var format = bin.readUshort(data, offset);\n    offset += 2;\n    var count = bin.readUshort(data, offset);\n    offset += 2;\n    var stringOffset = bin.readUshort(data, offset);\n    offset += 2; //console.log(format,count);\n\n    var names = [\"copyright\", \"fontFamily\", \"fontSubfamily\", \"ID\", \"fullName\", \"version\", \"postScriptName\", \"trademark\", \"manufacturer\", \"designer\", \"description\", \"urlVendor\", \"urlDesigner\", \"licence\", \"licenceURL\", \"---\", \"typoFamilyName\", \"typoSubfamilyName\", \"compatibleFull\", \"sampleText\", \"postScriptCID\", \"wwsFamilyName\", \"wwsSubfamilyName\", \"lightPalette\", \"darkPalette\"];\n    var offset0 = offset;\n\n    for (var i = 0; i < count; i++) {\n      var platformID = bin.readUshort(data, offset);\n      offset += 2;\n      var encodingID = bin.readUshort(data, offset);\n      offset += 2;\n      var languageID = bin.readUshort(data, offset);\n      offset += 2;\n      var nameID = bin.readUshort(data, offset);\n      offset += 2;\n      var slen = bin.readUshort(data, offset);\n      offset += 2;\n      var noffset = bin.readUshort(data, offset);\n      offset += 2; //console.log(platformID, encodingID, languageID.toString(16), nameID, length, noffset);\n\n      var cname = names[nameID];\n      var soff = offset0 + count * 12 + noffset;\n      var str;\n      if (platformID == 0) str = bin.readUnicode(data, soff, slen / 2);else if (platformID == 3 && encodingID == 0) str = bin.readUnicode(data, soff, slen / 2);else if (encodingID == 0) str = bin.readASCII(data, soff, slen);else if (encodingID == 1) str = bin.readUnicode(data, soff, slen / 2);else if (encodingID == 3) str = bin.readUnicode(data, soff, slen / 2);else if (platformID == 1) {\n        str = bin.readASCII(data, soff, slen);\n        console.log(\"reading unknown MAC encoding \" + encodingID + \" as ASCII\");\n      } else throw \"unknown encoding \" + encodingID + \", platformID: \" + platformID;\n      var tid = \"p\" + platformID + \",\" + languageID.toString(16); //Typr._platforms[platformID];\n\n      if (obj[tid] == null) obj[tid] = {};\n      obj[tid][cname] = str;\n      obj[tid]._lang = languageID; //console.log(tid, obj[tid]);\n    }\n    /*\r\n    if(format == 1)\r\n    {\r\n    \tvar langTagCount = bin.readUshort(data, offset);  offset += 2;\r\n    \tfor(var i=0; i<langTagCount; i++)\r\n    \t{\r\n    \t\tvar length  = bin.readUshort(data, offset);  offset += 2;\r\n    \t\tvar noffset = bin.readUshort(data, offset);  offset += 2;\r\n    \t}\r\n    }\r\n    */\n    //console.log(obj);\n\n\n    for (var p in obj) {\n      if (obj[p].postScriptName != null && obj[p]._lang == 0x0409) return obj[p];\n    } // United States\n\n\n    for (var p in obj) {\n      if (obj[p].postScriptName != null && obj[p]._lang == 0x0000) return obj[p];\n    } // Universal\n\n\n    for (var p in obj) {\n      if (obj[p].postScriptName != null && obj[p]._lang == 0x0c0c) return obj[p];\n    } // Canada\n\n\n    for (var p in obj) {\n      if (obj[p].postScriptName != null) return obj[p];\n    }\n\n    var tname;\n\n    for (var p in obj) {\n      tname = p;\n      break;\n    }\n\n    console.log(\"returning name table with languageID \" + obj[tname]._lang);\n    return obj[tname];\n  };\n\n  Typr[\"OS/2\"] = {};\n\n  Typr[\"OS/2\"].parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    var ver = bin.readUshort(data, offset);\n    offset += 2;\n    var obj = {};\n    if (ver == 0) Typr[\"OS/2\"].version0(data, offset, obj);else if (ver == 1) Typr[\"OS/2\"].version1(data, offset, obj);else if (ver == 2 || ver == 3 || ver == 4) Typr[\"OS/2\"].version2(data, offset, obj);else if (ver == 5) Typr[\"OS/2\"].version5(data, offset, obj);else throw \"unknown OS/2 table version: \" + ver;\n    return obj;\n  };\n\n  Typr[\"OS/2\"].version0 = function (data, offset, obj) {\n    var bin = Typr._bin;\n    obj.xAvgCharWidth = bin.readShort(data, offset);\n    offset += 2;\n    obj.usWeightClass = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usWidthClass = bin.readUshort(data, offset);\n    offset += 2;\n    obj.fsType = bin.readUshort(data, offset);\n    offset += 2;\n    obj.ySubscriptXSize = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySubscriptYSize = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySubscriptXOffset = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySubscriptYOffset = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySuperscriptXSize = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySuperscriptYSize = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySuperscriptXOffset = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySuperscriptYOffset = bin.readShort(data, offset);\n    offset += 2;\n    obj.yStrikeoutSize = bin.readShort(data, offset);\n    offset += 2;\n    obj.yStrikeoutPosition = bin.readShort(data, offset);\n    offset += 2;\n    obj.sFamilyClass = bin.readShort(data, offset);\n    offset += 2;\n    obj.panose = bin.readBytes(data, offset, 10);\n    offset += 10;\n    obj.ulUnicodeRange1 = bin.readUint(data, offset);\n    offset += 4;\n    obj.ulUnicodeRange2 = bin.readUint(data, offset);\n    offset += 4;\n    obj.ulUnicodeRange3 = bin.readUint(data, offset);\n    offset += 4;\n    obj.ulUnicodeRange4 = bin.readUint(data, offset);\n    offset += 4;\n    obj.achVendID = [bin.readInt8(data, offset), bin.readInt8(data, offset + 1), bin.readInt8(data, offset + 2), bin.readInt8(data, offset + 3)];\n    offset += 4;\n    obj.fsSelection = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usFirstCharIndex = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usLastCharIndex = bin.readUshort(data, offset);\n    offset += 2;\n    obj.sTypoAscender = bin.readShort(data, offset);\n    offset += 2;\n    obj.sTypoDescender = bin.readShort(data, offset);\n    offset += 2;\n    obj.sTypoLineGap = bin.readShort(data, offset);\n    offset += 2;\n    obj.usWinAscent = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usWinDescent = bin.readUshort(data, offset);\n    offset += 2;\n    return offset;\n  };\n\n  Typr[\"OS/2\"].version1 = function (data, offset, obj) {\n    var bin = Typr._bin;\n    offset = Typr[\"OS/2\"].version0(data, offset, obj);\n    obj.ulCodePageRange1 = bin.readUint(data, offset);\n    offset += 4;\n    obj.ulCodePageRange2 = bin.readUint(data, offset);\n    offset += 4;\n    return offset;\n  };\n\n  Typr[\"OS/2\"].version2 = function (data, offset, obj) {\n    var bin = Typr._bin;\n    offset = Typr[\"OS/2\"].version1(data, offset, obj);\n    obj.sxHeight = bin.readShort(data, offset);\n    offset += 2;\n    obj.sCapHeight = bin.readShort(data, offset);\n    offset += 2;\n    obj.usDefault = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usBreak = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usMaxContext = bin.readUshort(data, offset);\n    offset += 2;\n    return offset;\n  };\n\n  Typr[\"OS/2\"].version5 = function (data, offset, obj) {\n    var bin = Typr._bin;\n    offset = Typr[\"OS/2\"].version2(data, offset, obj);\n    obj.usLowerOpticalPointSize = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usUpperOpticalPointSize = bin.readUshort(data, offset);\n    offset += 2;\n    return offset;\n  };\n\n  Typr.post = {};\n\n  Typr.post.parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    var obj = {};\n    obj.version = bin.readFixed(data, offset);\n    offset += 4;\n    obj.italicAngle = bin.readFixed(data, offset);\n    offset += 4;\n    obj.underlinePosition = bin.readShort(data, offset);\n    offset += 2;\n    obj.underlineThickness = bin.readShort(data, offset);\n    offset += 2;\n    return obj;\n  };\n\n  Typr.SVG = {};\n\n  Typr.SVG.parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    var obj = {\n      entries: []\n    };\n    var offset0 = offset;\n    var tableVersion = bin.readUshort(data, offset);\n    offset += 2;\n    var svgDocIndexOffset = bin.readUint(data, offset);\n    offset += 4;\n    var reserved = bin.readUint(data, offset);\n    offset += 4;\n    offset = svgDocIndexOffset + offset0;\n    var numEntries = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < numEntries; i++) {\n      var startGlyphID = bin.readUshort(data, offset);\n      offset += 2;\n      var endGlyphID = bin.readUshort(data, offset);\n      offset += 2;\n      var svgDocOffset = bin.readUint(data, offset);\n      offset += 4;\n      var svgDocLength = bin.readUint(data, offset);\n      offset += 4;\n      var sbuf = new Uint8Array(data.buffer, offset0 + svgDocOffset + svgDocIndexOffset, svgDocLength);\n      var svg = bin.readUTF8(sbuf, 0, sbuf.length);\n\n      for (var f = startGlyphID; f <= endGlyphID; f++) {\n        obj.entries[f] = svg;\n      }\n    }\n\n    return obj;\n  };\n\n  Typr.SVG.toPath = function (str) {\n    var pth = {\n      cmds: [],\n      crds: []\n    };\n    if (str == null) return pth;\n    var prsr = new DOMParser();\n    var doc = prsr[\"parseFromString\"](str, \"image/svg+xml\");\n    var svg = doc.firstChild;\n\n    while (svg.tagName != \"svg\") {\n      svg = svg.nextSibling;\n    }\n\n    var vb = svg.getAttribute(\"viewBox\");\n    if (vb) vb = vb.trim().split(\" \").map(parseFloat);else vb = [0, 0, 1000, 1000];\n\n    Typr.SVG._toPath(svg.children, pth);\n\n    for (var i = 0; i < pth.crds.length; i += 2) {\n      var x = pth.crds[i],\n          y = pth.crds[i + 1];\n      x -= vb[0];\n      y -= vb[1];\n      y = -y;\n      pth.crds[i] = x;\n      pth.crds[i + 1] = y;\n    }\n\n    return pth;\n  };\n\n  Typr.SVG._toPath = function (nds, pth, fill) {\n    for (var ni = 0; ni < nds.length; ni++) {\n      var nd = nds[ni],\n          tn = nd.tagName;\n      var cfl = nd.getAttribute(\"fill\");\n      if (cfl == null) cfl = fill;\n      if (tn == \"g\") Typr.SVG._toPath(nd.children, pth, cfl);else if (tn == \"path\") {\n        pth.cmds.push(cfl ? cfl : \"#000000\");\n        var d = nd.getAttribute(\"d\"); //console.log(d);\n\n        var toks = Typr.SVG._tokens(d); //console.log(toks);\n\n\n        Typr.SVG._toksToPath(toks, pth);\n\n        pth.cmds.push(\"X\");\n      } else if (tn == \"defs\") ;else console.log(tn, nd);\n    }\n  };\n\n  Typr.SVG._tokens = function (d) {\n    var ts = [],\n        off = 0,\n        rn = false,\n        cn = \"\"; // reading number, current number\n\n    while (off < d.length) {\n      var cc = d.charCodeAt(off),\n          ch = d.charAt(off);\n      off++;\n      var isNum = 48 <= cc && cc <= 57 || ch == \".\" || ch == \"-\";\n\n      if (rn) {\n        if (ch == \"-\") {\n          ts.push(parseFloat(cn));\n          cn = ch;\n        } else if (isNum) cn += ch;else {\n          ts.push(parseFloat(cn));\n          if (ch != \",\" && ch != \" \") ts.push(ch);\n          rn = false;\n        }\n      } else {\n        if (isNum) {\n          cn = ch;\n          rn = true;\n        } else if (ch != \",\" && ch != \" \") ts.push(ch);\n      }\n    }\n\n    if (rn) ts.push(parseFloat(cn));\n    return ts;\n  };\n\n  Typr.SVG._toksToPath = function (ts, pth) {\n    var i = 0,\n        x = 0,\n        y = 0,\n        ox = 0,\n        oy = 0;\n    var pc = {\n      \"M\": 2,\n      \"L\": 2,\n      \"H\": 1,\n      \"V\": 1,\n      \"S\": 4,\n      \"C\": 6\n    };\n    var cmds = pth.cmds,\n        crds = pth.crds;\n\n    while (i < ts.length) {\n      var cmd = ts[i];\n      i++;\n\n      if (cmd == \"z\") {\n        cmds.push(\"Z\");\n        x = ox;\n        y = oy;\n      } else {\n        var cmu = cmd.toUpperCase();\n\n        var ps = pc[cmu],\n            reps = Typr.SVG._reps(ts, i, ps);\n\n        for (var j = 0; j < reps; j++) {\n          var xi = 0,\n              yi = 0;\n\n          if (cmd != cmu) {\n            xi = x;\n            yi = y;\n          }\n\n          if (cmu == \"M\") {\n            x = xi + ts[i++];\n            y = yi + ts[i++];\n            cmds.push(\"M\");\n            crds.push(x, y);\n            ox = x;\n            oy = y;\n          } else if (cmu == \"L\") {\n            x = xi + ts[i++];\n            y = yi + ts[i++];\n            cmds.push(\"L\");\n            crds.push(x, y);\n          } else if (cmu == \"H\") {\n            x = xi + ts[i++];\n            cmds.push(\"L\");\n            crds.push(x, y);\n          } else if (cmu == \"V\") {\n            y = yi + ts[i++];\n            cmds.push(\"L\");\n            crds.push(x, y);\n          } else if (cmu == \"C\") {\n            var x1 = xi + ts[i++],\n                y1 = yi + ts[i++],\n                x2 = xi + ts[i++],\n                y2 = yi + ts[i++],\n                x3 = xi + ts[i++],\n                y3 = yi + ts[i++];\n            cmds.push(\"C\");\n            crds.push(x1, y1, x2, y2, x3, y3);\n            x = x3;\n            y = y3;\n          } else if (cmu == \"S\") {\n            var co = Math.max(crds.length - 4, 0);\n            var x1 = x + x - crds[co],\n                y1 = y + y - crds[co + 1];\n            var x2 = xi + ts[i++],\n                y2 = yi + ts[i++],\n                x3 = xi + ts[i++],\n                y3 = yi + ts[i++];\n            cmds.push(\"C\");\n            crds.push(x1, y1, x2, y2, x3, y3);\n            x = x3;\n            y = y3;\n          } else console.log(\"Unknown SVG command \" + cmd);\n        }\n      }\n    }\n  };\n\n  Typr.SVG._reps = function (ts, off, ps) {\n    var i = off;\n\n    while (i < ts.length) {\n      if (typeof ts[i] == \"string\") break;\n      i += ps;\n    }\n\n    return (i - off) / ps;\n  }; // End Typr.js\n  // Begin Typr.U.js\n\n\n  if (Typr == null) Typr = {};\n  if (Typr.U == null) Typr.U = {};\n\n  Typr.U.codeToGlyph = function (font, code) {\n    var cmap = font.cmap;\n    var tind = -1;\n    if (cmap.p0e4 != null) tind = cmap.p0e4;else if (cmap.p3e1 != null) tind = cmap.p3e1;else if (cmap.p1e0 != null) tind = cmap.p1e0;else if (cmap.p0e3 != null) tind = cmap.p0e3;\n    if (tind == -1) throw \"no familiar platform and encoding!\";\n    var tab = cmap.tables[tind];\n\n    if (tab.format == 0) {\n      if (code >= tab.map.length) return 0;\n      return tab.map[code];\n    } else if (tab.format == 4) {\n      var sind = -1;\n\n      for (var i = 0; i < tab.endCount.length; i++) {\n        if (code <= tab.endCount[i]) {\n          sind = i;\n          break;\n        }\n      }\n\n      if (sind == -1) return 0;\n      if (tab.startCount[sind] > code) return 0;\n      var gli = 0;\n      if (tab.idRangeOffset[sind] != 0) gli = tab.glyphIdArray[code - tab.startCount[sind] + (tab.idRangeOffset[sind] >> 1) - (tab.idRangeOffset.length - sind)];else gli = code + tab.idDelta[sind];\n      return gli & 0xFFFF;\n    } else if (tab.format == 12) {\n      if (code > tab.groups[tab.groups.length - 1][1]) return 0;\n\n      for (var i = 0; i < tab.groups.length; i++) {\n        var grp = tab.groups[i];\n        if (grp[0] <= code && code <= grp[1]) return grp[2] + (code - grp[0]);\n      }\n\n      return 0;\n    } else throw \"unknown cmap table format \" + tab.format;\n  };\n\n  Typr.U.glyphToPath = function (font, gid) {\n    var path = {\n      cmds: [],\n      crds: []\n    };\n\n    if (font.SVG && font.SVG.entries[gid]) {\n      var p = font.SVG.entries[gid];\n      if (p == null) return path;\n\n      if (typeof p == \"string\") {\n        p = Typr.SVG.toPath(p);\n        font.SVG.entries[gid] = p;\n      }\n\n      return p;\n    } else if (font.CFF) {\n      var state = {\n        x: 0,\n        y: 0,\n        stack: [],\n        nStems: 0,\n        haveWidth: false,\n        width: font.CFF.Private ? font.CFF.Private.defaultWidthX : 0,\n        open: false\n      };\n      var cff = font.CFF,\n          pdct = font.CFF.Private;\n\n      if (cff.ROS) {\n        var gi = 0;\n\n        while (cff.FDSelect[gi + 2] <= gid) {\n          gi += 2;\n        }\n\n        pdct = cff.FDArray[cff.FDSelect[gi + 1]].Private;\n      }\n\n      Typr.U._drawCFF(font.CFF.CharStrings[gid], state, cff, pdct, path);\n    } else if (font.glyf) {\n      Typr.U._drawGlyf(gid, font, path);\n    }\n\n    return path;\n  };\n\n  Typr.U._drawGlyf = function (gid, font, path) {\n    var gl = font.glyf[gid];\n    if (gl == null) gl = font.glyf[gid] = Typr.glyf._parseGlyf(font, gid);\n\n    if (gl != null) {\n      if (gl.noc > -1) Typr.U._simpleGlyph(gl, path);else Typr.U._compoGlyph(gl, font, path);\n    }\n  };\n\n  Typr.U._simpleGlyph = function (gl, p) {\n    for (var c = 0; c < gl.noc; c++) {\n      var i0 = c == 0 ? 0 : gl.endPts[c - 1] + 1;\n      var il = gl.endPts[c];\n\n      for (var i = i0; i <= il; i++) {\n        var pr = i == i0 ? il : i - 1;\n        var nx = i == il ? i0 : i + 1;\n        var onCurve = gl.flags[i] & 1;\n        var prOnCurve = gl.flags[pr] & 1;\n        var nxOnCurve = gl.flags[nx] & 1;\n        var x = gl.xs[i],\n            y = gl.ys[i];\n\n        if (i == i0) {\n          if (onCurve) {\n            if (prOnCurve) Typr.U.P.moveTo(p, gl.xs[pr], gl.ys[pr]);else {\n              Typr.U.P.moveTo(p, x, y);\n              continue;\n              /*  will do curveTo at il  */\n            }\n          } else {\n            if (prOnCurve) Typr.U.P.moveTo(p, gl.xs[pr], gl.ys[pr]);else Typr.U.P.moveTo(p, (gl.xs[pr] + x) / 2, (gl.ys[pr] + y) / 2);\n          }\n        }\n\n        if (onCurve) {\n          if (prOnCurve) Typr.U.P.lineTo(p, x, y);\n        } else {\n          if (nxOnCurve) Typr.U.P.qcurveTo(p, x, y, gl.xs[nx], gl.ys[nx]);else Typr.U.P.qcurveTo(p, x, y, (x + gl.xs[nx]) / 2, (y + gl.ys[nx]) / 2);\n        }\n      }\n\n      Typr.U.P.closePath(p);\n    }\n  };\n\n  Typr.U._compoGlyph = function (gl, font, p) {\n    for (var j = 0; j < gl.parts.length; j++) {\n      var path = {\n        cmds: [],\n        crds: []\n      };\n      var prt = gl.parts[j];\n\n      Typr.U._drawGlyf(prt.glyphIndex, font, path);\n\n      var m = prt.m;\n\n      for (var i = 0; i < path.crds.length; i += 2) {\n        var x = path.crds[i],\n            y = path.crds[i + 1];\n        p.crds.push(x * m.a + y * m.b + m.tx);\n        p.crds.push(x * m.c + y * m.d + m.ty);\n      }\n\n      for (var i = 0; i < path.cmds.length; i++) {\n        p.cmds.push(path.cmds[i]);\n      }\n    }\n  };\n\n  Typr.U._getGlyphClass = function (g, cd) {\n    var intr = Typr._lctf.getInterval(cd, g);\n\n    return intr == -1 ? 0 : cd[intr + 2]; //for(var i=0; i<cd.start.length; i++) \n    //\tif(cd.start[i]<=g && cd.end[i]>=g) return cd.class[i];\n    //return 0;\n  };\n\n  Typr.U.getPairAdjustment = function (font, g1, g2) {\n    //return 0;\n    if (font.GPOS) {\n      var gpos = font[\"GPOS\"];\n      var llist = gpos.lookupList,\n          flist = gpos.featureList;\n      var tused = [];\n\n      for (var i = 0; i < flist.length; i++) {\n        var fl = flist[i]; //console.log(fl);\n\n        if (fl.tag != \"kern\") continue;\n\n        for (var ti = 0; ti < fl.tab.length; ti++) {\n          if (tused[fl.tab[ti]]) continue;\n          tused[fl.tab[ti]] = true;\n          var tab = llist[fl.tab[ti]]; //console.log(tab);\n\n          for (var j = 0; j < tab.tabs.length; j++) {\n            if (tab.tabs[i] == null) continue;\n            var ltab = tab.tabs[j],\n                ind;\n\n            if (ltab.coverage) {\n              ind = Typr._lctf.coverageIndex(ltab.coverage, g1);\n              if (ind == -1) continue;\n            }\n\n            if (tab.ltype == 1) ;else if (tab.ltype == 2) {\n              var adj;\n\n              if (ltab.fmt == 1) {\n                var right = ltab.pairsets[ind];\n\n                for (var i = 0; i < right.length; i++) {\n                  if (right[i].gid2 == g2) adj = right[i];\n                }\n              } else if (ltab.fmt == 2) {\n                var c1 = Typr.U._getGlyphClass(g1, ltab.classDef1);\n\n                var c2 = Typr.U._getGlyphClass(g2, ltab.classDef2);\n\n                adj = ltab.matrix[c1][c2];\n              } //if(adj) console.log(ltab, adj);\n\n\n              if (adj && adj.val2) return adj.val2[2];\n            }\n          }\n        }\n      }\n    }\n\n    if (font.kern) {\n      var ind1 = font.kern.glyph1.indexOf(g1);\n\n      if (ind1 != -1) {\n        var ind2 = font.kern.rval[ind1].glyph2.indexOf(g2);\n        if (ind2 != -1) return font.kern.rval[ind1].vals[ind2];\n      }\n    }\n\n    return 0;\n  };\n\n  Typr.U.stringToGlyphs = function (font, str) {\n    var gls = [];\n\n    for (var i = 0; i < str.length; i++) {\n      var cc = str.codePointAt(i);\n      if (cc > 0xffff) i++;\n      gls.push(Typr.U.codeToGlyph(font, cc));\n    }\n\n    for (var i = 0; i < str.length; i++) {\n      var cc = str.codePointAt(i); //\n\n      if (cc == 2367) {\n        var t = gls[i - 1];\n        gls[i - 1] = gls[i];\n        gls[i] = t;\n      } //if(cc==2381) {  var t=gls[i+1];  gls[i+1]=gls[i];  gls[i]=t;  }\n\n\n      if (cc > 0xffff) i++;\n    } //console.log(gls.slice(0));\n    //console.log(gls);  return gls;\n\n\n    var gsub = font[\"GSUB\"];\n    if (gsub == null) return gls;\n    var llist = gsub.lookupList,\n        flist = gsub.featureList;\n    var cligs = [\"rlig\", \"liga\", \"mset\", \"isol\", \"init\", \"fina\", \"medi\", \"half\", \"pres\", \"blws\"\n    /* Tibetan fonts like Himalaya.ttf */\n    ]; //console.log(gls.slice(0));\n\n    var tused = [];\n\n    for (var fi = 0; fi < flist.length; fi++) {\n      var fl = flist[fi];\n      if (cligs.indexOf(fl.tag) == -1) continue; //if(fl.tag==\"blwf\") continue;\n      //console.log(fl);\n      //console.log(fl.tag);\n\n      for (var ti = 0; ti < fl.tab.length; ti++) {\n        if (tused[fl.tab[ti]]) continue;\n        tused[fl.tab[ti]] = true;\n        var tab = llist[fl.tab[ti]]; //console.log(fl.tab[ti], tab.ltype);\n        //console.log(fl.tag, tab);\n\n        for (var ci = 0; ci < gls.length; ci++) {\n          var feat = Typr.U._getWPfeature(str, ci);\n\n          if (\"isol,init,fina,medi\".indexOf(fl.tag) != -1 && fl.tag != feat) continue;\n\n          Typr.U._applySubs(gls, ci, tab, llist);\n        }\n      }\n    }\n\n    return gls;\n  };\n\n  Typr.U._getWPfeature = function (str, ci) {\n    // get Word Position feature\n    var wsep = \"\\n\\t\\\" ,.:;!?()  ،\";\n    var R = \"آأؤإاةدذرزوٱٲٳٵٶٷڈډڊڋڌڍڎڏڐڑڒړڔڕږڗژڙۀۃۄۅۆۇۈۉۊۋۍۏےۓەۮۯܐܕܖܗܘܙܞܨܪܬܯݍݙݚݛݫݬݱݳݴݸݹࡀࡆࡇࡉࡔࡧࡩࡪࢪࢫࢬࢮࢱࢲࢹૅેૉ૊૎૏ૐ૑૒૝ૡ૤૯஁ஃ஄அஉ஌எஏ஑னப஫஬\";\n    var L = \"ꡲ્૗\";\n    var slft = ci == 0 || wsep.indexOf(str[ci - 1]) != -1;\n    var srgt = ci == str.length - 1 || wsep.indexOf(str[ci + 1]) != -1;\n    if (!slft && R.indexOf(str[ci - 1]) != -1) slft = true;\n    if (!srgt && R.indexOf(str[ci]) != -1) srgt = true;\n    if (!srgt && L.indexOf(str[ci + 1]) != -1) srgt = true;\n    if (!slft && L.indexOf(str[ci]) != -1) slft = true;\n    var feat = null;\n    if (slft) feat = srgt ? \"isol\" : \"init\";else feat = srgt ? \"fina\" : \"medi\";\n    return feat;\n  };\n\n  Typr.U._applySubs = function (gls, ci, tab, llist) {\n    var rlim = gls.length - ci - 1; //if(ci==0) console.log(\"++++ \", tab.ltype);\n\n    for (var j = 0; j < tab.tabs.length; j++) {\n      if (tab.tabs[j] == null) continue;\n      var ltab = tab.tabs[j],\n          ind;\n\n      if (ltab.coverage) {\n        ind = Typr._lctf.coverageIndex(ltab.coverage, gls[ci]);\n        if (ind == -1) continue;\n      } //if(ci==0) console.log(ind, ltab);\n      //*\n\n\n      if (tab.ltype == 1) {\n        var gl = gls[ci];\n        if (ltab.fmt == 1) gls[ci] = gls[ci] + ltab.delta;else gls[ci] = ltab.newg[ind]; //console.log(\"applying ... 1\", ci, gl, gls[ci]);\n      } //*\n      else if (tab.ltype == 4) {\n          var vals = ltab.vals[ind];\n\n          for (var k = 0; k < vals.length; k++) {\n            var lig = vals[k],\n                rl = lig.chain.length;\n            if (rl > rlim) continue;\n            var good = true,\n                em1 = 0;\n\n            for (var l = 0; l < rl; l++) {\n              while (gls[ci + em1 + (1 + l)] == -1) {\n                em1++;\n              }\n\n              if (lig.chain[l] != gls[ci + em1 + (1 + l)]) good = false;\n            }\n\n            if (!good) continue;\n            gls[ci] = lig.nglyph;\n\n            for (var l = 0; l < rl + em1; l++) {\n              gls[ci + l + 1] = -1;\n            }\n\n            break; // first character changed, other ligatures do not apply anymore\n            //console.log(\"lig\", ci, lig.chain, lig.nglyph);\n            //console.log(\"applying ...\");\n          }\n        } else if (tab.ltype == 5 && ltab.fmt == 2) {\n          var cind = Typr._lctf.getInterval(ltab.cDef, gls[ci]);\n\n          var cls = ltab.cDef[cind + 2],\n              scs = ltab.scset[cls];\n\n          for (var i = 0; i < scs.length; i++) {\n            var sc = scs[i],\n                inp = sc.input;\n            if (inp.length > rlim) continue;\n            var good = true;\n\n            for (var l = 0; l < inp.length; l++) {\n              var cind2 = Typr._lctf.getInterval(ltab.cDef, gls[ci + 1 + l]);\n\n              if (cind == -1 && ltab.cDef[cind2 + 2] != inp[l]) {\n                good = false;\n                break;\n              }\n            }\n\n            if (!good) continue; //console.log(ci, gl);\n\n            var lrs = sc.substLookupRecords;\n\n            for (var k = 0; k < lrs.length; k += 2) {\n              var gi = lrs[k],\n                  tabi = lrs[k + 1]; //Typr.U._applyType1(gls, ci+gi, llist[tabi]);\n              //console.log(tabi, gls[ci+gi], llist[tabi]);\n            }\n          }\n        } else if (tab.ltype == 6 && ltab.fmt == 3) {\n          //if(ltab.backCvg.length==0) return;\n          if (!Typr.U._glsCovered(gls, ltab.backCvg, ci - ltab.backCvg.length)) continue;\n          if (!Typr.U._glsCovered(gls, ltab.inptCvg, ci)) continue;\n          if (!Typr.U._glsCovered(gls, ltab.ahedCvg, ci + ltab.inptCvg.length)) continue; //console.log(ci, ltab);\n\n          var lr = ltab.lookupRec; //console.log(ci, gl, lr);\n\n          for (var i = 0; i < lr.length; i += 2) {\n            var cind = lr[i],\n                tab2 = llist[lr[i + 1]]; //console.log(\"-\", lr[i+1], tab2);\n\n            Typr.U._applySubs(gls, ci + cind, tab2, llist);\n          }\n        } //else console.log(\"Unknown table\", tab.ltype, ltab.fmt);\n      //*/\n\n    }\n  };\n\n  Typr.U._glsCovered = function (gls, cvgs, ci) {\n    for (var i = 0; i < cvgs.length; i++) {\n      var ind = Typr._lctf.coverageIndex(cvgs[i], gls[ci + i]);\n\n      if (ind == -1) return false;\n    }\n\n    return true;\n  };\n\n  Typr.U.glyphsToPath = function (font, gls, clr) {\n    //gls = gls.reverse();//gls.slice(0,12).concat(gls.slice(12).reverse());\n    var tpath = {\n      cmds: [],\n      crds: []\n    };\n    var x = 0;\n\n    for (var i = 0; i < gls.length; i++) {\n      var gid = gls[i];\n      if (gid == -1) continue;\n      var gid2 = i < gls.length - 1 && gls[i + 1] != -1 ? gls[i + 1] : 0;\n      var path = Typr.U.glyphToPath(font, gid);\n\n      for (var j = 0; j < path.crds.length; j += 2) {\n        tpath.crds.push(path.crds[j] + x);\n        tpath.crds.push(path.crds[j + 1]);\n      }\n\n      if (clr) tpath.cmds.push(clr);\n\n      for (var j = 0; j < path.cmds.length; j++) {\n        tpath.cmds.push(path.cmds[j]);\n      }\n\n      if (clr) tpath.cmds.push(\"X\");\n      x += font.hmtx.aWidth[gid]; // - font.hmtx.lsBearing[gid];\n\n      if (i < gls.length - 1) x += Typr.U.getPairAdjustment(font, gid, gid2);\n    }\n\n    return tpath;\n  };\n\n  Typr.U.pathToSVG = function (path, prec) {\n    if (prec == null) prec = 5;\n    var out = [],\n        co = 0,\n        lmap = {\n      \"M\": 2,\n      \"L\": 2,\n      \"Q\": 4,\n      \"C\": 6\n    };\n\n    for (var i = 0; i < path.cmds.length; i++) {\n      var cmd = path.cmds[i],\n          cn = co + (lmap[cmd] ? lmap[cmd] : 0);\n      out.push(cmd);\n\n      while (co < cn) {\n        var c = path.crds[co++];\n        out.push(parseFloat(c.toFixed(prec)) + (co == cn ? \"\" : \" \"));\n      }\n    }\n\n    return out.join(\"\");\n  };\n\n  Typr.U.pathToContext = function (path, ctx) {\n    var c = 0,\n        crds = path.crds;\n\n    for (var j = 0; j < path.cmds.length; j++) {\n      var cmd = path.cmds[j];\n\n      if (cmd == \"M\") {\n        ctx.moveTo(crds[c], crds[c + 1]);\n        c += 2;\n      } else if (cmd == \"L\") {\n        ctx.lineTo(crds[c], crds[c + 1]);\n        c += 2;\n      } else if (cmd == \"C\") {\n        ctx.bezierCurveTo(crds[c], crds[c + 1], crds[c + 2], crds[c + 3], crds[c + 4], crds[c + 5]);\n        c += 6;\n      } else if (cmd == \"Q\") {\n        ctx.quadraticCurveTo(crds[c], crds[c + 1], crds[c + 2], crds[c + 3]);\n        c += 4;\n      } else if (cmd.charAt(0) == \"#\") {\n        ctx.beginPath();\n        ctx.fillStyle = cmd;\n      } else if (cmd == \"Z\") {\n        ctx.closePath();\n      } else if (cmd == \"X\") {\n        ctx.fill();\n      }\n    }\n  };\n\n  Typr.U.P = {};\n\n  Typr.U.P.moveTo = function (p, x, y) {\n    p.cmds.push(\"M\");\n    p.crds.push(x, y);\n  };\n\n  Typr.U.P.lineTo = function (p, x, y) {\n    p.cmds.push(\"L\");\n    p.crds.push(x, y);\n  };\n\n  Typr.U.P.curveTo = function (p, a, b, c, d, e, f) {\n    p.cmds.push(\"C\");\n    p.crds.push(a, b, c, d, e, f);\n  };\n\n  Typr.U.P.qcurveTo = function (p, a, b, c, d) {\n    p.cmds.push(\"Q\");\n    p.crds.push(a, b, c, d);\n  };\n\n  Typr.U.P.closePath = function (p) {\n    p.cmds.push(\"Z\");\n  };\n\n  Typr.U._drawCFF = function (cmds, state, font, pdct, p) {\n    var stack = state.stack;\n    var nStems = state.nStems,\n        haveWidth = state.haveWidth,\n        width = state.width,\n        open = state.open;\n    var i = 0;\n    var x = state.x,\n        y = state.y,\n        c1x = 0,\n        c1y = 0,\n        c2x = 0,\n        c2y = 0,\n        c3x = 0,\n        c3y = 0,\n        c4x = 0,\n        c4y = 0,\n        jpx = 0,\n        jpy = 0;\n    var o = {\n      val: 0,\n      size: 0\n    }; //console.log(cmds);\n\n    while (i < cmds.length) {\n      Typr.CFF.getCharString(cmds, i, o);\n      var v = o.val;\n      i += o.size;\n\n      if (v == \"o1\" || v == \"o18\") //  hstem || hstemhm\n        {\n          var hasWidthArg; // The number of stem operators on the stack is always even.\n          // If the value is uneven, that means a width is specified.\n\n          hasWidthArg = stack.length % 2 !== 0;\n\n          if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + pdct.nominalWidthX;\n          }\n\n          nStems += stack.length >> 1;\n          stack.length = 0;\n          haveWidth = true;\n        } else if (v == \"o3\" || v == \"o23\") // vstem || vstemhm\n        {\n          var hasWidthArg; // The number of stem operators on the stack is always even.\n          // If the value is uneven, that means a width is specified.\n\n          hasWidthArg = stack.length % 2 !== 0;\n\n          if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + pdct.nominalWidthX;\n          }\n\n          nStems += stack.length >> 1;\n          stack.length = 0;\n          haveWidth = true;\n        } else if (v == \"o4\") {\n        if (stack.length > 1 && !haveWidth) {\n          width = stack.shift() + pdct.nominalWidthX;\n          haveWidth = true;\n        }\n\n        if (open) Typr.U.P.closePath(p);\n        y += stack.pop();\n        Typr.U.P.moveTo(p, x, y);\n        open = true;\n      } else if (v == \"o5\") {\n        while (stack.length > 0) {\n          x += stack.shift();\n          y += stack.shift();\n          Typr.U.P.lineTo(p, x, y);\n        }\n      } else if (v == \"o6\" || v == \"o7\") // hlineto || vlineto\n        {\n          var count = stack.length;\n          var isX = v == \"o6\";\n\n          for (var j = 0; j < count; j++) {\n            var sval = stack.shift();\n            if (isX) x += sval;else y += sval;\n            isX = !isX;\n            Typr.U.P.lineTo(p, x, y);\n          }\n        } else if (v == \"o8\" || v == \"o24\") // rrcurveto || rcurveline\n        {\n          var count = stack.length;\n          var index = 0;\n\n          while (index + 6 <= count) {\n            c1x = x + stack.shift();\n            c1y = y + stack.shift();\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            x = c2x + stack.shift();\n            y = c2y + stack.shift();\n            Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n            index += 6;\n          }\n\n          if (v == \"o24\") {\n            x += stack.shift();\n            y += stack.shift();\n            Typr.U.P.lineTo(p, x, y);\n          }\n        } else if (v == \"o11\") break;else if (v == \"o1234\" || v == \"o1235\" || v == \"o1236\" || v == \"o1237\") //if((v+\"\").slice(0,3)==\"o12\")\n        {\n          if (v == \"o1234\") {\n            c1x = x + stack.shift(); // dx1\n\n            c1y = y; // dy1\n\n            c2x = c1x + stack.shift(); // dx2\n\n            c2y = c1y + stack.shift(); // dy2\n\n            jpx = c2x + stack.shift(); // dx3\n\n            jpy = c2y; // dy3\n\n            c3x = jpx + stack.shift(); // dx4\n\n            c3y = c2y; // dy4\n\n            c4x = c3x + stack.shift(); // dx5\n\n            c4y = y; // dy5\n\n            x = c4x + stack.shift(); // dx6\n\n            Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n            Typr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n          }\n\n          if (v == \"o1235\") {\n            c1x = x + stack.shift(); // dx1\n\n            c1y = y + stack.shift(); // dy1\n\n            c2x = c1x + stack.shift(); // dx2\n\n            c2y = c1y + stack.shift(); // dy2\n\n            jpx = c2x + stack.shift(); // dx3\n\n            jpy = c2y + stack.shift(); // dy3\n\n            c3x = jpx + stack.shift(); // dx4\n\n            c3y = jpy + stack.shift(); // dy4\n\n            c4x = c3x + stack.shift(); // dx5\n\n            c4y = c3y + stack.shift(); // dy5\n\n            x = c4x + stack.shift(); // dx6\n\n            y = c4y + stack.shift(); // dy6\n\n            stack.shift(); // flex depth\n\n            Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n            Typr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n          }\n\n          if (v == \"o1236\") {\n            c1x = x + stack.shift(); // dx1\n\n            c1y = y + stack.shift(); // dy1\n\n            c2x = c1x + stack.shift(); // dx2\n\n            c2y = c1y + stack.shift(); // dy2\n\n            jpx = c2x + stack.shift(); // dx3\n\n            jpy = c2y; // dy3\n\n            c3x = jpx + stack.shift(); // dx4\n\n            c3y = c2y; // dy4\n\n            c4x = c3x + stack.shift(); // dx5\n\n            c4y = c3y + stack.shift(); // dy5\n\n            x = c4x + stack.shift(); // dx6\n\n            Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n            Typr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n          }\n\n          if (v == \"o1237\") {\n            c1x = x + stack.shift(); // dx1\n\n            c1y = y + stack.shift(); // dy1\n\n            c2x = c1x + stack.shift(); // dx2\n\n            c2y = c1y + stack.shift(); // dy2\n\n            jpx = c2x + stack.shift(); // dx3\n\n            jpy = c2y + stack.shift(); // dy3\n\n            c3x = jpx + stack.shift(); // dx4\n\n            c3y = jpy + stack.shift(); // dy4\n\n            c4x = c3x + stack.shift(); // dx5\n\n            c4y = c3y + stack.shift(); // dy5\n\n            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n              x = c4x + stack.shift();\n            } else {\n              y = c4y + stack.shift();\n            }\n\n            Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n            Typr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n          }\n        } else if (v == \"o14\") {\n        if (stack.length > 0 && !haveWidth) {\n          width = stack.shift() + font.nominalWidthX;\n          haveWidth = true;\n        }\n\n        if (stack.length == 4) // seac = standard encoding accented character\n          {\n            var adx = stack.shift();\n            var ady = stack.shift();\n            var bchar = stack.shift();\n            var achar = stack.shift();\n            var bind = Typr.CFF.glyphBySE(font, bchar);\n            var aind = Typr.CFF.glyphBySE(font, achar); //console.log(bchar, bind);\n            //console.log(achar, aind);\n            //state.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width;  state.open=open;\n\n            Typr.U._drawCFF(font.CharStrings[bind], state, font, pdct, p);\n\n            state.x = adx;\n            state.y = ady;\n\n            Typr.U._drawCFF(font.CharStrings[aind], state, font, pdct, p); //x=state.x; y=state.y; nStems=state.nStems; haveWidth=state.haveWidth; width=state.width;  open=state.open;\n\n          }\n\n        if (open) {\n          Typr.U.P.closePath(p);\n          open = false;\n        }\n      } else if (v == \"o19\" || v == \"o20\") {\n        var hasWidthArg; // The number of stem operators on the stack is always even.\n        // If the value is uneven, that means a width is specified.\n\n        hasWidthArg = stack.length % 2 !== 0;\n\n        if (hasWidthArg && !haveWidth) {\n          width = stack.shift() + pdct.nominalWidthX;\n        }\n\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n        i += nStems + 7 >> 3;\n      } else if (v == \"o21\") {\n        if (stack.length > 2 && !haveWidth) {\n          width = stack.shift() + pdct.nominalWidthX;\n          haveWidth = true;\n        }\n\n        y += stack.pop();\n        x += stack.pop();\n        if (open) Typr.U.P.closePath(p);\n        Typr.U.P.moveTo(p, x, y);\n        open = true;\n      } else if (v == \"o22\") {\n        if (stack.length > 1 && !haveWidth) {\n          width = stack.shift() + pdct.nominalWidthX;\n          haveWidth = true;\n        }\n\n        x += stack.pop();\n        if (open) Typr.U.P.closePath(p);\n        Typr.U.P.moveTo(p, x, y);\n        open = true;\n      } else if (v == \"o25\") {\n        while (stack.length > 6) {\n          x += stack.shift();\n          y += stack.shift();\n          Typr.U.P.lineTo(p, x, y);\n        }\n\n        c1x = x + stack.shift();\n        c1y = y + stack.shift();\n        c2x = c1x + stack.shift();\n        c2y = c1y + stack.shift();\n        x = c2x + stack.shift();\n        y = c2y + stack.shift();\n        Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n      } else if (v == \"o26\") {\n        if (stack.length % 2) {\n          x += stack.shift();\n        }\n\n        while (stack.length > 0) {\n          c1x = x;\n          c1y = y + stack.shift();\n          c2x = c1x + stack.shift();\n          c2y = c1y + stack.shift();\n          x = c2x;\n          y = c2y + stack.shift();\n          Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n        }\n      } else if (v == \"o27\") {\n        if (stack.length % 2) {\n          y += stack.shift();\n        }\n\n        while (stack.length > 0) {\n          c1x = x + stack.shift();\n          c1y = y;\n          c2x = c1x + stack.shift();\n          c2y = c1y + stack.shift();\n          x = c2x + stack.shift();\n          y = c2y;\n          Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n        }\n      } else if (v == \"o10\" || v == \"o29\") // callsubr || callgsubr\n        {\n          var obj = v == \"o10\" ? pdct : font;\n\n          if (stack.length == 0) {\n            console.log(\"error: empty stack\");\n          } else {\n            var ind = stack.pop();\n            var subr = obj.Subrs[ind + obj.Bias];\n            state.x = x;\n            state.y = y;\n            state.nStems = nStems;\n            state.haveWidth = haveWidth;\n            state.width = width;\n            state.open = open;\n\n            Typr.U._drawCFF(subr, state, font, pdct, p);\n\n            x = state.x;\n            y = state.y;\n            nStems = state.nStems;\n            haveWidth = state.haveWidth;\n            width = state.width;\n            open = state.open;\n          }\n        } else if (v == \"o30\" || v == \"o31\") // vhcurveto || hvcurveto\n        {\n          var count,\n              count1 = stack.length;\n          var index = 0;\n          var alternate = v == \"o31\";\n          count = count1 & ~2;\n          index += count1 - count;\n\n          while (index < count) {\n            if (alternate) {\n              c1x = x + stack.shift();\n              c1y = y;\n              c2x = c1x + stack.shift();\n              c2y = c1y + stack.shift();\n              y = c2y + stack.shift();\n\n              if (count - index == 5) {\n                x = c2x + stack.shift();\n                index++;\n              } else x = c2x;\n\n              alternate = false;\n            } else {\n              c1x = x;\n              c1y = y + stack.shift();\n              c2x = c1x + stack.shift();\n              c2y = c1y + stack.shift();\n              x = c2x + stack.shift();\n\n              if (count - index == 5) {\n                y = c2y + stack.shift();\n                index++;\n              } else y = c2y;\n\n              alternate = true;\n            }\n\n            Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n            index += 4;\n          }\n        } else if ((v + \"\").charAt(0) == \"o\") {\n        console.log(\"Unknown operation: \" + v, cmds);\n        throw v;\n      } else stack.push(v);\n    } //console.log(cmds);\n\n\n    state.x = x;\n    state.y = y;\n    state.nStems = nStems;\n    state.haveWidth = haveWidth;\n    state.width = width;\n    state.open = open;\n  }; // End Typr.U.js\n\n\n  return Typr;\n} // Custom bundle of woff2otf (https://github.com/arty-name/woff2otf) with tiny-inflate \n// (https://github.com/foliojs/tiny-inflate) for use in troika-3d-text. \n// Original licenses apply: \n// - tiny-inflate: https://github.com/foliojs/tiny-inflate/blob/master/LICENSE (MIT)\n// - woff2otf.js: https://github.com/arty-name/woff2otf/blob/master/woff2otf.js (Apache2)\n\n\nfunction woff2otfFactory() {\n  // Begin tinyInflate\n  var tinyInflate = function () {\n    var module = {};\n    var TINF_OK = 0;\n    var TINF_DATA_ERROR = -3;\n\n    function Tree() {\n      this.table = new Uint16Array(16);\n      /* table of code length counts */\n\n      this.trans = new Uint16Array(288);\n      /* code -> symbol translation table */\n    }\n\n    function Data(source, dest) {\n      this.source = source;\n      this.sourceIndex = 0;\n      this.tag = 0;\n      this.bitcount = 0;\n      this.dest = dest;\n      this.destLen = 0;\n      this.ltree = new Tree();\n      /* dynamic length/symbol tree */\n\n      this.dtree = new Tree();\n      /* dynamic distance tree */\n    }\n    /* --------------------------------------------------- *\r\n     * -- uninitialized global data (static structures) -- *\r\n     * --------------------------------------------------- */\n\n\n    var sltree = new Tree();\n    var sdtree = new Tree();\n    /* extra bits and base tables for length codes */\n\n    var length_bits = new Uint8Array(30);\n    var length_base = new Uint16Array(30);\n    /* extra bits and base tables for distance codes */\n\n    var dist_bits = new Uint8Array(30);\n    var dist_base = new Uint16Array(30);\n    /* special ordering of code length codes */\n\n    var clcidx = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n    /* used by tinf_decode_trees, avoids allocations every call */\n\n    var code_tree = new Tree();\n    var lengths = new Uint8Array(288 + 32);\n    /* ----------------------- *\r\n     * -- utility functions -- *\r\n     * ----------------------- */\n\n    /* build extra bits and base tables */\n\n    function tinf_build_bits_base(bits, base, delta, first) {\n      var i, sum;\n      /* build bits table */\n\n      for (i = 0; i < delta; ++i) {\n        bits[i] = 0;\n      }\n\n      for (i = 0; i < 30 - delta; ++i) {\n        bits[i + delta] = i / delta | 0;\n      }\n      /* build base table */\n\n\n      for (sum = first, i = 0; i < 30; ++i) {\n        base[i] = sum;\n        sum += 1 << bits[i];\n      }\n    }\n    /* build the fixed huffman trees */\n\n\n    function tinf_build_fixed_trees(lt, dt) {\n      var i;\n      /* build fixed length tree */\n\n      for (i = 0; i < 7; ++i) {\n        lt.table[i] = 0;\n      }\n\n      lt.table[7] = 24;\n      lt.table[8] = 152;\n      lt.table[9] = 112;\n\n      for (i = 0; i < 24; ++i) {\n        lt.trans[i] = 256 + i;\n      }\n\n      for (i = 0; i < 144; ++i) {\n        lt.trans[24 + i] = i;\n      }\n\n      for (i = 0; i < 8; ++i) {\n        lt.trans[24 + 144 + i] = 280 + i;\n      }\n\n      for (i = 0; i < 112; ++i) {\n        lt.trans[24 + 144 + 8 + i] = 144 + i;\n      }\n      /* build fixed distance tree */\n\n\n      for (i = 0; i < 5; ++i) {\n        dt.table[i] = 0;\n      }\n\n      dt.table[5] = 32;\n\n      for (i = 0; i < 32; ++i) {\n        dt.trans[i] = i;\n      }\n    }\n    /* given an array of code lengths, build a tree */\n\n\n    var offs = new Uint16Array(16);\n\n    function tinf_build_tree(t, lengths, off, num) {\n      var i, sum;\n      /* clear code length count table */\n\n      for (i = 0; i < 16; ++i) {\n        t.table[i] = 0;\n      }\n      /* scan symbol lengths, and sum code length counts */\n\n\n      for (i = 0; i < num; ++i) {\n        t.table[lengths[off + i]]++;\n      }\n\n      t.table[0] = 0;\n      /* compute offset table for distribution sort */\n\n      for (sum = 0, i = 0; i < 16; ++i) {\n        offs[i] = sum;\n        sum += t.table[i];\n      }\n      /* create code->symbol translation table (symbols sorted by code) */\n\n\n      for (i = 0; i < num; ++i) {\n        if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n      }\n    }\n    /* ---------------------- *\r\n     * -- decode functions -- *\r\n     * ---------------------- */\n\n    /* get one bit from source stream */\n\n\n    function tinf_getbit(d) {\n      /* check if tag is empty */\n      if (!d.bitcount--) {\n        /* load next tag */\n        d.tag = d.source[d.sourceIndex++];\n        d.bitcount = 7;\n      }\n      /* shift bit out of tag */\n\n\n      var bit = d.tag & 1;\n      d.tag >>>= 1;\n      return bit;\n    }\n    /* read a num bit value from a stream and add base */\n\n\n    function tinf_read_bits(d, num, base) {\n      if (!num) return base;\n\n      while (d.bitcount < 24) {\n        d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n        d.bitcount += 8;\n      }\n\n      var val = d.tag & 0xffff >>> 16 - num;\n      d.tag >>>= num;\n      d.bitcount -= num;\n      return val + base;\n    }\n    /* given a data stream and a tree, decode a symbol */\n\n\n    function tinf_decode_symbol(d, t) {\n      while (d.bitcount < 24) {\n        d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n        d.bitcount += 8;\n      }\n\n      var sum = 0,\n          cur = 0,\n          len = 0;\n      var tag = d.tag;\n      /* get more bits while code value is above sum */\n\n      do {\n        cur = 2 * cur + (tag & 1);\n        tag >>>= 1;\n        ++len;\n        sum += t.table[len];\n        cur -= t.table[len];\n      } while (cur >= 0);\n\n      d.tag = tag;\n      d.bitcount -= len;\n      return t.trans[sum + cur];\n    }\n    /* given a data stream, decode dynamic trees from it */\n\n\n    function tinf_decode_trees(d, lt, dt) {\n      var hlit, hdist, hclen;\n      var i, num, length;\n      /* get 5 bits HLIT (257-286) */\n\n      hlit = tinf_read_bits(d, 5, 257);\n      /* get 5 bits HDIST (1-32) */\n\n      hdist = tinf_read_bits(d, 5, 1);\n      /* get 4 bits HCLEN (4-19) */\n\n      hclen = tinf_read_bits(d, 4, 4);\n\n      for (i = 0; i < 19; ++i) {\n        lengths[i] = 0;\n      }\n      /* read code lengths for code length alphabet */\n\n\n      for (i = 0; i < hclen; ++i) {\n        /* get 3 bits code length (0-7) */\n        var clen = tinf_read_bits(d, 3, 0);\n        lengths[clcidx[i]] = clen;\n      }\n      /* build code length tree */\n\n\n      tinf_build_tree(code_tree, lengths, 0, 19);\n      /* decode code lengths for the dynamic trees */\n\n      for (num = 0; num < hlit + hdist;) {\n        var sym = tinf_decode_symbol(d, code_tree);\n\n        switch (sym) {\n          case 16:\n            /* copy previous code length 3-6 times (read 2 bits) */\n            var prev = lengths[num - 1];\n\n            for (length = tinf_read_bits(d, 2, 3); length; --length) {\n              lengths[num++] = prev;\n            }\n\n            break;\n\n          case 17:\n            /* repeat code length 0 for 3-10 times (read 3 bits) */\n            for (length = tinf_read_bits(d, 3, 3); length; --length) {\n              lengths[num++] = 0;\n            }\n\n            break;\n\n          case 18:\n            /* repeat code length 0 for 11-138 times (read 7 bits) */\n            for (length = tinf_read_bits(d, 7, 11); length; --length) {\n              lengths[num++] = 0;\n            }\n\n            break;\n\n          default:\n            /* values 0-15 represent the actual code lengths */\n            lengths[num++] = sym;\n            break;\n        }\n      }\n      /* build dynamic trees */\n\n\n      tinf_build_tree(lt, lengths, 0, hlit);\n      tinf_build_tree(dt, lengths, hlit, hdist);\n    }\n    /* ----------------------------- *\r\n     * -- block inflate functions -- *\r\n     * ----------------------------- */\n\n    /* given a stream and two trees, inflate a block of data */\n\n\n    function tinf_inflate_block_data(d, lt, dt) {\n      while (1) {\n        var sym = tinf_decode_symbol(d, lt);\n        /* check for end of block */\n\n        if (sym === 256) {\n          return TINF_OK;\n        }\n\n        if (sym < 256) {\n          d.dest[d.destLen++] = sym;\n        } else {\n          var length, dist, offs;\n          var i;\n          sym -= 257;\n          /* possibly get more bits from length code */\n\n          length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n          dist = tinf_decode_symbol(d, dt);\n          /* possibly get more bits from distance code */\n\n          offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n          /* copy match */\n\n          for (i = offs; i < offs + length; ++i) {\n            d.dest[d.destLen++] = d.dest[i];\n          }\n        }\n      }\n    }\n    /* inflate an uncompressed block of data */\n\n\n    function tinf_inflate_uncompressed_block(d) {\n      var length, invlength;\n      var i;\n      /* unread from bitbuffer */\n\n      while (d.bitcount > 8) {\n        d.sourceIndex--;\n        d.bitcount -= 8;\n      }\n      /* get length */\n\n\n      length = d.source[d.sourceIndex + 1];\n      length = 256 * length + d.source[d.sourceIndex];\n      /* get one's complement of length */\n\n      invlength = d.source[d.sourceIndex + 3];\n      invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n      /* check length */\n\n      if (length !== (~invlength & 0x0000ffff)) return TINF_DATA_ERROR;\n      d.sourceIndex += 4;\n      /* copy block */\n\n      for (i = length; i; --i) {\n        d.dest[d.destLen++] = d.source[d.sourceIndex++];\n      }\n      /* make sure we start next block on a byte boundary */\n\n\n      d.bitcount = 0;\n      return TINF_OK;\n    }\n    /* inflate stream from source to dest */\n\n\n    function tinf_uncompress(source, dest) {\n      var d = new Data(source, dest);\n      var bfinal, btype, res;\n\n      do {\n        /* read final block flag */\n        bfinal = tinf_getbit(d);\n        /* read block type (2 bits) */\n\n        btype = tinf_read_bits(d, 2, 0);\n        /* decompress block */\n\n        switch (btype) {\n          case 0:\n            /* decompress uncompressed block */\n            res = tinf_inflate_uncompressed_block(d);\n            break;\n\n          case 1:\n            /* decompress block with fixed huffman trees */\n            res = tinf_inflate_block_data(d, sltree, sdtree);\n            break;\n\n          case 2:\n            /* decompress block with dynamic huffman trees */\n            tinf_decode_trees(d, d.ltree, d.dtree);\n            res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n            break;\n\n          default:\n            res = TINF_DATA_ERROR;\n        }\n\n        if (res !== TINF_OK) throw new Error('Data error');\n      } while (!bfinal);\n\n      if (d.destLen < d.dest.length) {\n        if (typeof d.dest.slice === 'function') return d.dest.slice(0, d.destLen);else return d.dest.subarray(0, d.destLen);\n      }\n\n      return d.dest;\n    }\n    /* -------------------- *\r\n     * -- initialization -- *\r\n     * -------------------- */\n\n    /* build fixed huffman trees */\n\n\n    tinf_build_fixed_trees(sltree, sdtree);\n    /* build extra bits and base tables */\n\n    tinf_build_bits_base(length_bits, length_base, 4, 3);\n    tinf_build_bits_base(dist_bits, dist_base, 2, 1);\n    /* fix a special case */\n\n    length_bits[28] = 0;\n    length_base[28] = 258;\n    module.exports = tinf_uncompress;\n    return module.exports;\n  }(); // End tinyInflate\n  // Begin woff2otf.js\n\n  /*\r\n   Copyright 2012, Steffen Hanikel (https://github.com/hanikesn)\r\n   Modified by Artemy Tregubenko, 2014 (https://github.com/arty-name/woff2otf)\r\n   Modified by Jason Johnston, 2019 (pako --> tiny-inflate)\r\n   \r\n     Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     you may not use this file except in compliance with the License.\r\n     You may obtain a copy of the License at\r\n  \r\n         http://www.apache.org/licenses/LICENSE-2.0\r\n  \r\n     Unless required by applicable law or agreed to in writing, software\r\n     distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     See the License for the specific language governing permissions and\r\n     limitations under the License.\r\n  \r\n   A tool to convert a WOFF back to a TTF/OTF font file, in pure Javascript\r\n  */\n\n\n  function convert_streams(bufferIn, tinyInflate) {\n    var dataViewIn = new DataView(bufferIn);\n    var offsetIn = 0;\n\n    function read2() {\n      var uint16 = dataViewIn.getUint16(offsetIn);\n      offsetIn += 2;\n      return uint16;\n    }\n\n    function read4() {\n      var uint32 = dataViewIn.getUint32(offsetIn);\n      offsetIn += 4;\n      return uint32;\n    }\n\n    function write2(uint16) {\n      dataViewOut.setUint16(offsetOut, uint16);\n      offsetOut += 2;\n    }\n\n    function write4(uint32) {\n      dataViewOut.setUint32(offsetOut, uint32);\n      offsetOut += 4;\n    }\n\n    var WOFFHeader = {\n      signature: read4(),\n      flavor: read4(),\n      length: read4(),\n      numTables: read2(),\n      reserved: read2(),\n      totalSfntSize: read4(),\n      majorVersion: read2(),\n      minorVersion: read2(),\n      metaOffset: read4(),\n      metaLength: read4(),\n      metaOrigLength: read4(),\n      privOffset: read4(),\n      privLength: read4()\n    };\n    var entrySelector = 0;\n\n    while (Math.pow(2, entrySelector) <= WOFFHeader.numTables) {\n      entrySelector++;\n    }\n\n    entrySelector--;\n    var searchRange = Math.pow(2, entrySelector) * 16;\n    var rangeShift = WOFFHeader.numTables * 16 - searchRange;\n    var offset = 4 + 2 + 2 + 2 + 2;\n    var TableDirectoryEntries = [];\n\n    for (var i = 0; i < WOFFHeader.numTables; i++) {\n      TableDirectoryEntries.push({\n        tag: read4(),\n        offset: read4(),\n        compLength: read4(),\n        origLength: read4(),\n        origChecksum: read4()\n      });\n      offset += 4 * 4;\n    }\n\n    var arrayOut = new Uint8Array(4 + 2 + 2 + 2 + 2 + TableDirectoryEntries.length * (4 + 4 + 4 + 4) + TableDirectoryEntries.reduce(function (acc, entry) {\n      return acc + entry.origLength + 4;\n    }, 0));\n    var bufferOut = arrayOut.buffer;\n    var dataViewOut = new DataView(bufferOut);\n    var offsetOut = 0;\n    write4(WOFFHeader.flavor);\n    write2(WOFFHeader.numTables);\n    write2(searchRange);\n    write2(entrySelector);\n    write2(rangeShift);\n    TableDirectoryEntries.forEach(function (TableDirectoryEntry) {\n      write4(TableDirectoryEntry.tag);\n      write4(TableDirectoryEntry.origChecksum);\n      write4(offset);\n      write4(TableDirectoryEntry.origLength);\n      TableDirectoryEntry.outOffset = offset;\n      offset += TableDirectoryEntry.origLength;\n\n      if (offset % 4 != 0) {\n        offset += 4 - offset % 4;\n      }\n    });\n    var size;\n    TableDirectoryEntries.forEach(function (TableDirectoryEntry) {\n      var compressedData = bufferIn.slice(TableDirectoryEntry.offset, TableDirectoryEntry.offset + TableDirectoryEntry.compLength);\n\n      if (TableDirectoryEntry.compLength != TableDirectoryEntry.origLength) {\n        var uncompressedData = new Uint8Array(TableDirectoryEntry.origLength);\n        tinyInflate(new Uint8Array(compressedData, 2), //skip deflate header\n        uncompressedData);\n      } else {\n        uncompressedData = new Uint8Array(compressedData);\n      }\n\n      arrayOut.set(uncompressedData, TableDirectoryEntry.outOffset);\n      offset = TableDirectoryEntry.outOffset + TableDirectoryEntry.origLength;\n      var padding = 0;\n\n      if (offset % 4 != 0) {\n        padding = 4 - offset % 4;\n      }\n\n      arrayOut.set(new Uint8Array(padding).buffer, TableDirectoryEntry.outOffset + TableDirectoryEntry.origLength);\n      size = offset + padding;\n    });\n    return bufferOut.slice(0, size);\n  } // End woff2otf.js\n\n\n  return function (buffer) {\n    return convert_streams(buffer, tinyInflate);\n  };\n}\n/**\r\n * An adapter that allows Typr.js to be used as if it were (a subset of) the OpenType.js API.\r\n * Also adds support for WOFF files (not WOFF2).\r\n */\n\n\nfunction parserFactory(Typr, woff2otf) {\n  var cmdArgLengths = {\n    M: 2,\n    L: 2,\n    Q: 4,\n    C: 6,\n    Z: 0\n  };\n\n  function wrapFontObj(typrFont) {\n    var glyphMap = Object.create(null);\n    var fontObj = {\n      unitsPerEm: typrFont.head.unitsPerEm,\n      ascender: typrFont.hhea.ascender,\n      descender: typrFont.hhea.descender,\n      forEachGlyph: function forEachGlyph(text, fontSize, letterSpacing, callback) {\n        var glyphX = 0;\n        var fontScale = 1 / fontObj.unitsPerEm * fontSize;\n        var glyphIndices = Typr.U.stringToGlyphs(typrFont, text);\n        var charIndex = 0;\n        glyphIndices.forEach(function (glyphIndex) {\n          // Typr returns a glyph index per string codepoint, with -1s in place of those that\n          // were omitted due to ligature substitution. So we can track original index in the\n          // string via simple increment, and skip everything else when seeing a -1.\n          if (glyphIndex !== -1) {\n            var glyphObj = glyphMap[glyphIndex];\n\n            if (!glyphObj) {\n              var _Typr$U$glyphToPath = Typr.U.glyphToPath(typrFont, glyphIndex),\n                  cmds = _Typr$U$glyphToPath.cmds,\n                  crds = _Typr$U$glyphToPath.crds; // Find extents - Glyf gives this in metadata but not CFF, and Typr doesn't\n              // normalize the two, so it's simplest just to iterate ourselves.\n\n\n              var xMin, yMin, xMax, yMax;\n\n              if (crds.length) {\n                xMin = yMin = Infinity;\n                xMax = yMax = -Infinity;\n\n                for (var i = 0, len = crds.length; i < len; i += 2) {\n                  var x = crds[i];\n                  var y = crds[i + 1];\n                  if (x < xMin) xMin = x;\n                  if (y < yMin) yMin = y;\n                  if (x > xMax) xMax = x;\n                  if (y > yMax) yMax = y;\n                }\n              } else {\n                xMin = xMax = yMin = yMax = 0;\n              }\n\n              glyphObj = glyphMap[glyphIndex] = {\n                index: glyphIndex,\n                advanceWidth: typrFont.hmtx.aWidth[glyphIndex],\n                xMin: xMin,\n                yMin: yMin,\n                xMax: xMax,\n                yMax: yMax,\n                pathCommandCount: cmds.length,\n                forEachPathCommand: function forEachPathCommand(callback) {\n                  var argsIndex = 0;\n                  var argsArray = [];\n\n                  for (var _i3 = 0, _len = cmds.length; _i3 < _len; _i3++) {\n                    var numArgs = cmdArgLengths[cmds[_i3]];\n                    argsArray.length = 1 + numArgs;\n                    argsArray[0] = cmds[_i3];\n\n                    for (var j = 1; j <= numArgs; j++) {\n                      argsArray[j] = crds[argsIndex++];\n                    }\n\n                    callback.apply(null, argsArray);\n                  }\n                }\n              };\n            }\n\n            callback.call(null, glyphObj, glyphX, charIndex);\n\n            if (glyphObj.advanceWidth) {\n              glyphX += glyphObj.advanceWidth * fontScale;\n            }\n\n            if (letterSpacing) {\n              glyphX += letterSpacing * fontSize;\n            }\n          }\n\n          charIndex += text.codePointAt(charIndex) > 0xffff ? 2 : 1;\n        });\n        return glyphX;\n      }\n    };\n    return fontObj;\n  }\n\n  return function parse(buffer) {\n    // Look to see if we have a WOFF file and convert it if so:\n    var peek = new Uint8Array(buffer, 0, 4);\n\n    var tag = Typr._bin.readASCII(peek, 0, 4);\n\n    if (tag === 'wOFF') {\n      buffer = woff2otf(buffer);\n    } else if (tag === 'wOF2') {\n      throw new Error('woff2 fonts not supported');\n    }\n\n    return wrapFontObj(Typr.parse(buffer)[0]);\n  };\n}\n\nvar workerModule = /*#__PURE__*/defineWorkerModule({\n  name: 'Typr Font Parser',\n  dependencies: [typrFactory, woff2otfFactory, parserFactory],\n  init: function init(typrFactory, woff2otfFactory, parserFactory) {\n    var Typr = typrFactory();\n    var woff2otf = woff2otfFactory();\n    return parserFactory(Typr, woff2otf);\n  }\n}); //import fontParser from './FontParser_OpenType.js'\n\nvar CONFIG = {\n  defaultFontURL: 'https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxM.woff',\n  //Roboto Regular\n  sdfGlyphSize: 64,\n  sdfMargin: 1 / 16,\n  sdfExponent: 9,\n  textureWidth: 2048\n};\nvar tempColor = /*#__PURE__*/new Color();\nvar hasRequested = false;\n/**\r\n * Customizes the text builder configuration. This must be called prior to the first font processing\r\n * request, and applies to all fonts.\r\n *\r\n * @param {String} config.defaultFontURL - The URL of the default font to use for text processing\r\n *                 requests, in case none is specified or the specifiede font fails to load or parse.\r\n *                 Defaults to \"Roboto Regular\" from Google Fonts.\r\n * @param {Number} config.sdfGlyphSize - The default size of each glyph's SDF (signed distance field)\r\n *                 texture used for rendering. Must be a power-of-two number, and applies to all fonts,\r\n *                 but note that this can also be overridden per call to `getTextRenderInfo()`.\r\n *                 Larger sizes can improve the quality of glyph rendering by increasing the sharpness\r\n *                 of corners and preventing loss of very thin lines, at the expense of memory. Defaults\r\n *                 to 64 which is generally a good balance of size and quality.\r\n * @param {Number} config.sdfExponent - The exponent used when encoding the SDF values. A higher exponent\r\n *                 shifts the encoded 8-bit values to achieve higher precision/accuracy at texels nearer\r\n *                 the glyph's path, with lower precision further away. Defaults to 9.\r\n * @param {Number} config.sdfMargin - How much space to reserve in the SDF as margin outside the glyph's\r\n *                 path, as a percentage of the SDF width. A larger margin increases the quality of\r\n *                 extruded glyph outlines, but decreases the precision available for the glyph itself.\r\n *                 Defaults to 1/16th of the glyph size.\r\n * @param {Number} config.textureWidth - The width of the SDF texture; must be a power of 2. Defaults to\r\n *                 2048 which is a safe maximum texture dimension according to the stats at\r\n *                 https://webglstats.com/webgl/parameter/MAX_TEXTURE_SIZE and should allow for a\r\n *                 reasonably large number of glyphs (default glyph size of 64 and safe texture size of\r\n *                 2048^2 allows for 1024 glyphs.) This can be increased if you need to increase the\r\n *                 glyph size and/or have an extraordinary number of glyphs.\r\n */\n\nfunction configureTextBuilder(config) {\n  if (hasRequested) {\n    console.warn('configureTextBuilder called after first font request; will be ignored.');\n  } else {\n    assign(CONFIG, config);\n  }\n}\n/**\r\n * Repository for all font SDF atlas textures\r\n *\r\n *   {\r\n *     [font]: {\r\n *       sdfTexture: DataTexture\r\n *     }\r\n *   }\r\n */\n\n\nvar atlases = Object.create(null);\n/**\r\n * @typedef {object} TroikaTextRenderInfo - Format of the result from `getTextRenderInfo`.\r\n * @property {object} parameters - The normalized input arguments to the render call.\r\n * @property {DataTexture} sdfTexture - The SDF atlas texture.\r\n * @property {number} sdfGlyphSize - The size of each glyph's SDF; see `configureTextBuilder`.\r\n * @property {number} sdfExponent - The exponent used in encoding the SDF's values; see `configureTextBuilder`.\r\n * @property {Float32Array} glyphBounds - List of [minX, minY, maxX, maxY] quad bounds for each glyph.\r\n * @property {Float32Array} glyphAtlasIndices - List holding each glyph's index in the SDF atlas.\r\n * @property {Uint8Array} [glyphColors] - List holding each glyph's [r, g, b] color, if `colorRanges` was supplied.\r\n * @property {Float32Array} [caretPositions] - A list of caret positions for all glyphs; this is\r\n *           the bottom [x,y] of the cursor position before each char, plus one after the last char.\r\n * @property {number} [caretHeight] - An appropriate height for all selection carets.\r\n * @property {number} ascender - The font's ascender metric.\r\n * @property {number} descender - The font's descender metric.\r\n * @property {number} lineHeight - The final computed lineHeight measurement.\r\n * @property {number} topBaseline - The y position of the top line's baseline.\r\n * @property {Array<number>} blockBounds - The total [minX, minY, maxX, maxY] rect of the whole text block;\r\n *           this can include extra vertical space beyond the visible glyphs due to lineHeight, and is\r\n *           equivalent to the dimensions of a block-level text element in CSS.\r\n * @property {Array<number>} visibleBounds -\r\n * @property {Array<number>} totalBounds - DEPRECATED; use blockBounds instead.\r\n * @property {Array<number>} totalBlockSize - DEPRECATED; use blockBounds instead\r\n * @property {Array<number>} chunkedBounds - List of bounding rects for each consecutive set of N glyphs,\r\n *           in the format `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`.\r\n * @property {object} timings - Timing info for various parts of the rendering logic including SDF\r\n *           generation, layout, etc.\r\n * @frozen\r\n */\n\n/**\r\n * @callback getTextRenderInfo~callback\r\n * @param {TroikaTextRenderInfo} textRenderInfo\r\n */\n\n/**\r\n * Main entry point for requesting the data needed to render a text string with given font parameters.\r\n * This is an asynchronous call, performing most of the logic in a web worker thread.\r\n * @param {object} args\r\n * @param {getTextRenderInfo~callback} callback\r\n */\n\nfunction getTextRenderInfo(args, callback) {\n  hasRequested = true;\n  args = assign({}, args); // Apply default font here to avoid a 'null' atlas, and convert relative\n  // URLs to absolute so they can be resolved in the worker\n\n  args.font = toAbsoluteURL(args.font || CONFIG.defaultFontURL); // Normalize text to a string\n\n  args.text = '' + args.text;\n  args.sdfGlyphSize = args.sdfGlyphSize || CONFIG.sdfGlyphSize; // Normalize colors\n\n  if (args.colorRanges != null) {\n    var colors = {};\n\n    for (var key in args.colorRanges) {\n      if (args.colorRanges.hasOwnProperty(key)) {\n        var val = args.colorRanges[key];\n\n        if (typeof val !== 'number') {\n          val = tempColor.set(val).getHex();\n        }\n\n        colors[key] = val;\n      }\n    }\n\n    args.colorRanges = colors;\n  }\n\n  Object.freeze(args); // Init the atlas for this font if needed\n\n  var textureWidth = CONFIG.textureWidth,\n      sdfExponent = CONFIG.sdfExponent;\n  var _args = args,\n      sdfGlyphSize = _args.sdfGlyphSize;\n  var atlasKey = \"\".concat(args.font, \"@\").concat(sdfGlyphSize);\n  var atlas = atlases[atlasKey];\n\n  if (!atlas) {\n    atlas = atlases[atlasKey] = {\n      sdfTexture: new DataTexture(new Uint8Array(sdfGlyphSize * textureWidth), textureWidth, sdfGlyphSize, LuminanceFormat, undefined, undefined, undefined, undefined, LinearFilter, LinearFilter)\n    };\n    atlas.sdfTexture.font = args.font;\n  } // Issue request to the FontProcessor in the worker\n\n\n  processInWorker(args).then(function (result) {\n    // If the response has newGlyphs, copy them into the atlas texture at the specified indices\n    if (result.newGlyphSDFs) {\n      result.newGlyphSDFs.forEach(function (_ref2) {\n        var textureData = _ref2.textureData,\n            atlasIndex = _ref2.atlasIndex;\n        var texImg = atlas.sdfTexture.image; // Grow the texture by power of 2 if needed\n\n        while (texImg.data.length < (atlasIndex + 1) * sdfGlyphSize * sdfGlyphSize) {\n          var biggerArray = new Uint8Array(texImg.data.length * 2);\n          biggerArray.set(texImg.data);\n          texImg.data = biggerArray;\n          texImg.height *= 2;\n        } // Insert the new glyph's data into the full texture image at the correct offsets\n\n\n        var cols = texImg.width / sdfGlyphSize;\n        var baseStartIndex = texImg.width * sdfGlyphSize * Math.floor(atlasIndex / cols) //full rows\n        + atlasIndex % cols * sdfGlyphSize; //partial row\n\n        for (var y = 0; y < sdfGlyphSize; y++) {\n          var srcStartIndex = y * sdfGlyphSize;\n          var rowStartIndex = baseStartIndex + y * texImg.width;\n\n          for (var x = 0; x < sdfGlyphSize; x++) {\n            texImg.data[rowStartIndex + x] = textureData[srcStartIndex + x];\n          }\n        }\n      });\n      atlas.sdfTexture.needsUpdate = true;\n    } // Invoke callback with the text layout arrays and updated texture\n\n\n    callback(Object.freeze({\n      parameters: args,\n      sdfTexture: atlas.sdfTexture,\n      sdfGlyphSize: sdfGlyphSize,\n      sdfExponent: sdfExponent,\n      glyphBounds: result.glyphBounds,\n      glyphAtlasIndices: result.glyphAtlasIndices,\n      glyphColors: result.glyphColors,\n      caretPositions: result.caretPositions,\n      caretHeight: result.caretHeight,\n      chunkedBounds: result.chunkedBounds,\n      ascender: result.ascender,\n      descender: result.descender,\n      lineHeight: result.lineHeight,\n      topBaseline: result.topBaseline,\n      blockBounds: result.blockBounds,\n      visibleBounds: result.visibleBounds,\n      timings: result.timings,\n\n      get totalBounds() {\n        console.log('totalBounds deprecated, use blockBounds instead');\n        return result.blockBounds;\n      },\n\n      get totalBlockSize() {\n        console.log('totalBlockSize deprecated, use blockBounds instead');\n\n        var _result$blockBounds2 = _slicedToArray(result.blockBounds, 4),\n            x0 = _result$blockBounds2[0],\n            y0 = _result$blockBounds2[1],\n            x1 = _result$blockBounds2[2],\n            y1 = _result$blockBounds2[3];\n\n        return [x1 - x0, y1 - y0];\n      }\n\n    }));\n  });\n}\n/**\r\n * Preload a given font and optionally pre-generate glyph SDFs for one or more character sequences.\r\n * This can be useful to avoid long pauses when first showing text in a scene, by preloading the\r\n * needed fonts and glyphs up front along with other assets.\r\n *\r\n * @param {object} options\r\n * @param {string} options.font - URL of the font file to preload. If not given, the default font will\r\n *        be loaded.\r\n * @param {string|string[]} options.characters - One or more character sequences for which to pre-\r\n *        generate glyph SDFs. Note that this will honor ligature substitution, so you may need\r\n *        to specify ligature sequences in addition to their individual characters to get all\r\n *        possible glyphs, e.g. `[\"t\", \"h\", \"th\"]` to get the \"t\" and \"h\" glyphs plus the \"th\" ligature.\r\n * @param {number} options.sdfGlyphSize - The size at which to prerender the SDF textures for the\r\n *        specified `characters`.\r\n * @param {function} callback - A function that will be called when the preloading is complete.\r\n */\n\n\nfunction preloadFont(_ref3, callback) {\n  var font = _ref3.font,\n      characters = _ref3.characters,\n      sdfGlyphSize = _ref3.sdfGlyphSize;\n  var text = Array.isArray(characters) ? characters.join('\\n') : '' + characters;\n  getTextRenderInfo({\n    font: font,\n    sdfGlyphSize: sdfGlyphSize,\n    text: text\n  }, callback);\n} // Local assign impl so we don't have to import troika-core\n\n\nfunction assign(toObj, fromObj) {\n  for (var key in fromObj) {\n    if (fromObj.hasOwnProperty(key)) {\n      toObj[key] = fromObj[key];\n    }\n  }\n\n  return toObj;\n} // Utility for making URLs absolute\n\n\nvar linkEl;\n\nfunction toAbsoluteURL(path) {\n  if (!linkEl) {\n    linkEl = typeof document === 'undefined' ? {} : document.createElement('a');\n  }\n\n  linkEl.href = path;\n  return linkEl.href;\n}\n\nvar fontProcessorWorkerModule = /*#__PURE__*/defineWorkerModule({\n  name: 'FontProcessor',\n  dependencies: [CONFIG, workerModule, createGlyphSegmentsIndex, createSDFGenerator, createFontProcessor],\n  init: function init(config, fontParser, createGlyphSegmentsIndex, createSDFGenerator, createFontProcessor) {\n    var sdfExponent = config.sdfExponent,\n        sdfMargin = config.sdfMargin,\n        defaultFontURL = config.defaultFontURL;\n    var sdfGenerator = createSDFGenerator(createGlyphSegmentsIndex, {\n      sdfExponent: sdfExponent,\n      sdfMargin: sdfMargin\n    });\n    return createFontProcessor(fontParser, sdfGenerator, {\n      defaultFontURL: defaultFontURL\n    });\n  }\n});\nvar processInWorker = /*#__PURE__*/defineWorkerModule({\n  name: 'TextBuilder',\n  dependencies: [fontProcessorWorkerModule, ThenableWorkerModule],\n  init: function init(fontProcessor, Thenable) {\n    return function (args) {\n      var thenable = new Thenable();\n      fontProcessor.process(args, thenable.resolve);\n      return thenable;\n    };\n  },\n  getTransferables: function getTransferables(result) {\n    // Mark array buffers as transferable to avoid cloning during postMessage\n    var transferables = [result.glyphBounds.buffer, result.glyphAtlasIndices.buffer];\n\n    if (result.caretPositions) {\n      transferables.push(result.caretPositions.buffer);\n    }\n\n    if (result.newGlyphSDFs) {\n      result.newGlyphSDFs.forEach(function (d) {\n        transferables.push(d.textureData.buffer);\n      });\n    }\n\n    return transferables;\n  }\n});\n\nvar GlyphsGeometry = /*#__PURE__*/function () {\n  var templateGeometries = {};\n\n  function getTemplateGeometry(detail) {\n    var geom = templateGeometries[detail];\n\n    if (!geom) {\n      geom = templateGeometries[detail] = new PlaneBufferGeometry(1, 1, detail, detail).translate(0.5, 0.5, 0);\n    }\n\n    return geom;\n  }\n\n  var tempVec3 = new Vector3();\n  var glyphBoundsAttrName = 'aTroikaGlyphBounds';\n  var glyphIndexAttrName = 'aTroikaGlyphIndex';\n  var glyphColorAttrName = 'aTroikaGlyphColor';\n  /**\r\n  @class GlyphsGeometry\r\n    A specialized Geometry for rendering a set of text glyphs. Uses InstancedBufferGeometry to\r\n  render the glyphs using GPU instancing of a single quad, rather than constructing a whole\r\n  geometry with vertices, for much smaller attribute arraybuffers according to this math:\r\n      Where N = number of glyphs...\r\n      Instanced:\r\n    - position: 4 * 3\r\n    - index: 2 * 3\r\n    - normal: 4 * 3\r\n    - uv: 4 * 2\r\n    - glyph x/y bounds: N * 4\r\n    - glyph indices: N * 1\r\n    = 5N + 38\r\n      Non-instanced:\r\n    - position: N * 4 * 3\r\n    - index: N * 2 * 3\r\n    - normal: N * 4 * 3\r\n    - uv: N * 4 * 2\r\n    - glyph indices: N * 1\r\n    = 39N\r\n    A downside of this is the rare-but-possible lack of the instanced arrays extension,\r\n  which we could potentially work around with a fallback non-instanced implementation.\r\n    */\n\n  var GlyphsGeometry = /*#__PURE__*/function (_InstancedBufferGeome) {\n    _inherits(GlyphsGeometry, _InstancedBufferGeome);\n\n    var _super = _createSuper(GlyphsGeometry);\n\n    function GlyphsGeometry() {\n      var _this;\n\n      _classCallCheck(this, GlyphsGeometry);\n\n      _this = _super.call(this);\n      _this.detail = 1; // Define groups for rendering text outline as a separate pass; these will only\n      // be used when the `material` getter returns an array, i.e. outlineWidth > 0.\n\n      _this.groups = [{\n        start: 0,\n        count: Infinity,\n        materialIndex: 0\n      }, {\n        start: 0,\n        count: Infinity,\n        materialIndex: 1\n      }]; // Preallocate zero-radius bounding sphere\n\n      _this.boundingSphere = new Sphere();\n      _this.boundingBox = new Box3();\n      return _this;\n    }\n\n    _createClass(GlyphsGeometry, [{\n      key: \"computeBoundingSphere\",\n      value: function computeBoundingSphere() {// No-op; we'll sync the boundingSphere proactively in `updateGlyphs`.\n      }\n    }, {\n      key: \"computeBoundingBox\",\n      value: function computeBoundingBox() {// No-op; we'll sync the boundingBox proactively in `updateGlyphs`.\n      }\n    }, {\n      key: \"updateGlyphs\",\n\n      /**\r\n       * Update the geometry for a new set of glyphs.\r\n       * @param {Float32Array} glyphBounds - An array holding the planar bounds for all glyphs\r\n       *        to be rendered, 4 entries for each glyph: x1,x2,y1,y1\r\n       * @param {Float32Array} glyphAtlasIndices - An array holding the index of each glyph within\r\n       *        the SDF atlas texture.\r\n       * @param {Array} blockBounds - An array holding the [minX, minY, maxX, maxY] across all glyphs\r\n       * @param {Array} [chunkedBounds] - An array of objects describing bounds for each chunk of N\r\n       *        consecutive glyphs: `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`. This can be\r\n       *        used with `applyClipRect` to choose an optimized `instanceCount`.\r\n       * @param {Uint8Array} [glyphColors] - An array holding r,g,b values for each glyph.\r\n       */\n      value: function updateGlyphs(glyphBounds, glyphAtlasIndices, blockBounds, chunkedBounds, glyphColors) {\n        // Update the instance attributes\n        updateBufferAttr(this, glyphBoundsAttrName, glyphBounds, 4);\n        updateBufferAttr(this, glyphIndexAttrName, glyphAtlasIndices, 1);\n        updateBufferAttr(this, glyphColorAttrName, glyphColors, 3);\n        this._chunkedBounds = chunkedBounds;\n        setInstanceCount(this, glyphAtlasIndices.length); // Update the boundingSphere based on the total bounds\n\n        var sphere = this.boundingSphere;\n        sphere.center.set((blockBounds[0] + blockBounds[2]) / 2, (blockBounds[1] + blockBounds[3]) / 2, 0);\n        sphere.radius = sphere.center.distanceTo(tempVec3.set(blockBounds[0], blockBounds[1], 0)); // Update the boundingBox based on the total bounds\n\n        var box = this.boundingBox;\n        box.min.set(blockBounds[0], blockBounds[1], 0);\n        box.max.set(blockBounds[2], blockBounds[3], 0);\n      }\n      /**\r\n       * Given a clipping rect, and the chunkedBounds from the last updateGlyphs call, choose the lowest\r\n       * `instanceCount` that will show all glyphs within the clipped view. This is an optimization\r\n       * for long blocks of text that are clipped, to skip vertex shader evaluation for glyphs that would\r\n       * be clipped anyway.\r\n       *\r\n       * Note that since `drawElementsInstanced[ANGLE]` only accepts an instance count and not a starting\r\n       * offset, this optimization becomes less effective as the clipRect moves closer to the end of the\r\n       * text block. We could fix that by switching from instancing to a full geometry with a drawRange,\r\n       * but at the expense of much larger attribute buffers (see classdoc above.)\r\n       *\r\n       * @param {Vector4} clipRect\r\n       */\n\n    }, {\n      key: \"applyClipRect\",\n      value: function applyClipRect(clipRect) {\n        var count = this.getAttribute(glyphIndexAttrName).count;\n        var chunks = this._chunkedBounds;\n\n        if (chunks) {\n          for (var i = chunks.length; i--;) {\n            count = chunks[i].end;\n            var rect = chunks[i].rect; // note: both rects are l-b-r-t\n\n            if (rect[1] < clipRect.w && rect[3] > clipRect.y && rect[0] < clipRect.z && rect[2] > clipRect.x) {\n              break;\n            }\n          }\n        }\n\n        setInstanceCount(this, count);\n      }\n    }, {\n      key: \"detail\",\n      set: function set(detail) {\n        var _this2 = this;\n\n        if (detail !== this._detail) {\n          this._detail = detail;\n\n          if (typeof detail !== 'number' || detail < 1) {\n            detail = 1;\n          }\n\n          var tpl = getTemplateGeometry(detail);\n          ['position', 'normal', 'uv'].forEach(function (attr) {\n            _this2.attributes[attr] = tpl.attributes[attr].clone();\n          });\n          this.setIndex(tpl.getIndex().clone());\n        }\n      },\n      get: function get() {\n        return this._detail;\n      }\n    }]);\n\n    return GlyphsGeometry;\n  }(InstancedBufferGeometry); // Compat for pre r109:\n\n\n  if (!GlyphsGeometry.prototype.setAttribute) {\n    GlyphsGeometry.prototype.setAttribute = function (name, attribute) {\n      this.attributes[name] = attribute;\n      return this;\n    };\n  }\n\n  function updateBufferAttr(geom, attrName, newArray, itemSize) {\n    var attr = geom.getAttribute(attrName);\n\n    if (newArray) {\n      // If length isn't changing, just update the attribute's array data\n      if (attr && attr.array.length === newArray.length) {\n        attr.array.set(newArray);\n        attr.needsUpdate = true;\n      } else {\n        geom.setAttribute(attrName, new InstancedBufferAttribute(newArray, itemSize)); // If the new attribute has a different size, we also have to (as of r117) manually clear the\n        // internal cached max instance count. See https://github.com/mrdoob/three.js/issues/19706\n        // It's unclear if this is a threejs bug or a truly unsupported scenario; discussion in\n        // that ticket is ambiguous as to whether replacing a BufferAttribute with one of a\n        // different size is supported, but https://github.com/mrdoob/three.js/pull/17418 strongly\n        // implies it should be supported. It's possible we need to\n\n        delete geom._maxInstanceCount; //for r117+, could be fragile\n\n        geom.dispose(); //for r118+, more robust feeling, but more heavy-handed than I'd like\n      }\n    } else if (attr) {\n      geom.deleteAttribute(attrName);\n    }\n  } // Handle maxInstancedCount -> instanceCount rename that happened in three r117\n\n\n  function setInstanceCount(geom, count) {\n    geom[geom.hasOwnProperty('instanceCount') ? 'instanceCount' : 'maxInstancedCount'] = count;\n  }\n\n  return GlyphsGeometry;\n}(); // language=GLSL\n\n\nvar VERTEX_DEFS = \"\\nuniform vec2 uTroikaSDFTextureSize;\\nuniform float uTroikaSDFGlyphSize;\\nuniform vec4 uTroikaTotalBounds;\\nuniform vec4 uTroikaClipRect;\\nuniform mat3 uTroikaOrient;\\nuniform bool uTroikaUseGlyphColors;\\nuniform float uTroikaDistanceOffset;\\nattribute vec4 aTroikaGlyphBounds;\\nattribute float aTroikaGlyphIndex;\\nattribute vec3 aTroikaGlyphColor;\\nvarying vec2 vTroikaGlyphUV;\\nvarying vec4 vTroikaTextureUVBounds;\\nvarying vec3 vTroikaGlyphColor;\\nvarying vec2 vTroikaGlyphDimensions;\\n\"; // language=GLSL prefix=\"void main() {\" suffix=\"}\"\n\nvar VERTEX_TRANSFORM = \"\\nvec4 bounds = aTroikaGlyphBounds;\\nvec4 outlineBounds = vec4(bounds.xy - uTroikaDistanceOffset, bounds.zw + uTroikaDistanceOffset);\\nvec4 clippedBounds = vec4(\\n  clamp(outlineBounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),\\n  clamp(outlineBounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)\\n);\\nvec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);\\n\\nposition.xy = mix(bounds.xy, bounds.zw, clippedXY);\\n\\nuv = (position.xy - uTroikaTotalBounds.xy) / (uTroikaTotalBounds.zw - uTroikaTotalBounds.xy);\\n\\nposition = uTroikaOrient * position;\\nnormal = uTroikaOrient * normal;\\n\\nvTroikaGlyphUV = clippedXY.xy;\\nvTroikaGlyphDimensions = vec2(bounds[2] - bounds[0], bounds[3] - bounds[1]);\\n\\n\".concat(\"\\nfloat txCols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;\\nvec2 txUvPerGlyph = uTroikaSDFGlyphSize / uTroikaSDFTextureSize;\\nvec2 txStartUV = txUvPerGlyph * vec2(\\n  mod(aTroikaGlyphIndex, txCols),\\n  floor(aTroikaGlyphIndex / txCols)\\n);\\nvTroikaTextureUVBounds = vec4(txStartUV, vec2(txStartUV) + txUvPerGlyph);\\n\"); // language=GLSL\n\nvar FRAGMENT_DEFS = \"\\nuniform sampler2D uTroikaSDFTexture;\\nuniform vec2 uTroikaSDFTextureSize;\\nuniform float uTroikaSDFGlyphSize;\\nuniform float uTroikaSDFExponent;\\nuniform float uTroikaDistanceOffset;\\nuniform bool uTroikaSDFDebug;\\nvarying vec2 vTroikaGlyphUV;\\nvarying vec4 vTroikaTextureUVBounds;\\nvarying vec2 vTroikaGlyphDimensions;\\n\\nfloat troikaSdfValueToSignedDistance(float alpha) {\\n  // Inverse of encoding in SDFGenerator.js\\n  \".concat(\"\\n  float maxDimension = max(vTroikaGlyphDimensions.x, vTroikaGlyphDimensions.y);\\n  float absDist = (1.0 - pow(2.0 * (alpha > 0.5 ? 1.0 - alpha : alpha), 1.0 / uTroikaSDFExponent)) * maxDimension;\\n  float signedDist = absDist * (alpha > 0.5 ? -1.0 : 1.0);\\n  return signedDist;\\n}\\n\\nfloat troikaGlyphUvToSdfValue(vec2 glyphUV) {\\n  vec2 textureUV = mix(vTroikaTextureUVBounds.xy, vTroikaTextureUVBounds.zw, glyphUV);\\n  return texture2D(uTroikaSDFTexture, textureUV).r;\\n}\\n\\nfloat troikaGlyphUvToDistance(vec2 uv) {\\n  return troikaSdfValueToSignedDistance(troikaGlyphUvToSdfValue(uv));\\n}\\n\\nfloat troikaGetTextAlpha(float distanceOffset) {\\n  vec2 clampedGlyphUV = clamp(vTroikaGlyphUV, 0.5 / uTroikaSDFGlyphSize, 1.0 - 0.5 / uTroikaSDFGlyphSize);\\n  float distance = troikaGlyphUvToDistance(clampedGlyphUV);\\n    \\n  // Extrapolate distance when outside bounds:\\n  distance += clampedGlyphUV == vTroikaGlyphUV ? 0.0 : \\n    length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);\\n\\n  \", \"\\n  \\n  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)\\n  float alpha = step(-distanceOffset, -distance);\\n  #else\\n  \", \"\\n  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300\\n  float aaDist = length(fwidth(vTroikaGlyphUV * vTroikaGlyphDimensions)) * 0.5;\\n  #else\\n  float aaDist = vTroikaGlyphDimensions.x / 64.0;\\n  #endif\\n  \\n  float alpha = smoothstep(\\n    distanceOffset + aaDist,\\n    distanceOffset - aaDist,\\n    distance\\n  );\\n  #endif\\n  \\n  return alpha;\\n}\\n\"); // language=GLSL prefix=\"void main() {\" suffix=\"}\"\n\nvar FRAGMENT_TRANSFORM = \"\\nfloat alpha = uTroikaSDFDebug ?\\n  troikaGlyphUvToSdfValue(vTroikaGlyphUV) :\\n  troikaGetTextAlpha(uTroikaDistanceOffset);\\n\\n#if !defined(IS_DEPTH_MATERIAL) && !defined(IS_DISTANCE_MATERIAL)\\ngl_FragColor.a *= alpha;\\n#endif\\n  \\nif (alpha == 0.0) {\\n  discard;\\n}\\n\";\n/**\r\n * Create a material for rendering text, derived from a baseMaterial\r\n */\n\nfunction createTextDerivedMaterial(baseMaterial) {\n  var textMaterial = createDerivedMaterial(baseMaterial, {\n    chained: true,\n    extensions: {\n      derivatives: true\n    },\n    uniforms: {\n      uTroikaSDFTexture: {\n        value: null\n      },\n      uTroikaSDFTextureSize: {\n        value: new Vector2()\n      },\n      uTroikaSDFGlyphSize: {\n        value: 0\n      },\n      uTroikaSDFExponent: {\n        value: 0\n      },\n      uTroikaTotalBounds: {\n        value: new Vector4(0, 0, 0, 0)\n      },\n      uTroikaClipRect: {\n        value: new Vector4(0, 0, 0, 0)\n      },\n      uTroikaDistanceOffset: {\n        value: 0\n      },\n      uTroikaOrient: {\n        value: new Matrix3()\n      },\n      uTroikaUseGlyphColors: {\n        value: true\n      },\n      uTroikaSDFDebug: {\n        value: false\n      }\n    },\n    vertexDefs: VERTEX_DEFS,\n    vertexTransform: VERTEX_TRANSFORM,\n    fragmentDefs: FRAGMENT_DEFS,\n    fragmentColorTransform: FRAGMENT_TRANSFORM,\n    customRewriter: function customRewriter(_ref4) {\n      var vertexShader = _ref4.vertexShader,\n          fragmentShader = _ref4.fragmentShader;\n      var uDiffuseRE = /\\buniform\\s+vec3\\s+diffuse\\b/;\n\n      if (uDiffuseRE.test(fragmentShader)) {\n        // Replace all instances of `diffuse` with our varying\n        fragmentShader = fragmentShader.replace(uDiffuseRE, 'varying vec3 vTroikaGlyphColor').replace(/\\bdiffuse\\b/g, 'vTroikaGlyphColor'); // Make sure the vertex shader declares the uniform so we can grab it as a fallback\n\n        if (!uDiffuseRE.test(vertexShader)) {\n          vertexShader = vertexShader.replace(voidMainRegExp, 'uniform vec3 diffuse;\\n$&\\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\\n');\n        }\n      }\n\n      return {\n        vertexShader: vertexShader,\n        fragmentShader: fragmentShader\n      };\n    }\n  }); // Force transparency - TODO is this reasonable?\n\n  textMaterial.transparent = true;\n  Object.defineProperties(textMaterial, {\n    isTroikaTextMaterial: {\n      value: true\n    },\n    // WebGLShadowMap reverses the side of the shadow material by default, which fails\n    // for planes, so here we force the `shadowSide` to always match the main side.\n    shadowSide: {\n      get: function get() {\n        return this.side;\n      },\n      set: function set() {//no-op\n      }\n    }\n  });\n  return textMaterial;\n}\n\nvar Text = /*#__PURE__*/function () {\n  var defaultMaterial = new MeshBasicMaterial({\n    color: 0xffffff,\n    side: DoubleSide,\n    transparent: true\n  });\n  var tempMat4 = new Matrix4();\n  var tempVec3a = new Vector3();\n  var tempVec3b = new Vector3();\n  var tempArray = [];\n  var origin = new Vector3();\n  var defaultOrient = '+x+y';\n\n  function first(o) {\n    return Array.isArray(o) ? o[0] : o;\n  }\n\n  var raycastMesh = new Mesh(new PlaneBufferGeometry(1, 1).translate(0.5, 0.5, 0), defaultMaterial);\n  var syncStartEvent = {\n    type: 'syncstart'\n  };\n  var syncCompleteEvent = {\n    type: 'synccomplete'\n  };\n  var SYNCABLE_PROPS = ['font', 'fontSize', 'letterSpacing', 'lineHeight', 'maxWidth', 'overflowWrap', 'text', 'textAlign', 'textIndent', 'whiteSpace', 'anchorX', 'anchorY', 'colorRanges', 'sdfGlyphSize'];\n  var COPYABLE_PROPS = SYNCABLE_PROPS.concat('material', 'color', 'depthOffset', 'clipRect', 'orientation', 'glyphGeometryDetail');\n  /**\r\n   * @class Text\r\n   *\r\n   * A ThreeJS Mesh that renders a string of text on a plane in 3D space using signed distance\r\n   * fields (SDF).\r\n   */\n\n  var Text = /*#__PURE__*/function (_Mesh) {\n    _inherits(Text, _Mesh);\n\n    var _super2 = _createSuper(Text);\n\n    function Text() {\n      var _this3;\n\n      _classCallCheck(this, Text);\n\n      var geometry = new GlyphsGeometry();\n      _this3 = _super2.call(this, geometry, null); // === Text layout properties: === //\n\n      /**\r\n       * @member {string} text\r\n       * The string of text to be rendered.\r\n       */\n\n      _this3.text = '';\n      /**\r\n       * @deprecated Use `anchorX` and `anchorY` instead\r\n       * @member {Array<number>} anchor\r\n       * Defines where in the text block should correspond to the mesh's local position, as a set\r\n       * of horizontal and vertical percentages from 0 to 1. A value of `[0, 0]` (the default)\r\n       * anchors at the top-left, `[1, 1]` at the bottom-right, and `[0.5, 0.5]` centers the\r\n       * block at the mesh's position.\r\n       */\n      //this.anchor = null\n\n      /**\r\n       * @member {number|string} anchorX\r\n       * Defines the horizontal position in the text block that should line up with the local origin.\r\n       * Can be specified as a numeric x position in local units, a string percentage of the total\r\n       * text block width e.g. `'25%'`, or one of the following keyword strings: 'left', 'center',\r\n       * or 'right'.\r\n       */\n\n      _this3.anchorX = 0;\n      /**\r\n       * @member {number|string} anchorX\r\n       * Defines the vertical position in the text block that should line up with the local origin.\r\n       * Can be specified as a numeric y position in local units (note: down is negative y), a string\r\n       * percentage of the total text block height e.g. `'25%'`, or one of the following keyword strings:\r\n       * 'top', 'top-baseline', 'middle', 'bottom-baseline', or 'bottom'.\r\n       */\n\n      _this3.anchorY = 0;\n      /**\r\n       * @member {string} font\r\n       * URL of a custom font to be used. Font files can be any of the formats supported by\r\n       * OpenType (see https://github.com/opentypejs/opentype.js).\r\n       * Defaults to the Roboto font loaded from Google Fonts.\r\n       */\n\n      _this3.font = null; //will use default from TextBuilder\n\n      /**\r\n       * @member {number} fontSize\r\n       * The size at which to render the font in local units; corresponds to the em-box height\r\n       * of the chosen `font`.\r\n       */\n\n      _this3.fontSize = 0.1;\n      /**\r\n       * @member {number} letterSpacing\r\n       * Sets a uniform adjustment to spacing between letters after kerning is applied. Positive\r\n       * numbers increase spacing and negative numbers decrease it.\r\n       */\n\n      _this3.letterSpacing = 0;\n      /**\r\n       * @member {number|string} lineHeight\r\n       * Sets the height of each line of text, as a multiple of the `fontSize`. Defaults to 'normal'\r\n       * which chooses a reasonable height based on the chosen font's ascender/descender metrics.\r\n       */\n\n      _this3.lineHeight = 'normal';\n      /**\r\n       * @member {number} maxWidth\r\n       * The maximum width of the text block, above which text may start wrapping according to the\r\n       * `whiteSpace` and `overflowWrap` properties.\r\n       */\n\n      _this3.maxWidth = Infinity;\n      /**\r\n       * @member {string} overflowWrap\r\n       * Defines how text wraps if the `whiteSpace` property is `normal`. Can be either `'normal'`\r\n       * to break at whitespace characters, or `'break-word'` to allow breaking within words.\r\n       * Defaults to `'normal'`.\r\n       */\n\n      _this3.overflowWrap = 'normal';\n      /**\r\n       * @member {string} textAlign\r\n       * The horizontal alignment of each line of text within the overall text bounding box.\r\n       */\n\n      _this3.textAlign = 'left';\n      /**\r\n       * @member {number} textIndent\r\n       * Indentation for the first character of a line; see CSS `text-indent`.\r\n       */\n\n      _this3.textIndent = 0;\n      /**\r\n       * @member {string} whiteSpace\r\n       * Defines whether text should wrap when a line reaches the `maxWidth`. Can\r\n       * be either `'normal'` (the default), to allow wrapping according to the `overflowWrap` property,\r\n       * or `'nowrap'` to prevent wrapping. Note that `'normal'` here honors newline characters to\r\n       * manually break lines, making it behave more like `'pre-wrap'` does in CSS.\r\n       */\n\n      _this3.whiteSpace = 'normal'; // === Presentation properties: === //\n\n      /**\r\n       * @member {THREE.Material} material\r\n       * Defines a _base_ material to be used when rendering the text. This material will be\r\n       * automatically replaced with a material derived from it, that adds shader code to\r\n       * decrease the alpha for each fragment (pixel) outside the text glyphs, with antialiasing.\r\n       * By default it will derive from a simple white MeshBasicMaterial, but you can use any\r\n       * of the other mesh materials to gain other features like lighting, texture maps, etc.\r\n       *\r\n       * Also see the `color` shortcut property.\r\n       */\n\n      _this3.material = null;\n      /**\r\n       * @member {string|number|THREE.Color} color\r\n       * This is a shortcut for setting the `color` of the text's material. You can use this\r\n       * if you don't want to specify a whole custom `material`. Also, if you do use a custom\r\n       * `material`, this color will only be used for this particuar Text instance, even if\r\n       * that same material instance is shared across multiple Text objects.\r\n       */\n\n      _this3.color = null;\n      /**\r\n       * @member {object|null} colorRanges\r\n       * WARNING: This API is experimental and may change.\r\n       * This allows more fine-grained control of colors for individual or ranges of characters,\r\n       * taking precedence over the material's `color`. Its format is an Object whose keys each\r\n       * define a starting character index for a range, and whose values are the color for each\r\n       * range. The color value can be a numeric hex color value, a `THREE.Color` object, or\r\n       * any of the strings accepted by `THREE.Color`.\r\n       */\n\n      _this3.colorRanges = null;\n      /**\r\n       * @member {number|string} outlineWidth\r\n       * WARNING: This API is experimental and may change.\r\n       * The width of an outline drawn around each text glyph using the `outlineColor`. Can be\r\n       * specified as either an absolute number in local units, or as a percentage string e.g.\r\n       * `\"12%\"` which is treated as a percentage of the `fontSize`. Defaults to `0`.\r\n       */\n\n      _this3.outlineWidth = 0;\n      /**\r\n       * @member {string|number|THREE.Color} outlineColor\r\n       * WARNING: This API is experimental and may change.\r\n       * The color of the text outline, if `outlineWidth` is greater than zero. Defaults to black.\r\n       */\n\n      _this3.outlineColor = 0;\n      /**\r\n       * @member {number} depthOffset\r\n       * This is a shortcut for setting the material's `polygonOffset` and related properties,\r\n       * which can be useful in preventing z-fighting when this text is laid on top of another\r\n       * plane in the scene. Positive numbers are further from the camera, negatives closer.\r\n       */\n\n      _this3.depthOffset = 0;\n      /**\r\n       * @member {Array<number>} clipRect\r\n       * If specified, defines a `[minX, minY, maxX, maxY]` of a rectangle outside of which all\r\n       * pixels will be discarded. This can be used for example to clip overflowing text when\r\n       * `whiteSpace='nowrap'`.\r\n       */\n\n      _this3.clipRect = null;\n      /**\r\n       * @member {string} orientation\r\n       * Defines the axis plane on which the text should be laid out when the mesh has no extra\r\n       * rotation transform. It is specified as a string with two axes: the horizontal axis with\r\n       * positive pointing right, and the vertical axis with positive pointing up. By default this\r\n       * is '+x+y', meaning the text sits on the xy plane with the text's top toward positive y\r\n       * and facing positive z. A value of '+x-z' would place it on the xz plane with the text's\r\n       * top toward negative z and facing positive y.\r\n       */\n\n      _this3.orientation = defaultOrient;\n      /**\r\n       * @member {number} glyphGeometryDetail\r\n       * Controls number of vertical/horizontal segments that make up each glyph's rectangular\r\n       * plane. Defaults to 1. This can be increased to provide more geometrical detail for custom\r\n       * vertex shader effects, for example.\r\n       */\n\n      _this3.glyphGeometryDetail = 1;\n      /**\r\n       * @member {number|null} sdfGlyphSize\r\n       * The size of each glyph's SDF (signed distance field) used for rendering. This must be a\r\n       * power-of-two number. Defaults to 64 which is generally a good balance of size and quality\r\n       * for most fonts. Larger sizes can improve the quality of glyph rendering by increasing\r\n       * the sharpness of corners and preventing loss of very thin lines, at the expense of\r\n       * increased memory footprint and longer SDF generation time.\r\n       */\n\n      _this3.sdfGlyphSize = null;\n      _this3.debugSDF = false;\n      return _this3;\n    }\n    /**\r\n     * Updates the text rendering according to the current text-related configuration properties.\r\n     * This is an async process, so you can pass in a callback function to be executed when it\r\n     * finishes.\r\n     * @param {function} [callback]\r\n     */\n\n\n    _createClass(Text, [{\n      key: \"sync\",\n      value: function sync(callback) {\n        var _this4 = this;\n\n        if (this._needsSync) {\n          this._needsSync = false; // If there's another sync still in progress, queue\n\n          if (this._isSyncing) {\n            (this._queuedSyncs || (this._queuedSyncs = [])).push(callback);\n          } else {\n            this._isSyncing = true;\n            this.dispatchEvent(syncStartEvent);\n            getTextRenderInfo({\n              text: this.text,\n              font: this.font,\n              fontSize: this.fontSize || 0.1,\n              letterSpacing: this.letterSpacing || 0,\n              lineHeight: this.lineHeight || 'normal',\n              maxWidth: this.maxWidth,\n              textAlign: this.textAlign,\n              textIndent: this.textIndent,\n              whiteSpace: this.whiteSpace,\n              overflowWrap: this.overflowWrap,\n              anchorX: this.anchorX,\n              anchorY: this.anchorY,\n              colorRanges: this.colorRanges,\n              includeCaretPositions: true,\n              //TODO parameterize\n              sdfGlyphSize: this.sdfGlyphSize\n            }, function (textRenderInfo) {\n              _this4._isSyncing = false; // Save result for later use in onBeforeRender\n\n              _this4._textRenderInfo = textRenderInfo; // Update the geometry attributes\n\n              _this4.geometry.updateGlyphs(textRenderInfo.glyphBounds, textRenderInfo.glyphAtlasIndices, textRenderInfo.blockBounds, textRenderInfo.chunkedBounds, textRenderInfo.glyphColors); // If we had extra sync requests queued up, kick it off\n\n\n              var queued = _this4._queuedSyncs;\n\n              if (queued) {\n                _this4._queuedSyncs = null;\n                _this4._needsSync = true;\n\n                _this4.sync(function () {\n                  queued.forEach(function (fn) {\n                    return fn && fn();\n                  });\n                });\n              }\n\n              _this4.dispatchEvent(syncCompleteEvent);\n\n              if (callback) {\n                callback();\n              }\n            });\n          }\n        }\n      }\n      /**\r\n       * Initiate a sync if needed - note it won't complete until next frame at the\r\n       * earliest so if possible it's a good idea to call sync() manually as soon as\r\n       * all the properties have been set.\r\n       * @override\r\n       */\n\n    }, {\n      key: \"onBeforeRender\",\n      value: function onBeforeRender(renderer, scene, camera, geometry, material, group) {\n        this.sync(); // This may not always be a text material, e.g. if there's a scene.overrideMaterial present\n\n        if (material.isTroikaTextMaterial) {\n          this._prepareForRender(material);\n        }\n      }\n      /**\r\n       * Shortcut to dispose the geometry specific to this instance.\r\n       * Note: we don't also dispose the derived material here because if anything else is\r\n       * sharing the same base material it will result in a pause next frame as the program\r\n       * is recompiled. Instead users can dispose the base material manually, like normal,\r\n       * and we'll also dispose the derived material at that time.\r\n       */\n\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        this.geometry.dispose();\n      }\n      /**\r\n       * @property {TroikaTextRenderInfo|null} textRenderInfo\r\n       * @readonly\r\n       * The current processed rendering data for this TextMesh, returned by the TextBuilder after\r\n       * a `sync()` call. This will be `null` initially, and may be stale for a short period until\r\n       * the asynchrous `sync()` process completes.\r\n       */\n\n    }, {\n      key: \"_prepareForRender\",\n      value: function _prepareForRender(material) {\n        var isOutline = material.isTextOutlineMaterial;\n        var uniforms = material.uniforms;\n        var textInfo = this.textRenderInfo;\n\n        if (textInfo) {\n          var sdfTexture = textInfo.sdfTexture,\n              blockBounds = textInfo.blockBounds;\n          uniforms.uTroikaSDFTexture.value = sdfTexture;\n          uniforms.uTroikaSDFTextureSize.value.set(sdfTexture.image.width, sdfTexture.image.height);\n          uniforms.uTroikaSDFGlyphSize.value = textInfo.sdfGlyphSize;\n          uniforms.uTroikaSDFExponent.value = textInfo.sdfExponent;\n          uniforms.uTroikaTotalBounds.value.fromArray(blockBounds);\n          uniforms.uTroikaUseGlyphColors.value = !!textInfo.glyphColors;\n          var distanceOffset = 0;\n\n          if (isOutline) {\n            var outlineWidth = this.outlineWidth;\n\n            if (typeof outlineWidth === 'string') {\n              var match = outlineWidth.match(/^([\\d.]+)%$/);\n              var pct = match ? parseFloat(match[1]) : NaN;\n              outlineWidth = (isNaN(pct) ? 0 : pct / 100) * this.fontSize;\n            }\n\n            distanceOffset = outlineWidth;\n          }\n\n          uniforms.uTroikaDistanceOffset.value = distanceOffset;\n          var clipRect = this.clipRect;\n\n          if (clipRect && Array.isArray(clipRect) && clipRect.length === 4) {\n            uniforms.uTroikaClipRect.value.fromArray(clipRect);\n          } else {\n            // no clipping - choose a finite rect that shouldn't ever be reached by overflowing glyphs or outlines\n            var pad = (this.fontSize || 0.1) * 100;\n            uniforms.uTroikaClipRect.value.set(blockBounds[0] - pad, blockBounds[1] - pad, blockBounds[2] + pad, blockBounds[3] + pad);\n          }\n\n          this.geometry.applyClipRect(uniforms.uTroikaClipRect.value);\n        }\n\n        uniforms.uTroikaSDFDebug.value = !!this.debugSDF;\n        material.polygonOffset = !!this.depthOffset;\n        material.polygonOffsetFactor = material.polygonOffsetUnits = this.depthOffset || 0; // Shortcut for setting material color via `color` prop on the mesh; this is\n        // applied only to the derived material to avoid mutating a shared base material.\n\n        var color = isOutline ? this.outlineColor || 0 : this.color;\n\n        if (color == null) {\n          delete material.color; //inherit from base\n        } else {\n          var colorObj = material.hasOwnProperty('color') ? material.color : material.color = new Color();\n\n          if (color !== colorObj._input || typeof color === 'object') {\n            colorObj.set(colorObj._input = color);\n          }\n        } // base orientation\n\n\n        var orient = this.orientation || defaultOrient;\n\n        if (orient !== material._orientation) {\n          var rotMat = uniforms.uTroikaOrient.value;\n          orient = orient.replace(/[^-+xyz]/g, '');\n\n          var _match = orient !== defaultOrient && orient.match(/^([-+])([xyz])([-+])([xyz])$/);\n\n          if (_match) {\n            var _match2 = _slicedToArray(_match, 5),\n                hSign = _match2[1],\n                hAxis = _match2[2],\n                vSign = _match2[3],\n                vAxis = _match2[4];\n\n            tempVec3a.set(0, 0, 0)[hAxis] = hSign === '-' ? 1 : -1;\n            tempVec3b.set(0, 0, 0)[vAxis] = vSign === '-' ? -1 : 1;\n            tempMat4.lookAt(origin, tempVec3a.cross(tempVec3b), tempVec3b);\n            rotMat.setFromMatrix4(tempMat4);\n          } else {\n            rotMat.identity();\n          }\n\n          material._orientation = orient;\n        }\n      }\n      /**\r\n       * @override Custom raycasting to test against the whole text block's max rectangular bounds\r\n       * TODO is there any reason to make this more granular, like within individual line or glyph rects?\r\n       */\n\n    }, {\n      key: \"raycast\",\n      value: function raycast(raycaster, intersects) {\n        var textInfo = this.textRenderInfo;\n\n        if (textInfo) {\n          var bounds = textInfo.blockBounds;\n          raycastMesh.matrixWorld.multiplyMatrices(this.matrixWorld, tempMat4.set(bounds[2] - bounds[0], 0, 0, bounds[0], 0, bounds[3] - bounds[1], 0, bounds[1], 0, 0, 1, 0, 0, 0, 0, 1));\n          tempArray.length = 0;\n          raycastMesh.raycast(raycaster, tempArray);\n\n          for (var i = 0; i < tempArray.length; i++) {\n            tempArray[i].object = this;\n            intersects.push(tempArray[i]);\n          }\n        }\n      }\n    }, {\n      key: \"copy\",\n      value: function copy(source) {\n        var _this5 = this;\n\n        _get(_getPrototypeOf(Text.prototype), \"copy\", this).call(this, source);\n\n        COPYABLE_PROPS.forEach(function (prop) {\n          _this5[prop] = source[prop];\n        });\n        return this;\n      }\n    }, {\n      key: \"clone\",\n      value: function clone() {\n        return new this.constructor().copy(this);\n      }\n    }, {\n      key: \"textRenderInfo\",\n      get: function get() {\n        return this._textRenderInfo || null;\n      } // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n      // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n\n    }, {\n      key: \"material\",\n      get: function get() {\n        var derivedMaterial = this._derivedMaterial;\n        var baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultMaterial.clone());\n\n        if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n          derivedMaterial = this._derivedMaterial = createTextDerivedMaterial(baseMaterial); // dispose the derived material when its base material is disposed:\n\n          baseMaterial.addEventListener('dispose', function onDispose() {\n            baseMaterial.removeEventListener('dispose', onDispose);\n            derivedMaterial.dispose();\n          });\n        } // If text outline is present, render it as a preliminary draw using Three's multi-material\n        // feature (see GlyphsGeometry which sets up `groups` for this purpose) Doing it with multi\n        // materials ensures the layers are always rendered consecutively in a consistent order.\n        // Each layer will trigger onBeforeRender with the appropriate material.\n\n\n        if (this.outlineWidth) {\n          var outlineMaterial = derivedMaterial._outlineMtl;\n\n          if (!outlineMaterial) {\n            outlineMaterial = derivedMaterial._outlineMtl = Object.create(derivedMaterial, {\n              id: {\n                value: derivedMaterial.id + 0.1\n              }\n            });\n            outlineMaterial.isTextOutlineMaterial = true;\n            outlineMaterial.depthWrite = false;\n            outlineMaterial.map = null; //???\n\n            derivedMaterial.addEventListener('dispose', function onDispose() {\n              derivedMaterial.removeEventListener('dispose', onDispose);\n              outlineMaterial.dispose();\n            });\n          }\n\n          return [outlineMaterial, derivedMaterial];\n        } else {\n          return derivedMaterial;\n        }\n      },\n      set: function set(baseMaterial) {\n        if (baseMaterial && baseMaterial.isTroikaTextMaterial) {\n          //prevent double-derivation\n          this._derivedMaterial = baseMaterial;\n          this._baseMaterial = baseMaterial.baseMaterial;\n        } else {\n          this._baseMaterial = baseMaterial;\n        }\n      }\n    }, {\n      key: \"glyphGeometryDetail\",\n      get: function get() {\n        return this.geometry.detail;\n      },\n      set: function set(detail) {\n        this.geometry.detail = detail;\n      } // Create and update material for shadows upon request:\n\n    }, {\n      key: \"customDepthMaterial\",\n      get: function get() {\n        return first(this.material).getDepthMaterial();\n      }\n    }, {\n      key: \"customDistanceMaterial\",\n      get: function get() {\n        return first(this.material).getDistanceMaterial();\n      }\n    }]);\n\n    return Text;\n  }(Mesh); // Create setters for properties that affect text layout:\n\n\n  SYNCABLE_PROPS.forEach(function (prop) {\n    var privateKey = '_private_' + prop;\n    Object.defineProperty(Text.prototype, prop, {\n      get: function get() {\n        return this[privateKey];\n      },\n      set: function set(value) {\n        if (value !== this[privateKey]) {\n          this[privateKey] = value;\n          this._needsSync = true;\n        }\n      }\n    });\n  }); // Deprecation handler for `anchor` array:\n\n  var deprMsgShown = false;\n  Object.defineProperty(Text.prototype, 'anchor', {\n    get: function get() {\n      return this._deprecated_anchor;\n    },\n    set: function set(val) {\n      this._deprecated_anchor = val;\n\n      if (!deprMsgShown) {\n        console.warn('TextMesh: `anchor` has been deprecated; use `anchorX` and `anchorY` instead.');\n        deprMsgShown = true;\n      }\n\n      if (Array.isArray(val)) {\n        this.anchorX = \"\".concat((+val[0] || 0) * 100, \"%\");\n        this.anchorY = \"\".concat((+val[1] || 0) * 100, \"%\");\n      } else {\n        this.anchorX = this.anchorY = 0;\n      }\n    }\n  });\n  return Text;\n}(); //=== Utility functions for dealing with carets and selection ranges ===//\n\n/**\r\n * @typedef {object} TextCaret\r\n * @property {number} x - x position of the caret\r\n * @property {number} y - y position of the caret's bottom\r\n * @property {number} height - height of the caret\r\n * @property {number} charIndex - the index in the original input string of this caret's target\r\n *   character; the caret will be for the position _before_ that character.\r\n */\n\n/**\r\n * Given a local x/y coordinate in the text block plane, find the nearest caret position.\r\n * @param {TroikaTextRenderInfo} textRenderInfo - a result object from TextBuilder#getTextRenderInfo\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {TextCaret | null}\r\n */\n\n\nfunction getCaretAtPoint(textRenderInfo, x, y) {\n  var closestCaret = null;\n  var caretHeight = textRenderInfo.caretHeight;\n  var caretsByRow = groupCaretsByRow(textRenderInfo); // Find nearest row by y first\n\n  var closestRowY = Infinity;\n  caretsByRow.forEach(function (carets, rowY) {\n    if (Math.abs(y - (rowY + caretHeight / 2)) < Math.abs(y - (closestRowY + caretHeight / 2))) {\n      closestRowY = rowY;\n    }\n  }); // Then find closest caret by x within that row\n\n  caretsByRow.get(closestRowY).forEach(function (caret) {\n    if (!closestCaret || Math.abs(x - caret.x) < Math.abs(x - closestCaret.x)) {\n      closestCaret = caret;\n    }\n  });\n  return closestCaret;\n}\n\nvar _rectsCache = new WeakMap();\n/**\r\n * Given start and end character indexes, return a list of rectangles covering all the\r\n * characters within that selection.\r\n * @param {TroikaTextRenderInfo} textRenderInfo\r\n * @param {number} start - index of the first char in the selection\r\n * @param {number} end - index of the first char after the selection\r\n * @return {Array<{left, top, right, bottom}> | null}\r\n */\n\n\nfunction getSelectionRects(textRenderInfo, start, end) {\n  var rects;\n\n  if (textRenderInfo) {\n    // Check cache - textRenderInfo is frozen so it's safe to cache based on it\n    var prevResult = _rectsCache.get(textRenderInfo);\n\n    if (prevResult && prevResult.start === start && prevResult.end === end) {\n      return prevResult.rects;\n    }\n\n    var caretPositions = textRenderInfo.caretPositions,\n        caretHeight = textRenderInfo.caretHeight,\n        blockBounds = textRenderInfo.blockBounds; // Normalize\n\n    if (end < start) {\n      var s = start;\n      start = end;\n      end = s;\n    }\n\n    start = Math.max(start, 0);\n    end = Math.min(end, caretPositions.length + 1); // Collect into one rect per row\n\n    var rows = new Map();\n\n    for (var i = start; i < end; i++) {\n      var x1 = caretPositions[i * 3];\n      var x2 = caretPositions[i * 3 + 1];\n      var y = caretPositions[i * 3 + 2];\n      var row = rows.get(y);\n\n      if (!row) {\n        row = {\n          left: x1,\n          right: x2,\n          bottom: y,\n          top: y + caretHeight\n        };\n        rows.set(y, row);\n      } else {\n        row.left = Math.max(Math.min(row.left, x1), blockBounds[0]);\n        row.right = Math.min(Math.max(row.right, x2), blockBounds[2]);\n      }\n    }\n\n    rects = [];\n    rows.forEach(function (rect) {\n      rects.push(rect);\n    });\n\n    _rectsCache.set(textRenderInfo, {\n      start: start,\n      end: end,\n      rects: rects\n    });\n  }\n\n  return rects;\n}\n\nvar _caretsByRowCache = new WeakMap();\n\nfunction groupCaretsByRow(textRenderInfo) {\n  // textRenderInfo is frozen so it's safe to cache based on it\n  var caretsByRow = _caretsByRowCache.get(textRenderInfo);\n\n  if (!caretsByRow) {\n    var caretPositions = textRenderInfo.caretPositions,\n        caretHeight = textRenderInfo.caretHeight;\n    caretsByRow = new Map();\n\n    for (var i = 0; i < caretPositions.length; i += 3) {\n      var rowY = caretPositions[i + 2];\n      var rowCarets = caretsByRow.get(rowY);\n\n      if (!rowCarets) {\n        caretsByRow.set(rowY, rowCarets = []);\n      }\n\n      rowCarets.push({\n        x: caretPositions[i],\n        y: rowY,\n        height: caretHeight,\n        charIndex: i / 3\n      }); // Add one more caret after the final char\n\n      if (i + 3 >= caretPositions.length) {\n        rowCarets.push({\n          x: caretPositions[i + 1],\n          y: rowY,\n          height: caretHeight,\n          charIndex: i / 3 + 1\n        });\n      }\n    }\n  }\n\n  _caretsByRowCache.set(textRenderInfo, caretsByRow);\n\n  return caretsByRow;\n}\n\nexport { GlyphsGeometry, Text, configureTextBuilder, createTextDerivedMaterial, fontProcessorWorkerModule, getCaretAtPoint, getSelectionRects, preloadFont };","import { forwardRef, useState, useMemo, useEffect, useRef, memo } from 'react';\nimport React from \"react\"\n// import { Extrude } from '@react-three/drei/Extrude'\n// import { Text } from '@react-three/drei/Text'\nimport { a } from 'react-spring/three'\nimport { extend, Canvas, useThree, useFrame } from 'react-three-fiber'\nimport { Text } from \"troika-three-text\";\nimport FlipMove from 'react-flip-move';\n\nimport * as THREE from 'three'\nimport OrbitControls from \"./../HypeCycle/OrbitControls\"\nimport {range, csv, scaleLinear } from \"d3\"\nimport {countBy, fromPairs, kebabCase} from \"lodash\"\nimport dataUrl from \"./data.csv\"\n\nimport './HypeCycle.scss';\n\nconst ordinalColors = [\n  \"#1289A7\", \"#778beb\", \"#22a6b3\", \"#5758BB\", \"#cf6a87\", \"#e77f67\", \"#786fa6\", \"#FDA7DF\", \"#4b7bec\", \"#778ca3\",\"#12CBC4\",\n];\nconst yearsToMainstreamInfo = [\n  {slug: \"LT2\", label: \"Less than 2 years\", color: \"#e77f67\",},\n  {slug: \"2T5\", label: \"Two to five years\", color: \"#cf6a87\",},\n  {slug: \"5T10\", label: \"Five to ten years\", color: \"#778beb\",},\n  {slug: \"GT10\", label: \"Greater than 10 years\", color: \"#786fa6\",},\n  {slug: \"UNDF\", label: \"No time scale specified (1995-1998)\", color: \"#778ca3\",},\n  {slug: \"INTP\", label: \"Interpolated values\", color: \"#778ca3\",},\n]\nconst yearsToMainstreamColorMap = fromPairs(yearsToMainstreamInfo.map(d => [\n  d.slug, d.color\n]))\n\n// LT2 - Less than 2 years\n// 2T5 - Two to five years\n// 5T10 - Five to ten years\n// GT10 - Greater than 10 years\n// UNDF - No time scale specified (1995-1998)\n// INTP - Interpolated values\n// const colorScale = d3.scaleLinear().range([\"#c7ecee\", \"#686de0\"]).domain([0, 1])\n\nconst categories = [ \"Artificial Intelligence\", \"Human-Computer Interface\", \"Methodology\", \"Software Architecture\", \"Communications\", \"Networking Technology\", \"Mobile Technology\", \"Computer Architecture\", \"Information Technology\", \"Platforms\", \"Web Technology\", \"Cyber Security\", \"Financial Technology\", \"Display Technology\", \"Wireless Technology\", \"Analytics\", \"Energy Technology\", \"Sensing/Tracking\", \"Physical Actuation\", \"Manufacturing\", \"Vehicle Technology\" ]\nconst categoryColors = fromPairs(categories.map((category, i) => [\n  category, ordinalColors[i % ordinalColors.length]\n]))\n\nconst curveDepth = 9\nconst curveWidth = 1\n\nconst years = range(1995, 2020)\nconst yearsScale = scaleLinear()\n  .domain([years[0], years.slice(-1)[0]])\n  .range([0, curveDepth])\n\nconst HypeCycle = () => {\n  const [data, setData] = useState([])\n  const [hoveredDot, setHoveredDot] = useState(null)\n  const [showingCategories, setShowingCategories] = useState(categories)\n\n  const loadData = async () => {\n    const res = await csv(dataUrl)\n    const data = res.map((d, i) => {\n      let hasHadIndex = false\n      const pointIndex = years.map(year => {\n        const percent = d[`dist${year}`]\n        if (!percent || !Number.isFinite(+percent)) return hasHadIndex ? 100 : 0\n        const index = Math.round(+percent * 100)\n        hasHadIndex = true\n        return index\n      })\n      const firstYearIndex = pointIndex.map((d, i) => [d, i]).filter(d => d[0])[0][1]\n\n      let runningIndex = 0\n      let points = []\n      pointIndex.forEach((index, i) => {\n        const [x, y] = curvePoints[index]\n        const z = yearsScale(years[i])\n        const newPoint = new THREE.Vector3(x, y, z)\n        if (Math.abs(runningIndex - index) > 1) {\n          absRange(runningIndex, index).map(index => {\n            const newPoint = new THREE.Vector3(...curvePoints[index], z)\n            points.push(newPoint)\n          })\n        }\n        points.push(newPoint)\n        runningIndex = index\n      })\n      const path = new THREE.CatmullRomCurve3(points)\n\n      return {\n        name: d[\"Unified Technology Name\"],\n        pointIndex,\n        // z: zScale(i),\n        names: years.map(year => d[`name${year}`]),\n        time: years.map(year => d[`time${year}`]),\n        category: d[\"Technology Category\"],\n        color: categoryColors[d[\"Technology Category\"]],\n        path,\n        i,\n        firstYearIndex,\n      }\n    })\n    setData(data)\n    setHoveredDot(data[0][\"name\"])\n  }\n  useEffect(() => {loadData()}, [])\n\n  // const filteredDots = useMemo(() => (\n  //   data.filter(d => showingCategories.includes(d[\"category\"]))\n  // ), [data, showingCategories])\n\n  // useEffect(() => {\n  //   if (!hoveredDot) return\n  //   if (!filteredDots.filter(d => (\n  //     d[\"pointIndex\"][yearIndex] > 0 && d[\"pointIndex\"][yearIndex] < 100\n  //   )).find(d => d[\"name\"] == hoveredDot)) {\n  //     setHoveredDot(false)\n  //   }\n  // }, [filteredDots, yearIndex])\n\n  const data3d = useMemo(() => (\n    showingCategories.length == 1\n      ? data.filter(d => showingCategories[0] == d[\"category\"])\n      : data.filter(d => d[\"name\"] == hoveredDot)\n  ), [hoveredDot, showingCategories.join(\", \")])\n\n  return (\n    <div className={`HypeCycle`}>\n      {/* <Timeline {...{yearIndex, setYearIndex, isPlaying, setIsPlaying}} /> */}\n      <List {...{data, hoveredDot, setHoveredDot}} />\n      <Categories {...{data, showingCategories, setShowingCategories}} />\n\n      {!!hoveredDot && (\n        <div className=\"HypeCycle__tooltip\">\n          {hoveredDot}\n        </div>\n      )}\n\n      <div className=\"HypeCycle__contents\">\n        <Wrapper data={data3d} {...{showingCategories, hoveredDot, setHoveredDot}} />\n      </div>\n      <div className=\"HypeCycle__attr\">\n        This is a visualization of how new technologies traverse <a href=\"https://www.gartner.com/en/documents/3887767\" target=\"_blank\" rel=\"noopener\">the Gartner Hype Cycle</a>.\n        <br />\n        Data and original idea from <a href=\"https://vimeo.com/464835556\" target=\"_blank\" rel=\"noopener\">Mark Mine</a>.\n      </div>\n    </div>\n  )\n}\n\nexport default HypeCycle\n\nconst camera = {\n  fov: 75, near: 0.1, far: 1000,\n  \"position.z\": 2,\n}\nconst Controls = () => {\n  const { camera, gl, invalidate } = useThree()\n  const ref = useRef()\n  useFrame(() => ref.current.update())\n  useEffect(() => void ref.current.addEventListener('change', invalidate), [])\n  return <orbitControls ref={ref} args={[camera, gl.domElement]} />\n}\n// function Controls(props) {\n//   const ref = useRef()\n//   const { camera } = useThree()\n//   // useFrame(() => ref.current.obj.update())\n//   return <orbitControls ref={ref} args={[camera]} {...props} />\n// }\n\nextend({ OrbitControls })\n// extend({ Text });\n\nfunction Wrapper({ vertices, color, data, showingCategories, hoveredDot, setHoveredDot, ...props }) {\n  const onHoverDot = (d) => {\n    setHoveredDot(d[\"name\"])\n  }\n\n  const [hoveredDotPosition, setHoveredDotPosition] = useState([])\n\n  return (\n    <Canvas camera={camera} pixelRatio={window.devicePixelRatio} {...props}>\n      {/* <HoveredDot {...{hoveredDot, data, yearIndex, setHoveredDotPosition}} /> */}\n      <Controls />\n      <group>\n\n        <pointLight\n          position={[0,0,4]}\n          color=\"#fff\"\n          intensity={0.3}\n        />\n        <pointLight\n          position={[-2,0,-2]}\n          color=\"#fff\"\n          intensity={0.3}\n        />\n        <pointLight\n          position={[3,3,3]}\n          color=\"#12CBC4\"\n          intensity={0.1}\n        />\n        <ambientLight color=\"0xFFC312\" intensity={0.4} />\n        <ambientLight color=\"#5758BB\" intensity={0.4} />\n\n        <mesh rotation-x={90 / 180 * Math.PI} position={[0, -curveDepth * 0.4, 0]}>\n          <planeGeometry attach=\"geometry\" args={[30, 30]} />\n          <meshBasicMaterial attach=\"material\" color=\"#fff\" side={THREE.BackSide} />\n        </mesh>\n\n        {years.map((year, i) => !(i % 5) && (\n          <Text\n            key={year}\n            position={[0, -curveDepth * 0.2, yearsScale(year) - curveDepth]}\n            // position-x={-curveWidth / 2}\n            // rotation-x={-90 / 180 * Math.PI}\n            // position-x={-curveDepth / 2}\n            text={year}\n            // font=\"Arial\"\n            color=\"#292e31\"\n            fontSize=\"0.3\"\n            anchorX=\"right\"\n            anchorY=\"middle\"\n          >\n            {/* <meshPhongMaterial attach=\"material\" color=\"black\" /> */}\n          </Text>\n        ))}\n\n        <group position={[-curveDepth / 2, -curveDepth * 0.4, -curveDepth]}>\n          {years.map(year => (\n            <CurveLine\n              key={year}\n              z={yearsScale(year)}\n            />\n          ))}\n\n          {data.map(d => (\n            <Path\n              key={d[\"name\"]}\n              path={d[\"path\"]}\n              color={d[\"color\"]}\n              isHovered={hoveredDot == d[\"name\"] && showingCategories.length == 1}\n              onHover={(e) => onHoverDot(d, e)}\n            />\n            // <Point\n            //   key={d[\"name\"]}\n            //   pointIndex={d[\"pointIndex\"][yearIndex]}\n            //   time={d[\"time\"][yearIndex]}\n            //   name={d[\"names\"][yearIndex] || d[\"name\"]}\n            //   color={d[\"color\"]}\n            //   z={d[\"z\"]}\n            //   isHovered={hoveredDot == d[\"name\"]}\n            //   onHover={(e) => onHoverDot(d, e)}\n            // />\n          ))}\n\n          <Curve />\n        </group>\n      </group>\n    </Canvas>\n  )\n}\n\nconst extrudeSettings = {\n  steps: 2,\n  depth: curveDepth,\n  bevelEnabled: true,\n  bevelThickness: 0,\n  bevelSize: 0,\n  bevelOffset: 0,\n  bevelSegments: 10,\n  curveSegments: 60,\n}\n\nconst curve = new THREE.Shape()\n\nconst width = curveWidth\n\ncurve.moveTo(0, 0)\ncurve.bezierCurveTo(...[\n  1.185, 0, // cp1\n  1.226, 5.496, // cp2\n  2.121, 5.496 // end\n].map(d => d * width))\ncurve.bezierCurveTo(...[\n  3.017, 5.496, // cp1\n  2.493, 1.075, // cp2\n  3.939, 1.075, // end\n].map(d => d * width))\ncurve.bezierCurveTo(...[\n  5.386, 1.075, // cp1\n  6.928, 3.113, // cp2\n  10, 3.113 // end\n].map(d => d * width))\ncurve.lineTo(...[\n  10, 0\n].map(d => d * width))\nconst curvePoints = range(0, 1.01, 0.01).map(d => {\n  const point = curve.getPointAt(d)\n  if (!point) return null\n  return [point.x, point.y]\n})\n\n\nconst Curve = () => (\n  <mesh>\n    <extrudeGeometry attach=\"geometry\" args={[curve, extrudeSettings]} />\n    <meshLambertMaterial\n      attach=\"material\"\n      color=\"#fff\"\n      transparent=\"true\"\n      opacity=\"0.5\"\n      side={THREE.DoubleSide}\n    />\n  </mesh>\n)\n\n// const pointGeometry = new THREE.SphereGeometry(0.2, 32, 32)\n// // const pointMaterial = new THREE.MeshLambertMaterial({color: \"#45aeb1\", side: THREE.DoubleSide})\n// const Point = ({ name, color, pointIndex=0, z, time, isHovered, onHover }) => {\n\n//   const {pointIndex: pointIndexTweened} = useSpring({\n//     config: {\n//       mass: 10, tension: 30, friction: 34,\n//     },\n//     pointIndex,\n//   })\n\n//   const {colorTweened} = useSpring({\n//     config: {\n//       mass: 1, tension: 30, friction: 34,\n//     },\n//     colorTweened: pointIndex > 0 && pointIndex < 100 ? color || \"#fff\" : \"#fff\",\n//   })\n\n//   return (\n//     <a.group\n//       position-x={pointIndexTweened.interpolate(d => (curvePoints[Math.round(d)] || [])[0])}\n//       position-y={pointIndexTweened.interpolate(d => (curvePoints[Math.round(d)] || [])[1])}\n//       position-z={ * 0.01z}\n//       onPointerOver={onHover}\n//     >\n//       <mesh geometry={pointGeometry}>\n//         <a.meshLambertMaterial attach=\"material\" color={isHovered ? \"#000\" : colorTweened} />\n//       </mesh>\n//     </a.group>\n//   )\n// }\n\nconst Path = ({ path, color, isHovered, onHover }) => {\n  const geometry = useMemo(() => {\n    // const points = path.getPoints(250)\n    // const geometry = new THREE.BufferGeometry().setFromPoints(points)\n    const geometry = new THREE.TubeGeometry( path, 120, 0.03, 60, true )\n    return geometry\n  }, [path])\n\n      // var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );\n\n  return (\n    <a.group\n      onPointerOver={onHover}\n    >\n      <mesh geometry={geometry}>\n        <a.lineBasicMaterial attach=\"material\" color={isHovered ? \"#000\" : color} />\n      </mesh>\n    </a.group>\n  )\n}\n\nconst path = new THREE.CatmullRomCurve3(curvePoints.map(d => (\n  new THREE.Vector3(...d, 0)\n)))\nconst geometry = new THREE.TubeGeometry( path, 120, 0.01, 60, true )\nconst CurveLine = ({ z }) => {\n  return (\n    <group position-z={z}>\n      <mesh geometry={geometry}>\n        <lineBasicMaterial attach=\"material\" color=\"#fff\" />\n      </mesh>\n    </group>\n  )\n}\n\nconst List = memo(({ data, hoveredDot, setHoveredDot }) => {\n  const [isHovering, setIsHovering] = useState(false)\n  const wrapperElement = useRef()\n\n  useEffect(() => {\n    if (isHovering) return\n    if (!wrapperElement.current) return\n    if (!hoveredDot) return\n    const elem = wrapperElement.current.getElementsByClassName(`item--${kebabCase(hoveredDot)}`)[0]\n    if (!elem) return\n    elem.scrollIntoView()\n  }, [hoveredDot])\n\n  const sortedItems = useMemo(() => (\n    data.map(d => ({\n      name: d[\"name\"],\n      // value: d[\"pointIndex\"][yearIndex],\n      // color: yearsToMainstreamColorMap[d[\"time\"][yearIndex]],\n      color: d[\"color\"],\n      category: d[\"category\"],\n    }))\n    // .filter(d => d[\"value\"] && d[\"value\"] < 100)\n    // .sort((a,b) => a[\"firstYearIndex\"] - b[\"firstYearIndex\"])\n  ), [data])\n\n  return (\n    <div ref={wrapperElement} className=\"HypeCycle__list\" onMouseEnter={() => setIsHovering(true)} onMouseLeave={() => setIsHovering(true)}>\n      <FlipMove>\n        {sortedItems.map(({ name, color, category }) => (\n          <ListItem\n            key={name}\n            isHovered={hoveredDot == name}\n            onHover={() => setHoveredDot(name)}\n            {...{name, color, category}}\n          />\n        ))}\n      </FlipMove>\n    </div>\n  )\n})\n\nconst ListItem = forwardRef(({ name, color, category, isHovered, onHover }, ref) => (\n  <div ref={ref} className={`item--${kebabCase(name)} HypeCycle__list__item HypeCycle__list__item--is-${isHovered ? \"hovered\" : \"not-hovered\"}`} style={{\n    \"--color\": color,\n  }} onMouseEnter={onHover}>\n    <h6 className=\"HypeCycle__list__item__category\">\n      { category }\n    </h6>\n    {name}\n  </div>\n))\n\nconst Categories = ({ data, showingCategories, setShowingCategories }) => {\n  const counts = useMemo(() => (\n    countBy(data, \"category\")\n  ), [data])\n\n  const sortedCategories = useMemo(() => (\n    [...categories].sort((a,b) => counts[b] > counts[a] ? 1 : -1)\n  ), [counts])\n\n  return (\n    <div className=\"HypeCycle__categories\">\n      <FlipMove>\n        {sortedCategories.map(category => (\n          <div className={`HypeCycle__categories__item HypeCycle__categories__item--is-${showingCategories.includes(category) ? \"showing\" : \"not-showing\"} HypeCycle__categories__item--is-${counts[category] ? \"visible\" : \"not-visible\"}`} key={category} style={{\n            color: categoryColors[category]\n          }} onClick={() => {\n            const isShowing = showingCategories.includes(category)\n            if (!isShowing || showingCategories.length > 1) {\n              setShowingCategories([category])\n            } else {\n              setShowingCategories(categories)\n            }\n          }}>\n            { category }\n            <div className=\"HypeCycle__categories__item__count\">\n              { counts[category] }\n            </div>\n          </div>\n        ))}\n      </FlipMove>\n    </div>\n  )\n}\n\nconst absRange = (start, end) => (\n  start < end ? range(start, end + 1) : range(end, start + 1).reverse()\n)","import * as THREE from 'three'\n\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nlet OrbitControls = function ( object, domElement ) {\n\n\tthis.object = object;\n\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.25;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = false; // if true, pan in screen-space\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: THREE.MOUSE.LEFT, MIDDLE: THREE.MOUSE.MIDDLE, RIGHT: THREE.MOUSE.RIGHT };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\t\t\tscope.target.add( panOffset );\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = { NONE: - 1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY_PAN: 4 };\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\t//console.log( 'handleMouseDownPan' );\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\t//console.log( 'handleMouseMovePan' );\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( event ) {\n\n\t\t// console.log( 'handleMouseUp' );\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\t// console.log( 'handleMouseWheel' );\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\t// console.log( 'handleKeyDown' );\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\t//console.log( 'handleTouchStartDollyPan' );\n\n\t\tif ( scope.enableZoom ) {\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyStart.set( 0, distance );\n\n\t\t}\n\n\t\tif ( scope.enablePan ) {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\t//console.log( 'handleTouchMoveDollyPan' );\n\n\t\tif ( scope.enableZoom ) {\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyEnd.set( 0, distance );\n\n\t\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\t\tdollyIn( dollyDelta.y );\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t}\n\n\t\tif ( scope.enablePan ) {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleTouchEnd( event ) {\n\n\t\t//console.log( 'handleTouchEnd' );\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\t// Prevent the browser from scrolling.\n\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase scope.mouseButtons.LEFT:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase scope.mouseButtons.MIDDLE:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase scope.mouseButtons.RIGHT:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\t// two-fingered touch: dolly-pan\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2: // two-fingered touch: dolly-pan\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY_PAN ) return; // is this needed?\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nOrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nOrbitControls.prototype.constructor = OrbitControls;\n\nObject.defineProperties( OrbitControls.prototype, {\n\n\tcenter: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'OrbitControls: .center has been renamed to .target' );\n\t\t\treturn this.target;\n\n\t\t}\n\n\t},\n\n\t// backward compatibility\n\n\tnoZoom: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\treturn ! this.enableZoom;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\tthis.enableZoom = ! value;\n\n\t\t}\n\n\t},\n\n\tnoRotate: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\treturn ! this.enableRotate;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\tthis.enableRotate = ! value;\n\n\t\t}\n\n\t},\n\n\tnoPan: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\treturn ! this.enablePan;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\tthis.enablePan = ! value;\n\n\t\t}\n\n\t},\n\n\tnoKeys: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\treturn ! this.enableKeys;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\tthis.enableKeys = ! value;\n\n\t\t}\n\n\t},\n\n\tstaticMoving: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\treturn ! this.enableDamping;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\tthis.enableDamping = ! value;\n\n\t\t}\n\n\t},\n\n\tdynamicDampingFactor: {\n\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\treturn this.dampingFactor;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\tthis.dampingFactor = value;\n\n\t\t}\n\n\t}\n\n} );\n\nexport default OrbitControls"],"sourceRoot":""}