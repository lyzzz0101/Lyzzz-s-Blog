{"version":3,"sources":["components/Blog/posts/LearnD3/LearnD3Scales.jsx","components/_ui/Expandy/Expandy.jsx","components/_ui/InlineExpandy/InlineExpandy.jsx"],"names":["possibleConditions","LearnD3Scales","_ref","onScrollToSectionLocal","_useState","useState","_useState2","Object","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","iteration","setIteration","weatherData","useMemo","today","Date","Array","fill","map","_","i","date","d3","offset","conditions","Math","floor","random","length","chanceOfPrecipitation","Number","humidity","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","components_ui_Button_Button__WEBPACK_IMPORTED_MODULE_7__","concat","onClick","style","refreshButtonStyle","components_ui_Icon_Icon__WEBPACK_IMPORTED_MODULE_9__","name","components_ui_Code_Code__WEBPACK_IMPORTED_MODULE_11__","size","fileName","JSON","stringify","components_ui_List_List__WEBPACK_IMPORTED_MODULE_10__","items","Fragment","_LearnD3__WEBPACK_IMPORTED_MODULE_12__","d","components_ui_Aside_Aside__WEBPACK_IMPORTED_MODULE_4__","src","bookImage","alt","components_ui_Link_Link__WEBPACK_IMPORTED_MODULE_8__","href","repo","canEval","highlightedLines","doOnlyShowHighlightedLines","id","position","marginTop","right","paddingBottom","zIndex","Expandy","trigger","triggerExpandText","doHideIfCollapsed","children","props","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","isExpanded","setIsExpanded","ref","useRef","react__WEBPACK_IMPORTED_MODULE_2___default","assign","onToggle","e","target","open","components_ui_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_4__","contents","components_ui_Icon_Icon__WEBPACK_IMPORTED_MODULE_3__","direction","InlineExpandy","description"],"mappings":"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","file":"static/js/64.046c9380.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\"\nimport { Twemoji } from \"react-emoji-render\"\nimport * as d3 from \"d3\"\n\nimport Aside from \"components/_ui/Aside/Aside\"\nimport Expandy from \"components/_ui/Expandy/Expandy\"\nimport InlineExpandy from \"components/_ui/InlineExpandy/InlineExpandy\"\nimport Button from \"components/_ui/Button/Button\"\nimport Link from \"components/_ui/Link/Link\"\nimport Icon from \"components/_ui/Icon/Icon\"\nimport List from \"components/_ui/List/List\"\nimport Code from \"components/_ui/Code/Code\"\nimport { DocsLink, ReadMore, P } from \"./LearnD3\"\nimport bookImage from \"images/book.png\";\n\nconst possibleConditions = [\n    \"rainy\", \"sunny\", \"cloudy\", \"stormy\", \"balmy\", \"clear\"\n]\nconst numberOfDataPoints = 4\nconst LearnD3Scales = ({ onScrollToSectionLocal }) => {\n    const [iteration, setIteration] = useState(0)\n\n    const weatherData = useMemo(() => {\n        const today = new Date()\n        return new Array(numberOfDataPoints).fill(0).map((_, i) => ({\n            date: d3.timeFormat(\"%Y-%m-%d\")(d3.timeDay.offset(today, -(numberOfDataPoints - i - 1))),\n            conditions: possibleConditions[Math.floor(Math.random() * (possibleConditions.length - 1))],\n            chanceOfPrecipitation: Number(d3.format(\"0.1f\")(Math.random())),\n            humidity: Number(d3.format(\"0.1f\")(Math.random())),\n        }))\n    }, [iteration])\n\n    return (\n        <div className=\"LearnD3Scales\">\n            <p>\n                A <b>scale</b> is an essential concept when visualizing data. To physicalize a dataset, you must turn each metric into a <b>visual feature</b>. For example, say we have this weather dataset:\n            </p>\n\n            <Button className={`RefreshButton RefreshButton--iteration-${iteration % 2}`} onClick={() => setIteration(iteration + 1)} style={refreshButtonStyle}>\n                <Icon name=\"refresh\" />\n                Re-generate data\n            </Button>\n            <Code size=\"s\" fileName=\"data.json\">\n                { JSON.stringify(weatherData, null, 2) }\n            </Code>\n\n            <p>\n                Each item in our dataset has three metrics:\n            </p>\n\n            <List items={[\n                 <><P>date</P>\n                 <p>An <b>ordinal</b> variable <br /> between <P>{ weatherData[0].date }</P> and <P>{ weatherData[weatherData.length - 1].date }</P></p></>,\n                 <><P>conditions</P>\n                 <p>A <b>nominal</b> variable <br /> {possibleConditions.map((d, i) => (\n                    <>\n                        {(i == possibleConditions.length - 1) ? \", or \" : !!i ? \", \" : \"\"}\n                        <P>{ d }</P>\n                    </>\n                 ))}</p></>,\n                 <><P>chanceOfPrecipitation</P>\n                 <p>A <b>continuous</b> variable <br /> between <P>0</P> and <P>1</P></p></>,\n                 <><P>humidity</P>\n                 <p>A <b>continuous</b> variable <br /> between <P>0</P> and <P>1</P></p></>,\n            ]} />\n\n            <Aside className=\"LearnD3__promo\">\n                <img src={bookImage} alt=\"book\" className=\"LearnD3__promo__img\"/>\n                    <div className=\"LearnD3__promo__text\">\n                    <p>\n                        Not sure about the difference between <b>ordinal</b> and <b>continuous</b> variables?\n                    </p>\n                    Learn more about <i>types of data</i> in the <Link href=\"http://fullstack.io/fullstack-d3\"><b>Fullstack D3 and Data Visualization</b></Link> book.\n                </div>\n            </Aside>\n\n            <p>\n                Now that we know what variables we’re dealing with, we can decide <b>how to visually represent each metric</b>. For example, we could create:\n            </p>\n\n            <List items={[\n                <><b>a timeline</b>, with a line’s <P>date</P> represented as horizontal position, and <P>chanceOfPrecipitation</P> represented as vertical position</>,\n                <><b>a scatter plot</b> with each day’s <P>chanceOfPrecipitation</P> represented as horizontal position, and <P>humidity</P> represented as vertical position</>,\n                <>we could even <b>calculate a derivative metric</b>, bucketing days with similar <P>conditions</P>, and creating a bar chart representing frequency of each <P>condition</P></>,\n            ]} />\n\n            <p>\n                Great! But converting between the <b>data domain</b> and the <b>physical domain</b> can be complicated.\n            </p>\n\n            <h3>d3-scale</h3>\n\n            <p>\n                To help with these calculations, we can create <DocsLink repo=\"scale\">d3 scales</DocsLink>. A <b>scale</b> will convert a metric’s value into the physical value we need to create our charts.\n            </p>\n\n            <p>\n                For example, to convert <P>chanceOfPrecipitation</P> as horizontal position within our 500px wide chart, we could create an <b>x scale</b> like so:\n            </p>\n\n            <Code fileName=\"our-chart.js\">\n{`const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([0, 500]) // possible x values`}\n            </Code>\n\n            <p>\n                Now we can use our <P>xScale</P> convert values between the data <b>domain</b> and the physical <b>range</b>. For example, we can find <b>how far to the right a <P>0.5</P> chanceOfPrecipitation will be</b>:\n            </p>\n\n            <Code canEval highlightedLines={[5, 6]} fileName=\"our-chart.js\" doOnlyShowHighlightedLines>\n{`const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([0, 500]) // possible x values\n\nconst pixelsToTheRight = xScale(0.5)\nalert(pixelsToTheRight)`}\n            </Code>\n\n            <p>\n                Exactly! A <P>chanceOfPrecipitation</P> would be 250px to the right: centered horizontally in our chart since <P>0.5</P> is halfway between the bounds of possible values (<P>0</P> and <P>1</P>).\n            </p>\n\n            <p>\n                There are many types of <DocsLink repo=\"scale\">d3 scales</DocsLink> for handling different kinds of metrics. For example, <DocsLink repo=\"scale\" id=\"scaleTime\" /> for handling datetimes, and <DocsLink repo=\"scale\" id=\"scaleBand\" /> for handling discrete metrics.\n            </p>\n\n            <p>\n                <DocsLink repo=\"scale\">d3 scales</DocsLink> have many useful methods, here are a few:\n            </p>\n\n            <List items={[\n                <>\n                    <DocsLink repo=\"scale\" id=\"continuous_ticks\">.ticks()</DocsLink>\n                    <p>\n                        returns an array of equally-spaced values in the output <b>range</b>. It defaults to 10 values, but you can pass a different <i>count</i> for it to aim for.\n                    </p>\n\n            <Code canEval highlightedLines={[5, 6]} fileName=\"our-chart.js\" doOnlyShowHighlightedLines>\n{`const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([0, 500]) // possible x values\n\nconst ticks = xScale.ticks()\nalert(ticks)`}\n            </Code>\n                </>,\n                <>\n                    <DocsLink repo=\"scale\" id=\"continuous_nice\">.nice()</DocsLink>\n                    <p>\n                        extends the data <b>domain</b> so that it starts and ends on round values. This can make your chart friendlier to readers, since <P>250</P> is an easier number to process than <P>249.5</P>.\n                    </p>\n                </>,\n                <>\n                    <DocsLink repo=\"scale\" id=\"continuous_clamp\">.clamp()</DocsLink>\n                    <p>\n                        ensures that the scale will return a value within the <b>range</b>, even if the input is outside of the <b>domain</b>. For example, our <P>xScale</P> will, by default, return <P>1000</P> for an input of <P>2</P>.\n                    </p>\n\n            <Code canEval highlightedLines={[5, 6]} fileName=\"our-chart.js\" doOnlyShowHighlightedLines>\n{`const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([0, 500]) // possible x values\n\nconst output = xScale(2)\nalert(output)`}\n            </Code>\n                </>,\n                <>\n                    <DocsLink repo=\"scale\" id=\"continuous_invert\">.invert()</DocsLink>\n                    <p>\n                        converts a value backwards, from the output <b>range</b> to the data <b>domain</b>. This comes in handy for things like surfacing a tooltip where a user’s mouse is hovering.\n                    </p>\n\n            <Code canEval highlightedLines={[5, 6]} fileName=\"our-chart.js\" doOnlyShowHighlightedLines>\n{`const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([0, 500]) // possible x values\n\nconst chanceOfPrecipitationAt250 = xScale.invert(250)\nalert(chanceOfPrecipitationAt250)`}\n            </Code>\n                </>,\n                <>\n                    <DocsLink repo=\"scale\" id=\"continuous_domain\">.domain()</DocsLink> and <DocsLink repo=\"scale\" id=\"continuous_range\">.range()</DocsLink>\n                    <p>\n                        if we created our scale programatically, we can query what its <b>domain</b> and <b>range</b> are\n                    </p>\n\n            <Code canEval highlightedLines={[5, 6, 7]} fileName=\"our-chart.js\" doOnlyShowHighlightedLines>\n{`const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([0, 500]) // possible x values\n\nconst range = xScale.range()\nconst domain = xScale.domain()\nalert(\\`range: \\${range}, \\\\ndomain: \\${domain}\\`)`}\n            </Code>\n                </>,\n                <>\n                    <DocsLink repo=\"scale\" id=\"continuous_interpolate\">.interpolate()</DocsLink>\n                    <p>\n                        something that might not be immediately obvious is that we can create a scale that converts a value into a <b>color</b>. We can use <DocsLink repo=\"scale\" id=\"continuous_interpolate\">.interpolate()</DocsLink> to specity the <b>color space</b> that we want our scale to function within:\n                    </p>\n\n            <Code canEval highlightedLines={[6]} fileName=\"our-chart.js\">\n{`const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([\"white\", \"green\"]) // possible colors\n\nconst halfwayPointRgb = xScale(0.5)\nxScale.interpolate(d3.interpolateHcl)\nconst halfwayPointHcl = xScale(0.5)\nalert(\\`rgb: \\${halfwayPointRgb}, \\\\nhcl: \\${halfwayPointHcl}\\`)`}\n            </Code>\n                </>,\n            ]} />\n\n            <p>\n                <DocsLink repo=\"scale\">d3 scales</DocsLink> are a one of the most important concepts for visualizing data with d3 - make sure to familiarize yourself with them so you can convert between any data domain and the output range with ease.\n            </p>\n\n            <ReadMore id=\"scale\" />\n\n        </div>\n    )\n}\n\nexport default LearnD3Scales\n\nconst refreshButtonStyle = {\n    position: \"absolute\",\n    marginTop: \"3em\",\n    right: \"0.5em\",\n    paddingBottom: \"0.8em\",\n    zIndex: \"10\",\n}","import React, { useState, useRef } from 'react'\nimport Icon from \"components/_ui/Icon/Icon\";\nimport Tooltip from \"components/_ui/Tooltip/Tooltip\";\nimport { scrollTo } from \"utils.js\"\n\nimport './Expandy.scss';\n\nconst Expandy = ({ trigger, triggerExpandText, doHideIfCollapsed=false, className, children, ...props }) => {\n    const [isExpanded, setIsExpanded] = useState(false)\n    const ref = useRef()\n\n    // const onToggleExpanded = () => {\n    //     setIsExpanded(!isExpanded)\n\n    //     if (isExpanded) {\n    //         const top = ref.current.getBoundingClientRect().top\n    //         if (top > window.innerHeight * 0.3) return\n    //         const y = top\n    //             + window.scrollY\n    //             - window.innerHeight * 0.3\n    //         scrollTo(y, 600)\n    //     }\n    // }\n\n    return (\n        <details className={`Expandy Expandy--is-${isExpanded ? \"expanded\" : \"collapsed\"} ${className}`} {...props} ref={ref}\n            onToggle={e => {\n                const isExpanded = e.target.open\n                setIsExpanded(isExpanded)\n        }}>\n            <summary>\n            <div className=\"Expandy__trigger button-no-appearance\" >\n                <div className=\"Expandy__trigger__text\">\n                    <b>{ trigger }</b>\n                    <div className=\"Expandy__trigger__info\">\n                        { triggerExpandText || `tap me ${isExpanded ? \"to hide\" : \"for more\" } details` }\n                    </div>\n                </div>\n                <div className=\"Expandy__trigger__mark\">ἰ</div>\n            </div>\n\n            <Tooltip\n                className=\"Expandy__toggle\"\n                contents={<button className=\"button-no-appearance\">{isExpanded ? \"Collapse me\" : \"Expand me\"}</button>}\n                >\n                <div className=\"Expandy__toggle__arrow Expandy__toggle__arrow--up\">\n                    <Icon name=\"arrow\" direction=\"n\" size=\"s\" />\n                </div>\n                <div className=\"Expandy__toggle__arrow Expandy__toggle__arrow--down\">\n                    <Icon name=\"arrow\" direction=\"s\" size=\"s\" />\n                </div>\n                </Tooltip>\n                </summary>\n            <div className=\"Expandy__contents\">\n                {children }\n            </div>\n        </details>\n    )\n}\n\nexport default Expandy\n","import React, { useState, useRef } from 'react'\nimport Icon from \"components/_ui/Icon/Icon\"\n\nimport './InlineExpandy.scss';\n\nconst InlineExpandy = ({ description, className, children, ...props }) => {\n    const [isExpanded, setIsExpanded] = useState(false)\n\n    const onToggleExpanded = () => {\n        setIsExpanded(!isExpanded)\n    }\n\n    return (\n        <div className={`InlineExpandy InlineExpandy--is-${isExpanded ? \"expanded\" : \"collapsed\"} ${className}`} {...props}>\n            <div className=\"InlineExpandy__trigger\" onClick={onToggleExpanded}>\n                { isExpanded ? \"Hide\" : \"Show\" } { description }...\n            </div>\n\n            {isExpanded && (\n                <div className=\"InlineExpandy__contents\">\n                    { children }\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default InlineExpandy\n"],"sourceRoot":""}