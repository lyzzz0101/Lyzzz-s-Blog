{"version":3,"sources":["components/Blog/posts/LearnD3/LearnD3Time.jsx","components/_ui/Expandy/Expandy.jsx","components/_ui/InlineExpandy/InlineExpandy.jsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_emoji_render__WEBPACK_IMPORTED_MODULE_1__","d3__WEBPACK_IMPORTED_MODULE_2__","components_ui_Aside_Aside__WEBPACK_IMPORTED_MODULE_3__","components_ui_Link_Link__WEBPACK_IMPORTED_MODULE_6__","components_ui_List_List__WEBPACK_IMPORTED_MODULE_8__","components_ui_Code_Code__WEBPACK_IMPORTED_MODULE_9__","_LearnD3__WEBPACK_IMPORTED_MODULE_10__","LearnD3Time","_ref","onScrollToSectionLocal","a","createElement","className","items","d3","Date","offset","repo","id","Object","keys","timeStrings","map","str","key","style","width","opacity","display","marginLeft","textAlign","fontSize","lineHeight","size","concat","to","onClick","intervals","d","i","length","Fragment","svg","text","f","S","M","H","I","p","A","b","B","m","Y","Z","Expandy","trigger","triggerExpandText","doHideIfCollapsed","children","props","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","_useState","useState","_useState2","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isExpanded","setIsExpanded","ref","useRef","react__WEBPACK_IMPORTED_MODULE_2___default","assign","onToggle","e","target","open","components_ui_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_4__","contents","components_ui_Icon_Icon__WEBPACK_IMPORTED_MODULE_3__","name","direction","InlineExpandy","description"],"mappings":"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","file":"static/js/65.0f4f1091.chunk.js","sourcesContent":["import React, { useMemo, useState } from \"react\"\nimport { Twemoji } from \"react-emoji-render\"\nimport * as d3 from \"d3\"\n\nimport Aside from \"components/_ui/Aside/Aside\"\nimport Expandy from \"components/_ui/Expandy/Expandy\"\nimport InlineExpandy from \"components/_ui/InlineExpandy/InlineExpandy\"\nimport Link from \"components/_ui/Link/Link\"\nimport Icon from \"components/_ui/Icon/Icon\"\nimport List from \"components/_ui/List/List\"\nimport Code from \"components/_ui/Code/Code\"\nimport { DocsLink, ReadMore, P } from \"./LearnD3\"\nimport bookImage from \"images/book.png\";\n\nconst numberOfDataPoints = 4\nconst LearnD3Time = ({ onScrollToSectionLocal }) => {\n\n    return (\n        <div className=\"LearnD3Time\">\n            <p>\n              While visualizing data, we'll often have to deal with the three-headed hydra that is time. When we, as humans, think about time, it's often broken into intervals:\n            </p>\n\n            <List items={[\n              \"minutes\", \"hours\", \"days\", \"months\", \"years\"\n            ]} />\n\n            <p>\n              And we express a specific point in time in terms of those intervals. For example, today is <P>{d3.timeFormat(\"%A, %B %-d, %Y\")(new Date())}</P>, and tomorrow is <P>{d3.timeFormat(\"%A, %B %-d, %Y\")(d3.timeDay.offset(new Date(), 1))}</P>. But how can we place these two date strings on a scale?\n            </p>\n\n            {/* <Code size=\"s\" fileName=\"data.json\">\n            </Code> */}\n            <h3>d3-time-format</h3>\n\n            <p>\n              Javascript has a native <b>Date</b> object that represent a point in time <i>down to the millisecond</i>. We can turn a string into a <b>Date</b> by using <DocsLink repo=\"time-format\" id=\"timeParse\" />.\n            </p>\n\n            <p>\n              <DocsLink repo=\"time-format\" id=\"timeParse\" /> takes one parameter: a <i>specifier</i> string that represents to format of your datetime. This string will be made up of individual <i>specifiers</i>: a combination of a <P>%</P> and a letter.\n            </p>\n\n            <p>\n              Here are most of the common <i>specifiers</i>\n            </p>\n\n            <div className=\"\">\n              {Object.keys(timeStrings).map(str => (\n                <div key={str} style={{\n                  width: \"20em\",\n                }}>\n                  <span style={{\n                    opacity: 0.5,\n                  }}>%</span>\n                  <b className=\"tnum\" style={{\n                    display: \"inline-block\",\n                    marginLeft: \"0.1em\",\n                    textAlign: \"center\",\n                    width: \"1em\"\n                  }}>{ str }</b>\n                  <span style={{\n                    fontSize: \"0.8em\",\n                    lineHeight: \"1.3em\",\n                    marginLeft: \"0.5em\",\n                  }}>\n                    { timeStrings[str] }\n                  </span>\n                </div>\n              ))}\n            </div>\n            <br />\n\n            <p>\n              For example, if we wanted to parse the date string <P>{d3.timeFormat(\"%A, %B %d, %Y\")(new Date())}</P>, we could use the following code:\n            </p>\n\n              <Code size=\"s\">{`const dateString = \"${d3.timeFormat(\"%A, %B %d, %Y\")(new Date())}\"\nconst today = d3.timeParse(\"%A, %B %d, %Y\")(dateString)\n// <Date> ${d3.timeParse(\"%A, %B %d, %Y\")(d3.timeFormat(\"%A, %B %d, %Y\")(new Date()))}`}</Code>\n\n            <Aside>\n              To create a linear scale for datetimes in our dataset, we would pass these parsed <b>Date</b>s to <DocsLink repo=\"scale\" id=\"timeScale\" />. Learn more about <b>scales</b> in the <Link to=\"#\" onClick={onScrollToSectionLocal(\"converting-data-to-the-physical-domain\")}>scales section</Link>.\n            </Aside>\n\n            <p>\n              We can pass the same specifiers with <DocsLink repo=\"time-format\" id=\"timeFormat\" /> to convert a <b>Date</b> object back into a string, which comes in handy for labels and axes:\n            </p>\n\n            <Code size=\"s\">{`const today = new Date()\nconst today = d3.timeFormat(\"%A, %B %d, %Y\")(today)\n// ${d3.timeFormat(\"%A, %B %d, %Y\")(new Date())}`}</Code>\n\n            <p>\n              If a <i>specifier</i> is zero-padded, adding a <P>-</P> will remove any beginning zeroes.\n            </p>\n\n            <Code size=\"s\">{`const today = new Date()\nconst today = d3.timeFormat(\"%A, %B %-d, %Y\")(today)\n// ${d3.timeFormat(\"%A, %B %-d, %Y\")(new Date())}`}</Code>\n\n            <p>\n              <DocsLink repo=\"time-format\" /> has methods for handling <b>UTC</b> and <b>ISO</b> times, as well as a few methods for handling <i>locales</i>.\n            </p>\n\n            <ReadMore id=\"time-format\" />\n\n            <h3>d3-time</h3>\n\n            <p>\n              But what if we need to modify datetimes?\n            </p>\n\n            <p>\n              <DocsLink repo=\"time\" /> has your back with a built-in set of intervals: {intervals.map((d,i) => (\n                <span>\n                  {!i ? \"\" : i == intervals.length - 1 ? \", and \" : \", \"} <DocsLink repo=\"time\" id={d}>{ d }</DocsLink>\n                </span>\n              ))}.\n            </p>\n\n            <p>\n              Each of these intervals has a handful of methods:\n            </p>\n\n            <List items={[\n              <>\n                <DocsLink repo=\"time\" id=\"interval_floor\">.floor()</DocsLink>, <DocsLink repo=\"time\" id=\"interval_ceil\">.ceil()</DocsLink>, and <DocsLink repo=\"time\" id=\"interval_round\">.round()</DocsLink> for creating a <b>Date</b> at the start, end, or closest boundary of the interval\n              </>,\n              <>\n                <DocsLink repo=\"time\" id=\"interval_offset\">.offset()</DocsLink> to offset the <b>Date</b> by a specified number of intervals\n              </>,\n              <>\n                <DocsLink repo=\"time\" id=\"interval_range\">.range()</DocsLink> to create an array of <b>Date</b>s, one for each interval between a specified start and stop <b>Date</b>\n              </>,\n              <>\n                <DocsLink repo=\"time\" id=\"interval_count\">.count()</DocsLink> to return the number of intervals that can fit between two specified <b>Date</b>s\n              </>,\n            ]} />\n            <p>\n              For example, if I wanted to create a date time that was exactly <i>one week</i> after today, I could use <DocsLink repo=\"time\" id=\"timeWeek\" />.\n            </p>\n\n            <Code size=\"s\">{`d3.timeWeek.offset(new Date(), 1)\n// <Date> ${d3.timeWeek.offset(new Date(), 1)}`}</Code>\n\n            <p>\n              <DocsLink repo=\"time\" /> has come in handy very often, and I would highly recommend getting familiar with its API. There are many dragons when dealing with datetimes (different numbers of days in months, leap years, Daylight Savings time <Twemoji svg text=\"🙀\" />), which can be largely ignored with the right library.\n            </p>\n\n            <ReadMore id=\"time\" />\n\n\n\n        </div>\n    )\n}\n\nexport default LearnD3Time\n\nconst intervals = [\n  \"timeMillisecond\",\n  \"timeSecond\",\n  \"timeMinute\",\n  \"timeHour\",\n  \"timeDay\",\n  \"timeWeek\",\n  \"timeMonth\",\n  \"timeYear\",\n]\n\nconst timeStrings = {\n  \"f\": \"milliseconds\",\n  \"S\": \"seconds\",\n  \"M\": \"minute\",\n  \"H\": \"hour (24h)\",\n  \"I\": \"hour (12h)\",\n  \"p\": \"AM / PM\",\n  // \"u\": \"Monday-based day of the week\",\n  // \"w\": \"Sunday-based day of the week\",\n  \"d\": \"day of the month\",\n  // \"j\": \"day of the year\",\n  \"a\": \"abbreviated weekday name\",\n  \"A\": \"full weekday name\",\n  // \"U\": \"Sunday-based week of the year\",\n  // \"W\": \"Monday-based week of the year\",\n  \"b\": \"abbreviated month name\",\n  \"B\": \"full month name\",\n  \"m\": \"month\",\n  // \"y\": \"year without century\",\n  \"Y\": \"year\",\n  \"Z\": \"time zone offset\",\n  // \"x\": \"the locale’s date\",\n  // \"X\": \"the locale’s time\",\n}\n","import React, { useState, useRef } from 'react'\nimport Icon from \"components/_ui/Icon/Icon\";\nimport Tooltip from \"components/_ui/Tooltip/Tooltip\";\nimport { scrollTo } from \"utils.js\"\n\nimport './Expandy.scss';\n\nconst Expandy = ({ trigger, triggerExpandText, doHideIfCollapsed=false, className, children, ...props }) => {\n    const [isExpanded, setIsExpanded] = useState(false)\n    const ref = useRef()\n\n    // const onToggleExpanded = () => {\n    //     setIsExpanded(!isExpanded)\n\n    //     if (isExpanded) {\n    //         const top = ref.current.getBoundingClientRect().top\n    //         if (top > window.innerHeight * 0.3) return\n    //         const y = top\n    //             + window.scrollY\n    //             - window.innerHeight * 0.3\n    //         scrollTo(y, 600)\n    //     }\n    // }\n\n    return (\n        <details className={`Expandy Expandy--is-${isExpanded ? \"expanded\" : \"collapsed\"} ${className}`} {...props} ref={ref}\n            onToggle={e => {\n                const isExpanded = e.target.open\n                setIsExpanded(isExpanded)\n        }}>\n            <summary>\n            <div className=\"Expandy__trigger button-no-appearance\" >\n                <div className=\"Expandy__trigger__text\">\n                    <b>{ trigger }</b>\n                    <div className=\"Expandy__trigger__info\">\n                        { triggerExpandText || `tap me ${isExpanded ? \"to hide\" : \"for more\" } details` }\n                    </div>\n                </div>\n                <div className=\"Expandy__trigger__mark\">ἰ</div>\n            </div>\n\n            <Tooltip\n                className=\"Expandy__toggle\"\n                contents={<button className=\"button-no-appearance\">{isExpanded ? \"Collapse me\" : \"Expand me\"}</button>}\n                >\n                <div className=\"Expandy__toggle__arrow Expandy__toggle__arrow--up\">\n                    <Icon name=\"arrow\" direction=\"n\" size=\"s\" />\n                </div>\n                <div className=\"Expandy__toggle__arrow Expandy__toggle__arrow--down\">\n                    <Icon name=\"arrow\" direction=\"s\" size=\"s\" />\n                </div>\n                </Tooltip>\n                </summary>\n            <div className=\"Expandy__contents\">\n                {children }\n            </div>\n        </details>\n    )\n}\n\nexport default Expandy\n","import React, { useState, useRef } from 'react'\nimport Icon from \"components/_ui/Icon/Icon\"\n\nimport './InlineExpandy.scss';\n\nconst InlineExpandy = ({ description, className, children, ...props }) => {\n    const [isExpanded, setIsExpanded] = useState(false)\n\n    const onToggleExpanded = () => {\n        setIsExpanded(!isExpanded)\n    }\n\n    return (\n        <div className={`InlineExpandy InlineExpandy--is-${isExpanded ? \"expanded\" : \"collapsed\"} ${className}`} {...props}>\n            <div className=\"InlineExpandy__trigger\" onClick={onToggleExpanded}>\n                { isExpanded ? \"Hide\" : \"Show\" } { description }...\n            </div>\n\n            {isExpanded && (\n                <div className=\"InlineExpandy__contents\">\n                    { children }\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default InlineExpandy\n"],"sourceRoot":""}