{"version":3,"sources":["../node_modules/d3-geo-projection/node_modules/d3-geo/src/noop.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/buffer.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/math.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/pointEqual.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/rejoin.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/adder.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/cartesian.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/polygonContains.js","../node_modules/d3-geo-projection/node_modules/d3-array/src/ascending.js","../node_modules/d3-geo-projection/node_modules/d3-array/src/bisect.js","../node_modules/d3-geo-projection/node_modules/d3-array/src/bisector.js","../node_modules/d3-geo-projection/node_modules/d3-array/src/cross.js","../node_modules/d3-geo-projection/node_modules/d3-array/src/array.js","../node_modules/d3-geo-projection/node_modules/d3-array/src/range.js","../node_modules/d3-geo-projection/node_modules/d3-array/src/ticks.js","../node_modules/d3-geo-projection/node_modules/d3-array/src/threshold/sturges.js","../node_modules/d3-geo-projection/node_modules/d3-array/src/merge.js","../node_modules/d3-geo-projection/node_modules/d3-array/src/zip.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/index.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/antimeridian.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/constant.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/compose.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/rotation.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/circle.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/circle.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/line.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/clip/rectangle.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/identity.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/transform.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/stream.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/path/bounds.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/fit.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/resample.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/index.js","../node_modules/d3-geo-projection/src/math.js","../node_modules/d3-geo-projection/src/airy.js","../node_modules/d3-geo-projection/src/aitoff.js","../node_modules/d3-geo-projection/src/armadillo.js","../node_modules/d3-geo-projection/src/august.js","../node_modules/d3-geo-projection/src/baker.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/azimuthal.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/azimuthalEquidistant.js","../node_modules/d3-geo-projection/src/berghaus.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/azimuthalEqualArea.js","../node_modules/d3-geo-projection/src/hammer.js","../node_modules/d3-geo-projection/src/newton.js","../node_modules/d3-geo-projection/src/bertin.js","../node_modules/d3-geo-projection/src/mollweide.js","../node_modules/d3-geo-projection/src/boggs.js","../node_modules/d3-geo-projection/src/parallel1.js","../node_modules/d3-geo-projection/src/sinusoidal.js","../node_modules/d3-geo-projection/src/bonne.js","../node_modules/d3-geo-projection/src/bottomley.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/centroid.js","../node_modules/d3-geo-projection/src/bromley.js","../node_modules/d3-geo-projection/src/chamberlin.js","../node_modules/d3-geo-projection/src/collignon.js","../node_modules/d3-geo-projection/src/craig.js","../node_modules/d3-geo-projection/src/craster.js","../node_modules/d3-geo-projection/src/cylindricalEqualArea.js","../node_modules/d3-geo-projection/src/cylindricalStereographic.js","../node_modules/d3-geo-projection/src/eckert1.js","../node_modules/d3-geo-projection/src/eckert2.js","../node_modules/d3-geo-projection/src/eckert3.js","../node_modules/d3-geo-projection/src/eckert4.js","../node_modules/d3-geo-projection/src/eckert5.js","../node_modules/d3-geo-projection/src/eckert6.js","../node_modules/d3-geo-projection/src/eisenlohr.js","../node_modules/d3-geo-projection/src/fahey.js","../node_modules/d3-geo-projection/src/foucaut.js","../node_modules/d3-geo-projection/src/foucautSinusoidal.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/orthographic.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/equirectangular.js","../node_modules/d3-geo-projection/src/gilbert.js","../node_modules/d3-geo-projection/src/gingery.js","../node_modules/d3-geo-projection/src/ginzburgPolyconic.js","../node_modules/d3-geo-projection/src/ginzburg4.js","../node_modules/d3-geo-projection/src/ginzburg5.js","../node_modules/d3-geo-projection/src/ginzburg6.js","../node_modules/d3-geo-projection/src/ginzburg8.js","../node_modules/d3-geo-projection/src/ginzburg9.js","../node_modules/d3-geo-projection/src/square.js","../node_modules/d3-geo-projection/src/gringorten.js","../node_modules/d3-geo-projection/src/elliptic.js","../node_modules/d3-geo-projection/src/guyou.js","../node_modules/d3-geo-projection/src/hammerRetroazimuthal.js","../node_modules/d3-geo-projection/src/healpix.js","../node_modules/d3-geo-projection/src/hill.js","../node_modules/d3-geo-projection/src/sinuMollweide.js","../node_modules/d3-geo-projection/src/homolosine.js","../node_modules/d3-geo-projection/src/hufnagel.js","../node_modules/d3-geo-projection/src/integrate.js","../node_modules/d3-geo-projection/src/hyperelliptical.js","../node_modules/d3-geo-projection/src/interrupted/index.js","../node_modules/d3-geo-projection/src/interrupted/boggs.js","../node_modules/d3-geo-projection/src/interrupted/homolosine.js","../node_modules/d3-geo-projection/src/interrupted/mollweide.js","../node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js","../node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js","../node_modules/d3-geo-projection/src/interrupted/sinusoidal.js","../node_modules/d3-geo-projection/src/kavrayskiy7.js","../node_modules/d3-geo-projection/src/lagrange.js","../node_modules/d3-geo-projection/src/larrivee.js","../node_modules/d3-geo-projection/src/laskowski.js","../node_modules/d3-geo-projection/src/littrow.js","../node_modules/d3-geo-projection/src/loximuthal.js","../node_modules/d3-geo-projection/src/miller.js","../node_modules/d3-geo-projection/src/modifiedStereographic.js","../node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","../node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","../node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/naturalEarth1.js","../node_modules/d3-geo-projection/src/naturalEarth2.js","../node_modules/d3-geo-projection/src/nellHammer.js","../node_modules/d3-geo-projection/src/interrupted/quarticAuthalic.js","../node_modules/d3-geo-projection/src/nicolosi.js","../node_modules/d3-geo-projection/src/patterson.js","../node_modules/d3-geo-projection/src/polyconic.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/area.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/bounds.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/interpolate.js","../node_modules/d3-geo-projection/src/polyhedral/matrix.js","../node_modules/d3-geo-projection/src/polyhedral/index.js","../node_modules/d3-geo-projection/node_modules/d3-geo/src/projection/gnomonic.js","../node_modules/d3-geo-projection/src/polyhedral/octahedron.js","../node_modules/d3-geo-projection/src/polyhedral/butterfly.js","../node_modules/d3-geo-projection/src/polyhedral/collignon.js","../node_modules/d3-geo-projection/src/polyhedral/waterman.js","../node_modules/d3-geo-projection/src/noop.js","../node_modules/d3-geo-projection/src/project/index.js","../node_modules/d3-geo-projection/src/project/clockwise.js","../node_modules/d3-geo-projection/src/project/contains.js","../node_modules/d3-geo-projection/src/quincuncial/index.js","../node_modules/d3-geo-projection/src/quincuncial/gringorten.js","../node_modules/d3-geo-projection/src/quincuncial/peirce.js","../node_modules/d3-geo-projection/src/quantize.js","../node_modules/d3-geo-projection/src/rectangularPolyconic.js","../node_modules/d3-geo-projection/src/robinson.js","../node_modules/d3-geo-projection/src/satellite.js","../node_modules/d3-geo-projection/src/stitch.js","../node_modules/d3-geo-projection/src/times.js","../node_modules/d3-geo-projection/src/twoPoint.js","../node_modules/d3-geo-projection/src/twoPointAzimuthal.js","../node_modules/d3-geo-projection/src/twoPointEquidistant.js","../node_modules/d3-geo-projection/src/vanDerGrinten.js","../node_modules/d3-geo-projection/src/vanDerGrinten2.js","../node_modules/d3-geo-projection/src/vanDerGrinten3.js","../node_modules/d3-geo-projection/src/vanDerGrinten4.js","../node_modules/d3-geo-projection/src/wagner.js","../node_modules/d3-geo-projection/src/wagner4.js","../node_modules/d3-geo-projection/src/wagner6.js","../node_modules/d3-geo-projection/src/wiechel.js","../node_modules/d3-geo-projection/src/winkel3.js","../node_modules/d3-geo-projection/src/index.js"],"names":["noop","buffer","line","lines","point","x","y","m","push","lineStart","lineEnd","rejoin","length","pop","concat","shift","result","math_epsilon","pi","Math","PI","halfPi","quarterPi","tau","degrees","radians","abs","atan","atan2","cos","sin","ceil","exp","floor","log","pow","math_sign","sign","sqrt","tan","acos","asin","haversin","pointEqual","a","b","Intersection","points","other","entry","this","z","o","e","v","n","p","segments","compareIntersection","startInside","interpolate","stream","i","subject","clip","forEach","segment","p0","p1","sort","rejoin_link","start","current","isSubject","array","adder","Adder","reset","prototype","constructor","s","t","add","_add","temp","valueOf","bv","av","cartesian_spherical","cartesian","cartesian_cartesian","spherical","lambda","phi","cosPhi","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","k","cartesianNormalizeInPlace","d","l","polygonContains_sum","longitude","ascending","NaN","ascendingBisect","compare","f","left","lo","hi","mid","right","bisector","array_array","Array","range","slice","map","stop","step","arguments","max","merge","arrays","merged","j","src_clip","pointVisible","clipLine","sink","polygon","ring","ringBuffer","ringSink","polygonStarted","polygonStart","pointRing","ringStart","ringEnd","polygonEnd","sinPhi","normal","angle","winding","point0","lambda0","phi0","sinPhi0","cosPhi0","lambda1","sinPhi1","cosPhi1","point1","phi1","delta","absDelta","antimeridian","arc","intersection","phiArc","polygonContains","clip_compareIntersection","sphere","pointLine","clean","ringSegments","filter","validSegment","clip_antimeridian","_clean","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","from","to","direction","src_constant","compose","invert","rotationIdentity","round","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","src_rotation","rotate","forward","coordinates","circleStream","radius","t0","t1","cosRadius","sinRadius","circleRadius","clip_circle","cr","smallRadius","notHemisphere","visible","intersect","two","n1","n2","n2n2","n1n2","determinant","c1","c2","n1xn2","A","u","w","uu","t2","q","polar","q1","code","r","c0","v0","v00","point2","c","clip_line","x0","y0","x1","y1","ax","ay","dx","dy","clipMax","clipMin","clipRectangle","a1","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","first","activeStream","bufferStream","clipStream","linePoint","a0","b0","b1","polygonInside","cleanInside","min","src_identity","transformer","methods","TransformStream","key","streamGeometry","geometry","streamGeometryType","hasOwnProperty","type","streamObjectType","Feature","object","FeatureCollection","features","Sphere","Point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","src_stream","bounds_x0","Infinity","bounds_y0","bounds_x1","bounds_y1","path_bounds","bounds","fit","projection","fitBounds","clipExtent","scale","translate","fitExtent","extent","h","maxDepth","cosMinDistance","resample","project","delta2","resampleLineTo","depth","d2","phi2","lambda2","x2","y2","dx2","dy2","dz","lambda00","x00","y00","a00","b00","c00","resampleStream","ringPoint","resample_resample","resampleNone","transformRadians","scaleTranslateRotate","sx","sy","alpha","cosAlpha","sinAlpha","ai","bi","ci","fi","transform","projection_projection","projectionMutator","projectAt","projectResample","projectTransform","projectRotateTransform","cache","cacheStream","theta","preclip","postclip","recenter","center","apply","transformRotate","_","undefined","clipAngle","reflectX","reflectY","precision","fitSize","size","fitWidth","width","fitHeight","height","math_abs","math_atan","math_atan2","math_cos","math_exp","math_floor","math_log","math_max","math_min","math_pow","src_math_sign","math_sin","math_tan","src_math_epsilon","math_epsilon2","math_pi","math_halfPi","math_quarterPi","sqrt1_2","SQRT1_2","sqrt2","math_sqrt","sqrtPi","math_tau","math_degrees","math_radians","math_asin","math_acos","sinh","cosh","airyRaw","beta","tanBeta_2","cosx","cosy","siny","cosz","z_2","cosz_2","sinz_2","tanz_2","lnsecz_2","sinz","airy","aitoffRaw","sincia","sinci","sinx","sinx_2","cosx_2","sin_2y","sin2y","cos2y","sin2x_2","fx","fy","dxdx","dxdy","dydx","dydy","aitoff","armadilloRaw","sPhi0","tanPhi0","cosLambda","sinLambda","dxdLambda","dxdPhi","dydLambda","dydPhi","denominator","dLambda","dPhi","armadillo","stream_","parallel","rotateStream","sphereStream","augustRaw","tanPhi","sin3Eta","eta","xi","arcosh","arsinh","cosEta","coshXi","august","sqrt8","baker_phi0","bakerRaw","cosPhi_2","tanPhi_2","baker","azimuthalRaw","cx","cy","azimuthalInvert","sc","cc","azimuthalEquidistantRaw","berghausRaw","lobes","theta0","cotAlpha","berghaus","projectionStream","sr","delta0","azimuthalEqualAreaRaw","cxcy","hammerRaw","B","hammerQuarticAuthalicRaw","src_hammer","coefficient","solve","f0","f1","steps","solve2d","MAX_ITERATIONS","eps","err2","da","db","tx","ty","ea","eb","pa","pb","dxa","dya","dxb","dyb","D","bertin1953Raw","hammer","fu","bertin","mollweideBromleyTheta","cp","cpsinPhi","mollweideBromleyRaw","mollweideRaw","mollweide","boggs_k","boggs_w","boggsRaw","ky","boggs","parallel1","sinusoidalRaw","sinusoidal","bonneRaw","cotPhi0","rho","bonne","bottomleyRaw","sinPsi","W0","W1","X0","Y0","Z0","X1","Y1","Z1","X2","Y2","Z2","centroid_lambda00","phi00","centroid_x0","centroid_y0","centroid_z0","bottomley","fraction","bromleyRaw","bromley","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroidPointCartesian","centroidLinePointFirst","centroidLinePoint","centroidRingPointFirst","centroidRingPoint","cz","centroid","chamberlin_distance","s1","s2","cosdLambda","sindPhi","sindLambda","chamberlin_angle","chamberlin_longitude","chamberlinRaw","p2","beta0","beta1","beta2","mean","pointRadians","chamberlinAfrica","chamberlin","R","collignonRaw","collignon","craigRaw","craig","sqrt3","crasterRaw","craster","cylindricalEqualAreaRaw","cylindricalEqualArea","cylindricalStereographicRaw","cylindricalStereographic","eckert1Raw","eckert1","eckert2Raw","eckert2","eckert3Raw","eckert3","eckert4Raw","eckert4","eckert5Raw","eckert5","eckert6Raw","eckert6","eisenlohrK","eisenlohrRaw","s0","_0","_1","cos1","v2","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","eisenlohr","faheyK","faheyRaw","fahey","foucautRaw","cosk","foucaut","foucautSinusoidalRaw","equatorial","raw","ratio","cosphi","sinphi","forwardMeridian","foucautSinusoidal","orthographicRaw","orthographic","equirectangularRaw","gilbertForward","gilbertInvert","src_gilbert","projectionType","equirectangular","gilbert","property","name","gingeryRaw","rho2","r2","rhoCosAlpha","k_","s_","gingeryLength","gingeryIntegrate","dTheta","x_halfPi","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","gingery","cRho","sRho","ginzburgPolyconic","g","xB","yB","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg4Raw","ginzburg4","ginzburg5Raw","ginzburg5","ginzburg6Raw","ginzburg6","ginzburg8Raw","lambda4","ginzburg8","ginzburg9Raw","ginzburg9","square","projectSquare","location","gringortenRaw","sLambda","sPhi","a2","secPhi","drdPhi","dp2dPhi","mu","nu","zeta","g2","zetaMug","f2","df","gringortenHexadecant","gringortenHexadecantInvert","gringorten","ellipticJ","twon","ellipticF","guyouRaw","K","psi","at","y_1","guyouComplexAtan","sinhPsi","cscPhi","cotPhi2","cotLambda2","ellipticFi","ellipticJi","tn","guyouComplexDivide","guyou","hammerRetroazimuthalRaw","hammerRetroazimuthalRotation","hammerRetroazimuthal","rotate_","circle","src_circle","call","healpixParallel","healpixLambert","healpixRaw","H","dy1","sphereTop","sphereBottom","sphereNudge","healpix","healpix_sphere","hillRaw","L","Bt","rho0","K2","L2","omega","sinTheta","cosTheta","Bt_Bt1","C","hill","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","sinuMollweide","homolosineRaw","homolosine","hufnagelRaw","psiMax","M","mapping","inversemapping","isNaN","kr","hufnagel","mutate","integrate","tol","maxdepth","fa","fm","fb","adsimp","V0","state","nanEncountered","sl","V1","V2","err","maxDepthCount","hyperellipticalRaw","gamma","elliptic","G","approx","Y","rmin","rmax","hyperelliptical","interrupted_pointEqual","interpolateLine","resampled","interrupted","inverse","lobe","bound","interpolateSphere","boggs_lobes","interrupted_boggs","homolosine_lobes","interrupted_homolosine","mollweide_lobes","interrupted_mollweide","mollweideHemispheres_lobes","mollweideHemispheres","sinuMollweide_lobes","interrupted_sinuMollweide","sinusoidal_lobes","interrupted_sinusoidal","kavrayskiy7Raw","kavrayskiy7","lagrangeRaw","lagrange","spacing","pi_sqrt2","larriveeRaw","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","larrivee","laskowskiRaw","lambdaPhi","laskowski","littrowRaw","y2_1","x2_y2_1","littrow","loximuthalRaw","loximuthal","millerRaw","miller","modifiedStereographicRaw","zr","zi","ar","br","deltar","deltai","sinc","alaska","gs48","gs50","modifiedStereographic_miller","lee","modifiedStereographicAlaska","modifiedStereographic","modifiedStereographicGs48","modifiedStereographicGs50","modifiedStereographicMiller","modifiedStereographicLee","coefficients","sqrt6","sqrt7","mtFlatPolarParabolicRaw","mtFlatPolarParabolic","mtFlatPolarQuarticRaw","sinTheta_2","mtFlatPolarQuartic","mtFlatPolarSinusoidalRaw","mtFlatPolarSinusoidal","naturalEarth1Raw","phi4","naturalEarth1","naturalEarth2Raw","phi6","naturalEarth2","nellHammerRaw","nellHammer","quarticAuthalic_lobes","quarticAuthalic","nicolosiRaw","b2","b2d2","d2b2","N","x2y2","pi2","nicolosi","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonC1","pattersonC2","pattersonC3","pattersonC4","pattersonRaw","yc","patterson","polyconicRaw","area_lambda00","area_phi00","area_lambda0","area_cosPhi0","area_sinPhi0","polyconic","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","areaPointFirst","areaPoint","sdLambda","adLambda","bounds_lambda0","bounds_phi0","bounds_lambda1","bounds_phi1","bounds_lambda2","bounds_lambda00","bounds_phi00","bounds_p0","ranges","bounds_range","deltaSum","bounds_boundsStream","bounds_boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","bounds_linePoint","inflection","phii","lambdai","bounds_angle","rangeCompare","rangeContains","src_bounds","feature","deltaMax","src_interpolate","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","distance","polyhedral_matrix","subtract","matrix_angle","matrix_length","multiply","polyhedral","root","face","node","recurse","parent","edges","faceEdges","shared","found","sharedEdge","polyhedral_pointEqual","children","child","hasInverse","faceInvert","matrix_inverse","faceDegrees","proj","outline","edge","multiPoint","notPoles","inside","isArray","some","gnomonicRaw","gnomonic","octahedron","polyhedral_octahedron","butterfly","faceProjection","faces","kx","collignonK","polyhedral_collignon","waterman","w5","xyz","waterman_cartesian","hexagon","waterman_spherical","cornerNormals","parents","normals","dot","src_noop","src_project","Error","projectFeature","projectFeatureCollection","projectGeometry","id","properties","projectGeometryCollection","sinkPoint","sinkLine","sinkPolygon","project_points","project_lines","polygons","holes","area","clockwise","hole","contains","yi","pj","xj","yj","quincuncial","projectQuincuncial","quincuncial_gringorten","peirce","quantize","input","digits","quantizePoint","output","toFixed","quantizePoints","quantizePointsNoDuplicates","quantizePolygon","quantizeGeometry","bbox","quantizeFeature","rectangularPolyconicRaw","E","cotPhi","rectangularPolyconic","robinson_K","robinsonRaw","i0","di","bx","by","yy","robinson","satelliteRaw","P","vertical","satelliteVerticalRaw","cosOmega","sinOmega","satellite","tilt","epsilonInverse","stitch_x0","x0e","stitch_x1","x1e","stitch_y0","y0e","stitch_y1","y1e","nonempty","normalizePoint","clampPoint","clamped","clampPoints","extractFragments","rings","fragments","index","pointk","xk","yk","fragmentBefore","stitchFragments","fragment","startFragment","end","endFragment","fragmentByStart","fragmentByEnd","stitchFeature","stitchGeometry","stitch","timesRaw","times","twoPoint","twoPointAzimuthalRaw","cosd","twoPointAzimuthalUsa","twoPointAzimuthal","twoPointEquidistantRaw","z0","lambdaa","lambdab","z02","tanLambda0","S","za","zb","cosza","coszb","twoPointEquidistantUsa","twoPointEquidistant","vanDerGrintenRaw","A2","P2","P2_A2","G_P2","Q","x2_y2","c3","m1","theta1","vanDerGrinten","vanDerGrinten2Raw","vanDerGrinten2","vanDerGrinten3Raw","vanDerGrinten3","vanDerGrinten4Raw","B2","C2","BC","B_C2","B_3C","D2","C_","B_C","F_","sqrtF","vanDerGrinten4","wagnerRaw","poleline","parallels","inflation","vratio","wagnerFormula","wagner","wagner7","wagner4_A","wagner4_B","wagner4Raw","wagner4","wagner6Raw","wagner6","wiechelRaw","sin1_Phi","wiechel","winkel3Raw","F","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","winkel3","__webpack_require__","__webpack_exports__"],"mappings":"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","file":"static/js/9.380a7125.chunk.js","sourcesContent":["export default function noop() {}","import noop from \"../noop.js\";\nexport default function () {\n  var lines = [],\n      line;\n  return {\n    point: function point(x, y, m) {\n      line.push([x, y, m]);\n    },\n    lineStart: function lineStart() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function rejoin() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function result() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function (x) {\n  return x > 0 ? 1 : x < 0 ? -1 : 0;\n};\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}","import { abs, epsilon } from \"./math.js\";\nexport default function (a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}","import pointEqual from \"../pointEqual.js\";\nimport { epsilon } from \"../math.js\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n\n  this.e = entry; // is an entry?\n\n  this.v = false; // visited\n\n  this.n = this.p = null; // next & previous\n} // A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\n\n\nexport default function (segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n  segments.forEach(function (segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n,\n        p0 = segment[0],\n        p1 = segment[n],\n        x;\n\n    if (pointEqual(p0, p1)) {\n      if (!p0[2] && !p1[2]) {\n        stream.lineStart();\n\n        for (i = 0; i < n; ++i) {\n          stream.point((p0 = segment[i])[0], p0[1]);\n        }\n\n        stream.lineEnd();\n        return;\n      } // handle degenerate cases by moving the point\n\n\n      p1[0] += 2 * epsilon;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n  if (!subject.length) return;\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n\n    while (current.v) {\n      if ((current = current.n) === start) return;\n    }\n\n    points = current.z;\n    stream.lineStart();\n\n    do {\n      current.v = current.o.v = true;\n\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) {\n            stream.point((point = points[i])[0], point[1]);\n          }\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n\n          for (i = points.length - 1; i >= 0; --i) {\n            stream.point((point = points[i])[0], point[1]);\n          }\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n\n        current = current.p;\n      }\n\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n\n  a.n = b = array[0];\n  b.p = a;\n}","// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\nexport default function () {\n  return new Adder();\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function reset() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function add(y) {\n    _add(temp, y, this.t);\n\n    _add(this, temp.s, this.s);\n\n    if (this.s) this.t += temp.t;else this.s = temp.t;\n  },\n  valueOf: function valueOf() {\n    return this.s;\n  }\n};\nvar temp = new Adder();\n\nfunction _add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = a - av + (b - bv);\n}","import { asin, atan2, cos, sin, sqrt } from \"./math.js\";\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\nexport function cartesian(spherical) {\n  var lambda = spherical[0],\n      phi = spherical[1],\n      cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n} // TODO return a\n\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n} // TODO return d\n\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}","import adder from \"./adder.js\";\nimport { cartesian, cartesianCross, cartesianNormalizeInPlace } from \"./cartesian.js\";\nimport { abs, asin, atan2, cos, epsilon, halfPi, pi, quarterPi, sign, sin, tau } from \"./math.js\";\nvar sum = adder();\n\nfunction longitude(point) {\n  if (abs(point[0]) <= pi) return point[0];else return sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nexport default function (polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n  sum.reset();\n  if (sinPhi === 1) phi = halfPi + epsilon;else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta; // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  } // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ winding & 1;\n}","export default function (a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;","import ascending from \"./ascending\";\nexport default function (compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function left(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;\n      }\n\n      return lo;\n    },\n    right: function right(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;\n      }\n\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function (d, x) {\n    return ascending(f(d), x);\n  };\n}","import { pair } from \"./pairs\";\nexport default function (values0, values1, reduce) {\n  var n0 = values0.length,\n      n1 = values1.length,\n      values = new Array(n0 * n1),\n      i0,\n      i1,\n      i,\n      value0;\n  if (reduce == null) reduce = pair;\n\n  for (i0 = i = 0; i0 < n0; ++i0) {\n    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {\n      values[i] = reduce(value0, values1[i1]);\n    }\n  }\n\n  return values;\n}","var array = Array.prototype;\nexport var slice = array.slice;\nexport var map = array.map;","export default function (start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\nexport default function (start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n\n    while (++i < n) {\n      ticks[i] = (start + i) * step;\n    }\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n\n    while (++i < n) {\n      ticks[i] = (start - i) / step;\n    }\n  }\n\n  if (reverse) ticks.reverse();\n  return ticks;\n}\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}","export default function (values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}","export default function (arrays) {\n  var n = arrays.length,\n      m,\n      i = -1,\n      j = 0,\n      merged,\n      array;\n\n  while (++i < n) {\n    j += arrays[i].length;\n  }\n\n  merged = new Array(j);\n\n  while (--n >= 0) {\n    array = arrays[n];\n    m = array.length;\n\n    while (--m >= 0) {\n      merged[--j] = array[m];\n    }\n  }\n\n  return merged;\n}","import transpose from \"./transpose\";\nexport default function () {\n  return transpose(arguments);\n}","import clipBuffer from \"./buffer.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport { epsilon, halfPi } from \"../math.js\";\nimport polygonContains from \"../polygonContains.js\";\nimport { merge } from \"d3-array\";\nexport default function (pointVisible, clipLine, interpolate, start) {\n  return function (sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function polygonStart() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function polygonEnd() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function sphere() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i,\n          n = ringSegments.length,\n          m,\n          segment,\n          point;\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n      if (!n) return; // No intersections.\n\n      if (clean & 1) {\n        segment = ringSegments[0];\n\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n\n          for (i = 0; i < m; ++i) {\n            sink.point((point = segment[i])[0], point[1]);\n          }\n\n          sink.lineEnd();\n        }\n\n        return;\n      } // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n\n\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n} // Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\n\n\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}","import clip from \"./index.js\";\nimport { abs, atan, cos, epsilon, halfPi, pi, sin } from \"../math.js\";\nexport default clip(function () {\n  return true;\n}, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi, -halfPi]); // Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\n\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      _clean; // no intersections\n\n\n  return {\n    lineStart: function lineStart() {\n      stream.lineStart();\n      _clean = 1;\n    },\n    point: function point(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n\n      if (abs(delta - pi) < epsilon) {\n        // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        _clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) {\n        // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        _clean = 0;\n      }\n\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function lineEnd() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function clean() {\n      return 2 - _clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}","export default function (x) {\n  return function () {\n    return x;\n  };\n}","export default function (a, b) {\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function (x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n  return compose;\n}","import compose from \"./compose.js\";\nimport { abs, asin, atan2, cos, degrees, pi, radians, sin, tau } from \"./math.js\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function (lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];\n  }\n\n  rotation.invert = function (lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x * sinDeltaPhi)];\n  };\n\n  return rotation;\n}\n\nexport default function (rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function (coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}","import { cartesian, cartesianNormalizeInPlace, spherical } from \"./cartesian.js\";\nimport constant from \"./constant.js\";\nimport { acos, cos, degrees, epsilon, radians, sin, tau } from \"./math.js\";\nimport { rotateRadians } from \"./rotation.js\"; // Generates a circle centered at [0°, 0°], with a given radius and precision.\n\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n} // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\n\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function () {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {\n    point: point\n  };\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {\n      type: \"Polygon\",\n      coordinates: [ring]\n    };\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function (_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function (_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}","import { cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical } from \"../cartesian.js\";\nimport { circleStream } from \"../circle.js\";\nimport { abs, cos, epsilon, pi, radians, sqrt } from \"../math.js\";\nimport pointEqual from \"../pointEqual.js\";\nimport clip from \"./index.js\";\nexport default function (radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  } // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n\n\n  function clipLine(stream) {\n    var point0, // previous point\n    c0, // code for previous point\n    v0, // visibility of previous point\n    v00, // visibility of first point\n    _clean; // no intersections\n\n\n    return {\n      lineStart: function lineStart() {\n        v00 = v0 = false;\n        _clean = 1;\n      },\n      point: function point(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) point1[2] = 1;\n        }\n\n        if (v !== v0) {\n          _clean = 0;\n\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1], 2);\n            stream.lineEnd();\n          }\n\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t; // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            _clean = 0;\n\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1], 3);\n            }\n          }\n        }\n\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function lineEnd() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function clean() {\n        return _clean | (v00 && v0) << 1;\n      }\n    };\n  } // Intersects the great circle between a and b with the clip circle.\n\n\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b); // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n\n    var n1 = [1, 0, 0],\n        // normal\n    n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0],\n        // cartesianDot(n1, n2),\n    determinant = n2n2 - n1n2 * n1n2; // Two polar points.\n\n    if (!determinant) return !two && a;\n    var c1 = cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B); // Solve |p(t)|^2 = 1.\n\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n    if (t2 < 0) return;\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n    if (!two) return q; // Two intersection points.\n\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z; // Check that the first point is between a and b.\n\n    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  } // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n\n\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}","export default function (a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}","import { abs, epsilon } from \"../math.js\";\nimport clipBuffer from \"./buffer.js\";\nimport clipLine from \"./line.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport { merge } from \"d3-array\";\nvar clipMax = 1e9,\n    clipMin = -clipMax; // TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0,\n        a1 = 0;\n\n    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {\n      do {\n        stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      } while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];\n  }\n\n  return function (stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__,\n        y__,\n        v__,\n        // first point\n    x_,\n        y_,\n        v_,\n        // previous point\n    first,\n        clean;\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n\n          if (a1 <= y1) {\n            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;\n          } else {\n            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;\n          }\n        }\n      }\n\n      return winding;\n    } // Buffer geometry within a polygon and then clip it en masse.\n\n\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n\n      if (cleanInside || visible) {\n        stream.polygonStart();\n\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n\n        stream.polygonEnd();\n      }\n\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    } // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n\n\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}","export default function (x) {\n  return x;\n}","export default function (methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\nexport function transformer(methods) {\n  return function (stream) {\n    var s = new TransformStream();\n\n    for (var key in methods) {\n      s[key] = methods[key];\n    }\n\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function point(x, y) {\n    this.stream.point(x, y);\n  },\n  sphere: function sphere() {\n    this.stream.sphere();\n  },\n  lineStart: function lineStart() {\n    this.stream.lineStart();\n  },\n  lineEnd: function lineEnd() {\n    this.stream.lineEnd();\n  },\n  polygonStart: function polygonStart() {\n    this.stream.polygonStart();\n  },\n  polygonEnd: function polygonEnd() {\n    this.stream.polygonEnd();\n  }\n};","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function Feature(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function FeatureCollection(object, stream) {\n    var features = object.features,\n        i = -1,\n        n = features.length;\n\n    while (++i < n) {\n      streamGeometry(features[i].geometry, stream);\n    }\n  }\n};\nvar streamGeometryType = {\n  Sphere: function Sphere(object, stream) {\n    stream.sphere();\n  },\n  Point: function Point(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function MultiPoint(object, stream) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) {\n      object = coordinates[i], stream.point(object[0], object[1], object[2]);\n    }\n  },\n  LineString: function LineString(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function MultiLineString(object, stream) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) {\n      streamLine(coordinates[i], stream, 0);\n    }\n  },\n  Polygon: function Polygon(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function MultiPolygon(object, stream) {\n    var coordinates = object.coordinates,\n        i = -1,\n        n = coordinates.length;\n\n    while (++i < n) {\n      streamPolygon(coordinates[i], stream);\n    }\n  },\n  GeometryCollection: function GeometryCollection(object, stream) {\n    var geometries = object.geometries,\n        i = -1,\n        n = geometries.length;\n\n    while (++i < n) {\n      streamGeometry(geometries[i], stream);\n    }\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1,\n      n = coordinates.length - closed,\n      coordinate;\n  stream.lineStart();\n\n  while (++i < n) {\n    coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  }\n\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1,\n      n = coordinates.length;\n  stream.polygonStart();\n\n  while (++i < n) {\n    streamLine(coordinates[i], stream, 1);\n  }\n\n  stream.polygonEnd();\n}\n\nexport default function (object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}","import noop from \"../noop.js\";\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function result() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;","import { default as geoStream } from \"../stream.js\";\nimport boundsStream from \"../path/bounds.js\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function (b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function (b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function (b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}","import { cartesian } from \"../cartesian.js\";\nimport { abs, asin, atan2, cos, epsilon, radians, sqrt } from \"../math.js\";\nimport { transformer } from \"../transform.js\";\nvar maxDepth = 16,\n    // maximum depth of subdivision\ncosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function (project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function point(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n      || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n      || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {\n        // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n\n  return function (stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n    lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function polygonStart() {\n        stream.polygonStart();\n        resampleStream.lineStart = ringStart;\n      },\n      polygonEnd: function polygonEnd() {\n        stream.polygonEnd();\n        resampleStream.lineStart = lineStart;\n      }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]),\n          p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}","import clipAntimeridian from \"../clip/antimeridian.js\";\nimport clipCircle from \"../clip/circle.js\";\nimport clipRectangle from \"../clip/rectangle.js\";\nimport compose from \"../compose.js\";\nimport identity from \"../identity.js\";\nimport { cos, degrees, radians, sin, sqrt } from \"../math.js\";\nimport { rotateRadians } from \"../rotation.js\";\nimport { transformer } from \"../transform.js\";\nimport { fitExtent, fitSize, fitWidth, fitHeight } from \"./fit.js\";\nimport resample from \"./resample.js\";\nvar transformRadians = transformer({\n  point: function point(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function point(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy, sx, sy) {\n  function transform(x, y) {\n    x *= sx;\n    y *= sy;\n    return [dx + k * x, dy - k * y];\n  }\n\n  transform.invert = function (x, y) {\n    return [(x - dx) / k * sx, (dy - y) / k * sy];\n  };\n\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n\n  function transform(x, y) {\n    x *= sx;\n    y *= sy;\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n\n  transform.invert = function (x, y) {\n    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];\n  };\n\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function () {\n    return project;\n  })();\n}\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150,\n      // scale\n  x = 480,\n      y = 250,\n      // translate\n  lambda = 0,\n      phi = 0,\n      // center\n  deltaLambda = 0,\n      deltaPhi = 0,\n      deltaGamma = 0,\n      rotate,\n      // pre-rotate\n  alpha = 0,\n      // post-rotate angle\n  sx = 1,\n      // reflectX\n  sy = 1,\n      // reflectX\n  theta = null,\n      preclip = clipAntimeridian,\n      // pre-clip angle\n  x0 = null,\n      y0,\n      x1,\n      y1,\n      postclip = identity,\n      // post-clip extent\n  delta2 = 0.5,\n      // precision\n  projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function (stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function (_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function (_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function (_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function (_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function (_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function (_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function (_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function (_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function (_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.reflectX = function (_) {\n    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;\n  };\n\n  projection.reflectY = function (_) {\n    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;\n  };\n\n  projection.precision = function (_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function (extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function (size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function (width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function (height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),\n        transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], sx, sy, alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function () {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}","export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function (x) {\n  return x > 0 ? 1 : x < 0 ? -1 : 0;\n};\nexport var sin = Math.sin;\nexport var tan = Math.tan;\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan } from \"./math.js\";\nexport function airyRaw(beta) {\n  var tanBeta_2 = tan(beta / 2),\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\n\n  function forward(x, y) {\n    var cosx = cos(x),\n        cosy = cos(y),\n        siny = sin(y),\n        cosz = cosy * cosx,\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\n    return [k * cosy * sin(x), k * siny];\n  }\n\n  forward.invert = function (x, y) {\n    var r = sqrt(x * x + y * y),\n        z = -beta / 2,\n        i = 50,\n        delta;\n    if (!r) return [0, 0];\n\n    do {\n      var z_2 = z / 2,\n          cosz_2 = cos(z_2),\n          sinz_2 = sin(z_2),\n          tanz_2 = sinz_2 / cosz_2,\n          lnsecz_2 = -log(abs(cosz_2));\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2)) * (cosz_2 < 0 ? 0.7 : 1);\n    } while (abs(delta) > epsilon && --i > 0);\n\n    var sinz = sin(z);\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\n  };\n\n  return forward;\n}\nexport default function () {\n  var beta = halfPi,\n      m = projectionMutator(airyRaw),\n      p = m(beta);\n\n  p.radius = function (_) {\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\n  };\n\n  return p.scale(179.976).clipAngle(147);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, cos, epsilon, pi, sin, sinci, sqrt } from \"./math.js\";\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y),\n      sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n} // Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\n\naitoffRaw.invert = function (x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x,\n      y1 = y,\n      i = 25;\n\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n\n  return [x1, y1];\n};\n\nexport default function () {\n  return projection(aitoffRaw).scale(152.63);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, atan2, cos, degrees, epsilon, radians, sin, tan } from \"./math.js\";\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [(1 + cosPhi) * sin(lambda), (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function (x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      if (abs(dPhi) > 2) dPhi /= 2;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\nexport default function () {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function (_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream)),\n        precision = p.precision();\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) {\n        sphereStream.point(lambda, sPhi0 * 90);\n      }\n\n      if (phi0) while (sPhi0 * (lambda -= 3 * sPhi0 * precision) >= -180) {\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n\n    return rotateStream;\n  };\n\n  return p.scale(218.695).center([0, 28.0974]);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan } from \"./math.js\";\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [4 / 3 * x * (3 + x2 - 3 * y2), 4 / 3 * y * (3 + 3 * x2 - y2)];\n}\n\naugustRaw.invert = function (x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d), sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)];\n};\n\nexport default function () {\n  return projection(augustRaw).scale(66.1603);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan } from \"./math.js\";\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi ? [lambda, log(tan(quarterPi + phi / 2))] : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function (x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi,\n      i = 25,\n      delta,\n      y0;\n\n  do {\n    var cosPhi_2 = cos(phi / 2),\n        tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function () {\n  return projection(bakerRaw).scale(112.314);\n}","import { asin, atan2, cos, sin, sqrt } from \"../math.js\";\nexport function azimuthalRaw(scale) {\n  return function (x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [k * cy * sin(x), k * sin(y)];\n  };\n}\nexport function azimuthalInvert(angle) {\n  return function (x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [atan2(x * sc, z * cc), asin(z && y * sc / z)];\n  };\n}","import { acos, sin } from \"../math.js\";\nimport { azimuthalRaw, azimuthalInvert } from \"./azimuthal.js\";\nimport projection from \"./index.js\";\nexport var azimuthalEquidistantRaw = azimuthalRaw(function (c) {\n  return (c = acos(c)) && c / sin(c);\n});\nazimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {\n  return z;\n});\nexport default function () {\n  return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);\n}","import { geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw } from \"d3-geo\";\nimport { abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan } from \"./math.js\";\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n\n    if (abs(lambda) > halfPi) {\n      // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          alpha = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n\n      theta = theta0 + asin(pi / r * sin(alpha)) - alpha;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n\n    return p;\n  }\n\n  forward.invert = function (x, y) {\n    var r = sqrt(x * x + y * y);\n\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotAlpha = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotAlpha + s * sqrt(cotAlpha * cotAlpha - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\nexport default function () {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function (_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n\n    return rotateStream;\n  };\n\n  return p.scale(87.8076).center([0, 17.1875]).clipAngle(180 - 1e-3);\n}","import { asin, sqrt } from \"../math.js\";\nimport { azimuthalRaw, azimuthalInvert } from \"./azimuthal.js\";\nimport projection from \"./index.js\";\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function (cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function (z) {\n  return 2 * asin(z / 2);\n});\nexport default function () {\n  return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);\n}","import { geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, sin } from \"./math.js\";\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function (x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [lambda * cos(phi) / cos(phi /= 2), 2 * sin(phi)];\n}\n\nhammerQuarticAuthalicRaw.invert = function (x, y) {\n  var phi = 2 * asin(y / 2);\n  return [x * cos(phi / 2) / cos(phi), phi];\n};\n\nexport default function () {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function (_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p.scale(169.529);\n}","import { abs, epsilon, epsilon2 } from \"./math.js\"; // Approximate Newton-Raphson\n// Solve f(x) = y, start from x\n\nexport function solve(f, y, x) {\n  var steps = 100,\n      delta,\n      f0,\n      f1;\n  x = x === undefined ? 0 : +x;\n  y = +y;\n\n  do {\n    f0 = f(x);\n    f1 = f(x + epsilon);\n    if (f0 === f1) f1 = f0 + epsilon;\n    x -= delta = -1 * epsilon * (f0 - y) / (f0 - f1);\n  } while (steps-- > 0 && abs(delta) > epsilon);\n\n  return steps < 0 ? NaN : x;\n} // Approximate Newton-Raphson in 2D\n// Solve f(a,b) = [x,y]\n\nexport function solve2d(f, MAX_ITERATIONS, eps) {\n  if (MAX_ITERATIONS === undefined) MAX_ITERATIONS = 40;\n  if (eps === undefined) eps = epsilon2;\n  return function (x, y, a, b) {\n    var err2, da, db;\n    a = a === undefined ? 0 : +a;\n    b = b === undefined ? 0 : +b;\n\n    for (var i = 0; i < MAX_ITERATIONS; i++) {\n      var p = f(a, b),\n          // diffs\n      tx = p[0] - x,\n          ty = p[1] - y;\n      if (abs(tx) < eps && abs(ty) < eps) break; // we're there!\n      // backtrack if we overshot\n\n      var h = tx * tx + ty * ty;\n\n      if (h > err2) {\n        a -= da /= 2;\n        b -= db /= 2;\n        continue;\n      }\n\n      err2 = h; // partial derivatives\n\n      var ea = (a > 0 ? -1 : 1) * eps,\n          eb = (b > 0 ? -1 : 1) * eps,\n          pa = f(a + ea, b),\n          pb = f(a, b + eb),\n          dxa = (pa[0] - p[0]) / ea,\n          dya = (pa[1] - p[1]) / ea,\n          dxb = (pb[0] - p[0]) / eb,\n          dyb = (pb[1] - p[1]) / eb,\n          // determinant\n      D = dyb * dxa - dya * dxb,\n          // newton step — or half-step for small D\n      l = (abs(D) < 0.5 ? 0.5 : 1) / D;\n      da = (ty * dxb - tx * dyb) * l;\n      db = (tx * dya - ty * dxa) * l;\n      a += da;\n      b += db;\n      if (abs(da) < eps && abs(db) < eps) break; // we're crawling\n    }\n\n    return [a, b];\n  };\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { hammerRaw } from \"./hammer.js\";\nimport { cos, pi, sin } from \"./math.js\";\nimport { solve2d } from \"./newton.js\"; // Bertin 1953 as a modified Briesemeister\n// https://bl.ocks.org/Fil/5b9ee9636dfb6ffa53443c9006beb642\n\nexport function bertin1953Raw() {\n  var hammer = hammerRaw(1.68, 2),\n      fu = 1.4,\n      k = 12;\n\n  function forward(lambda, phi) {\n    if (lambda + phi < -fu) {\n      var u = (lambda - phi + 1.6) * (lambda + phi + fu) / 8;\n      lambda += u;\n      phi -= 0.8 * u * sin(phi + pi / 2);\n    }\n\n    var r = hammer(lambda, phi);\n    var d = (1 - cos(lambda * phi)) / k;\n\n    if (r[1] < 0) {\n      r[0] *= 1 + d;\n    }\n\n    if (r[1] > 0) {\n      r[1] *= 1 + d / 1.5 * r[0] * r[0];\n    }\n\n    return r;\n  }\n\n  forward.invert = solve2d(forward);\n  return forward;\n}\nexport default function () {\n  // this projection should not be rotated\n  return projection(bertin1953Raw()).rotate([-16.5, -42]).scale(176.57).center([7.93, 0.09]);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2 } from \"./math.js\";\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi),\n      i = 30,\n      delta;\n\n  do {\n    phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  } while (abs(delta) > epsilon && --i > 0);\n\n  return phi / 2;\n}\nexport function mollweideBromleyRaw(cx, cy, cp) {\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function (x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\nexport default function () {\n  return projection(mollweideRaw).scale(169.529);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { mollweideBromleyTheta } from \"./mollweide.js\";\nimport { abs, cos, epsilon, pi, quarterPi, sin, sqrt2 } from \"./math.js\";\nvar k = 2.00276,\n    w = 1.11072;\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function (x, y) {\n  var ky = k * y,\n      theta = y < 0 ? -quarterPi : quarterPi,\n      i = 25,\n      delta,\n      phi;\n\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function () {\n  return projection(boggsRaw).scale(160.857);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { degrees, radians } from \"./math.js\";\nexport default function (projectAt) {\n  var phi0 = 0,\n      m = projectionMutator(projectAt),\n      p = m(phi0);\n\n  p.parallel = function (_) {\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\n  };\n\n  return p;\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { cos } from \"./math.js\";\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function (x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function () {\n  return projection(sinusoidalRaw).scale(152.63);\n}","import parallel1 from \"./parallel1.js\";\nimport { atan2, cos, sin, sqrt, tan } from \"./math.js\";\nimport { sinusoidalRaw } from \"./sinusoidal.js\";\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function (x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(bonneRaw).scale(123.082).center([0, 26.1441]).parallel(45);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { atan2, cos, halfPi, sin, sqrt } from \"./math.js\";\nexport function bottomleyRaw(sinPsi) {\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function (x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\nexport default function () {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function (_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p.scale(158.837);\n}","import { asin, atan2, cos, degrees, epsilon, epsilon2, radians, sin, sqrt } from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\nvar W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, // first point\nx0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function polygonStart() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function polygonEnd() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n}; // Arithmetic mean of Cartesian vectors.\n\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n} // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\n\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = sqrt(cx * cx + cy * cy + cz * cz),\n      w = asin(m),\n      // line weight = angle\n  v = m && -w / m; // area weight multiplier\n\n  X2 += v * cx;\n  Y2 += v * cy;\n  Z2 += v * cz;\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function (object) {\n  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;\n  stream(object, centroidStream);\n  var x = X2,\n      y = Y2,\n      z = Z2,\n      m = x * x + y * y + z * z; // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1; // If the feature has zero length, fall back to arithmetic mean of point vectors.\n\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = x * x + y * y + z * z; // If the feature still has an undefined ccentroid, then return.\n\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { pi } from \"./math.js\";\nimport { mollweideBromleyRaw } from \"./mollweide.js\";\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\nexport default function () {\n  return projection(bromleyRaw).scale(152.63);\n}","import { geoCentroid as centroid, geoProjection as projection, geoRotation as rotation } from \"d3-geo\";\nimport { abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt } from \"./math.js\";\nimport { solve2d } from \"./newton.js\"; // Azimuthal distance.\n\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda),\n      r;\n\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2),\n        sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n} // Angle opposite a, and contained between sides of lengths b and c.\n\n\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n} // Normalize longitude.\n\n\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [[p0[0], p0[1], sin(p0[1]), cos(p0[1])], [p1[0], p1[1], sin(p1[1]), cos(p1[1])], [p2[0], p2[1], sin(p2[1]), cos(p2[1])]];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n  var mean = [points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0), 2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3),\n        i; // Compute distance and azimuth from control points.\n\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    } // Arithmetic mean of interception points.\n\n\n    var point = mean.slice();\n\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22]).scale(380).center([22.5, 2]);\n}\nexport default function chamberlin(p0, p1, p2) {\n  // TODO order matters!\n  var c = centroid({\n    type: \"MultiPoint\",\n    coordinates: [p0, p1, p2]\n  }),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      f = chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)));\n  f.invert = solve2d(f);\n  var p = projection(f).rotate(R),\n      center = p.center;\n  delete p.rotate;\n\n  p.center = function (_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p.clipAngle(90);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, pi, sin, sqrt, sqrtPi } from \"./math.js\";\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [2 / sqrtPi * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function (x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function () {\n  return projection(collignonRaw).scale(95.6464).center([0, 30]);\n}","import { asin, atan2, cos, sin, sqrt, tan } from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function (x, y) {\n    if (x) y *= sin(x) / x;\n    var cosLambda = cos(x);\n    return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];\n  } : function (x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n  return forward;\n}\nexport default function () {\n  return parallel1(craigRaw).scale(249.828).clipAngle(90);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, cos, sin, sqrt, sqrtPi } from \"./math.js\";\nvar sqrt3 = sqrt(3);\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function (x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function () {\n  return projection(crasterRaw).scale(156.19);\n}","import { asin, cos, sin } from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function (x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(cylindricalEqualAreaRaw).parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n  .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}","import { atan, cos, tan } from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function (x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(cylindricalStereographicRaw).scale(124.75);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, pi, sqrt } from \"./math.js\";\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [alpha * lambda * (1 - abs(phi) / pi), alpha * phi];\n}\n\neckert1Raw.invert = function (x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [x / (alpha * (1 - abs(phi) / pi)), phi];\n};\n\nexport default function () {\n  return projection(eckert1Raw).scale(165.664);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, pi, sign, sin, sqrt } from \"./math.js\";\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [2 / sqrt(6 * pi) * lambda * alpha, sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)];\n}\n\neckert2Raw.invert = function (x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [x * sqrt(6 * pi) / (2 * alpha), sign(y) * asin((4 - alpha * alpha) / 3)];\n};\n\nexport default function () {\n  return projection(eckert2Raw).scale(165.664);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { pi, sqrt } from \"./math.js\";\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))), 4 / k * phi];\n}\n\neckert3Raw.invert = function (x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))), y * k / 2];\n};\n\nexport default function () {\n  return projection(eckert3Raw).scale(180.739);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math.js\";\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n\n  return [2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)), 2 * sqrt(pi / (4 + pi)) * sin(phi)];\n}\n\neckert4Raw.invert = function (x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [x / (2 / sqrt(pi * (4 + pi)) * (1 + c)), asin((k + A * (c + 2)) / (2 + halfPi))];\n};\n\nexport default function () {\n  return projection(eckert4Raw).scale(180.739);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { cos, pi, sqrt } from \"./math.js\";\nexport function eckert5Raw(lambda, phi) {\n  return [lambda * (1 + cos(phi)) / sqrt(2 + pi), 2 * phi / sqrt(2 + pi)];\n}\n\neckert5Raw.invert = function (x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [k * x / (1 + cos(phi)), phi];\n};\n\nexport default function () {\n  return projection(eckert5Raw).scale(173.044);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math.js\";\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n\n  k = sqrt(2 + pi);\n  return [lambda * (1 + cos(phi)) / k, 2 * phi / k];\n}\n\neckert6Raw.invert = function (x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [x * 2 * k / (1 + cos(y *= k)), asin((y + sin(y)) / j)];\n};\n\nexport default function () {\n  return projection(eckert6Raw).scale(173.044);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { augustRaw } from \"./august.js\";\nimport { abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2 } from \"./math.js\";\nvar eisenlohrK = 3 + 2 * sqrt2;\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [eisenlohrK * (c * (v - 1 / v) - 2 * log(v)), eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))];\n}\n\neisenlohrRaw.invert = function (x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0],\n      phi = p[1],\n      i = 20,\n      p;\n  x /= eisenlohrK, y /= eisenlohrK;\n\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = sqrt2 * c1 + (c0 + s0) * k,\n        v1 = sqrt2 * c1 + (c0 - s0) * k,\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function () {\n  return projection(eisenlohrRaw).scale(62.5271);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { atan, cos, radians, sqrt, tan } from \"./math.js\";\nvar faheyK = cos(35 * radians);\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function (x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function () {\n  return projection(faheyRaw).scale(137.152);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { atan, cos, sqrtPi, tan } from \"./math.js\";\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2,\n      cosk = cos(k);\n  return [2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function (x, y) {\n  var k = atan(y / sqrtPi),\n      cosk = cos(k),\n      phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function () {\n  return projection(foucautRaw).scale(135.264);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { cos, halfPi, pi, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\nexport function foucautSinusoidalRaw(alpha) {\n  var beta = 1 - alpha,\n      equatorial = raw(pi, 0)[0] - raw(-pi, 0)[0],\n      polar = raw(0, halfPi)[1] - raw(0, -halfPi)[1],\n      ratio = sqrt(2 * polar / equatorial);\n\n  function raw(lambda, phi) {\n    var cosphi = cos(phi),\n        sinphi = sin(phi);\n    return [cosphi / (beta + alpha * cosphi) * lambda, beta * phi + alpha * sinphi];\n  }\n\n  function forward(lambda, phi) {\n    var p = raw(lambda, phi);\n    return [p[0] * ratio, p[1] / ratio];\n  }\n\n  function forwardMeridian(phi) {\n    return forward(0, phi)[1];\n  }\n\n  forward.invert = function (x, y) {\n    var phi = solve(forwardMeridian, y),\n        lambda = x / ratio * (alpha + beta / cos(phi));\n    return [lambda, phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  var alpha = 0.5,\n      m = projectionMutator(foucautSinusoidalRaw),\n      p = m(alpha);\n\n  p.alpha = function (_) {\n    return arguments.length ? m(alpha = +_) : alpha;\n  };\n\n  return p.scale(168.725);\n}","import { asin, cos, epsilon, sin } from \"../math.js\";\nimport { azimuthalInvert } from \"./azimuthal.js\";\nimport projection from \"./index.js\";\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\northographicRaw.invert = azimuthalInvert(asin);\nexport default function () {\n  return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon);\n}","import projection from \"./index.js\";\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\nequirectangularRaw.invert = equirectangularRaw;\nexport default function () {\n  return projection(equirectangularRaw).scale(152.63);\n}","import { geoEquirectangular, geoOrthographic } from \"d3-geo\";\nimport { asin, atan, degrees, radians, sin, tan } from \"./math.js\";\n\nfunction gilbertForward(point) {\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\n}\n\nfunction gilbertInvert(point) {\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\n}\n\nexport default function (projectionType) {\n  if (projectionType == null) projectionType = geoOrthographic;\n  var projection = projectionType(),\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\n\n  function gilbert(point) {\n    return projection(gilbertForward(point));\n  }\n\n  if (projection.invert) gilbert.invert = function (point) {\n    return gilbertInvert(projection.invert(point));\n  };\n\n  gilbert.stream = function (stream) {\n    var s1 = projection.stream(stream),\n        s0 = equirectangular.stream({\n      point: function point(lambda, phi) {\n        s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees);\n      },\n      lineStart: function lineStart() {\n        s1.lineStart();\n      },\n      lineEnd: function lineEnd() {\n        s1.lineEnd();\n      },\n      polygonStart: function polygonStart() {\n        s1.polygonStart();\n      },\n      polygonEnd: function polygonEnd() {\n        s1.polygonEnd();\n      }\n    });\n    s0.sphere = s1.sphere;\n    return s0;\n  };\n\n  function property(name) {\n    gilbert[name] = function () {\n      return arguments.length ? (projection[name].apply(projection, arguments), gilbert) : projection[name]();\n    };\n  }\n\n  gilbert.rotate = function (_) {\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\n  };\n\n  gilbert.center = function (_) {\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\n  };\n\n  property(\"angle\");\n  property(\"clipAngle\");\n  property(\"clipExtent\");\n  property(\"fitExtent\");\n  property(\"fitHeight\");\n  property(\"fitSize\");\n  property(\"fitWidth\");\n  property(\"scale\");\n  property(\"translate\");\n  property(\"precision\");\n  return gilbert.scale(249.5);\n}","import { geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt } from \"./math.js\";\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      x = r;\n      var i = 50,\n          delta;\n\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n\n    return p;\n  }\n\n  forward.invert = function (x, y) {\n    var r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n        if (abs(delta) < epsilon2 || ! --i) break;\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (sinx - x_halfPi * 2 * (halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) - rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function (x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n} // Numerical integration: trapezoidal rule.\n\n\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n\n  for (var i = 1, x = a; i < n; ++i) {\n    s += 2 * f(x += h);\n  }\n\n  return s * 0.5 * h;\n}\n\nexport default function () {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function (_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function (_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n\n    return rotateStream;\n  };\n\n  return p.rotate([90, -40]).scale(91.7095).clipAngle(180 - 1e-3);\n}","import { abs, asin, cos, epsilon, pi, sin, sqrt } from \"./math.js\";\nexport default function (a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function (x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda,\n        deltaPhi,\n        i = 50;\n\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = lambda / pi * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n\n    return [lambda, phi];\n  };\n\n  return forward;\n}","import { geoProjection as projection } from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\nexport default function () {\n  return projection(ginzburg4Raw).scale(149.995);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435, 0.082742);\nexport default function () {\n  return projection(ginzburg5Raw).scale(153.93);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\nimport { pi } from \"./math.js\";\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\nexport default function () {\n  return projection(ginzburg6Raw).scale(130.945);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon } from \"./math.js\";\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2), phi * (1 + phi2 / 12)];\n}\n\nginzburg8Raw.invert = function (x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50,\n      delta;\n\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n\n  i = 50;\n  x /= 1 - 0.162388 * phi2;\n\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n\n  return [lambda, phi];\n};\n\nexport default function () {\n  return projection(ginzburg8Raw).scale(131.747);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965, 0.031762);\nexport default function () {\n  return projection(ginzburg9Raw).scale(131.087);\n}","import { halfPi, pi } from \"./math.js\";\nexport default function (project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function (x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n  return projectSquare;\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt } from \"./math.js\";\nimport squareRaw from \"./square.js\";\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return point[0] *= sLambda, point[1] *= -sPhi, point;\n}\n\ngringortenRaw.invert = function (x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n  if (lambda === 0) return [0, -(h + r * a)];\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta; // Slower but accurate bisection method.\n\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x,\n        x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n\n    do {\n      var g = sqrt(a2 - x * x),\n          f = x * (zeta + mu * g) + nu * asin(x / a) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  } // Newton-Raphson.\n  else {\n      x = epsilon, i = 25;\n\n      do {\n        var x2 = x * x,\n            g2 = sqrt(a2 - x2),\n            zetaMug = zeta + mu * g2,\n            f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n            df = zetaMug + (nu - mu * x2) / g2;\n        x -= delta = g2 ? f2 / df : 0;\n      } while (abs(delta) > epsilon && --i > 0);\n    }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = 1 - r2 + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function () {\n  return projection(squareRaw(gringortenRaw)).scale(239.75);\n}","import { abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh } from \"./math.js\"; // Returns [sn, cn, dn](u + iv|m).\n\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [[0, b[0] / b[1]], [1 / b[1], 0], [b[2] / b[1], 0]];\n  }\n\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [[a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c], [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c], [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]];\n} // Returns [sn, cn, dn, ph](u|m).\n\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [t - ai * b, b + ai * t, 1 - m * t * t / 2, u - ai];\n  }\n\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [t + ai * (twon - u) / (b * b), phi - ai * t * phi * (twon - u), phi + ai * t * phi * (twon + u), 2 * atan(exp(u)) - halfPi + ai * (twon - u) / b];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n} // Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\n\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi), ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)];\n  }\n\n  return [0, ellipticF(atan(sinhPsi), 1 - m) * sign(psi)];\n} // Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\n\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n\n  return phi / (pow(2, i) * a);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { ellipticF, ellipticFi, ellipticJi } from \"./elliptic.js\";\nimport { abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan } from \"./math.js\";\nimport squareRaw from \"./square.js\";\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)), -0.25 * log(t * t + 4 * x2) + 0.5 * log(y_1 * y_1 + x2)];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nguyouRaw.invert = function (x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [lambda, 2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi];\n};\n\nexport default function () {\n  return projection(squareRaw(guyouRaw)).scale(151.496);\n}","import { geoProjectionMutator as projectionMutator, geoCircle } from \"d3-geo\";\nimport { abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin } from \"./math.js\";\nexport function hammerRetroazimuthalRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      rotate = hammerRetroazimuthalRotation(phi0);\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\n\n  function forward(lambda, phi) {\n    var p = rotate(lambda, phi);\n    lambda = p[0], phi = p[1];\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        cosLambda = cos(lambda),\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\n        sinz = sin(z),\n        K = abs(sinz) > epsilon ? z / sinz : 1;\n    return [K * cosPhi0 * sin(lambda), (abs(lambda) > halfPi ? K : -K) * ( // rotate for back hemisphere\n    sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)];\n  }\n\n  forward.invert = function (x, y) {\n    var rho = sqrt(x * x + y * y),\n        sinz = -sin(rho),\n        cosz = cos(rho),\n        a = rho * cosz,\n        b = -y * sinz,\n        c = rho * sinPhi0,\n        d = sqrt(a * a + b * b - c * c),\n        phi = atan2(a * c + b * d, b * c - a * d),\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\n    return rotate.invert(lambda, phi);\n  };\n\n  return forward;\n} // Latitudinal rotation by phi0.\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\n\nfunction hammerRetroazimuthalRotation(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n  return function (lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi);\n    return [atan2(y, x * cosPhi0 - z * sinPhi0), asin(z * cosPhi0 + x * sinPhi0)];\n  };\n}\n\nexport default function () {\n  var phi0 = 0,\n      m = projectionMutator(hammerRetroazimuthalRaw),\n      p = m(phi0),\n      rotate_ = p.rotate,\n      stream_ = p.stream,\n      circle = geoCircle();\n\n  p.parallel = function (_) {\n    if (!arguments.length) return phi0 * degrees;\n    var r = p.rotate();\n    return m(phi0 = _ * radians).rotate(r);\n  }; // Temporary hack; see hammerRetroazimuthalRotation.\n\n\n  p.rotate = function (_) {\n    if (!arguments.length) return _ = rotate_.call(p), _[1] += phi0 * degrees, _;\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\n    circle.center([-_[0], -_[1]]);\n    return p;\n  };\n\n  p.stream = function (stream) {\n    stream = stream_(stream);\n\n    stream.sphere = function () {\n      stream.polygonStart();\n      var epsilon = 1e-2,\n          ring = circle.radius(90 - epsilon)().coordinates[0],\n          n = ring.length - 1,\n          i = -1,\n          p;\n      stream.lineStart();\n\n      while (++i < n) {\n        stream.point((p = ring[i])[0], p[1]);\n      }\n\n      stream.lineEnd();\n      ring = circle.radius(90 + epsilon)().coordinates[0];\n      n = ring.length - 1;\n      stream.lineStart();\n\n      while (--i >= 0) {\n        stream.point((p = ring[i])[0], p[1]);\n      }\n\n      stream.lineEnd();\n      stream.polygonEnd();\n    };\n\n    return stream;\n  };\n\n  return p.scale(79.4187).parallel(45).clipAngle(180 - 1e-3);\n}","import { range } from \"d3-array\";\nimport { geoStream, geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { collignonRaw } from \"./collignon.js\";\nimport { cylindricalEqualAreaRaw } from \"./cylindricalEqualArea.js\";\nimport { abs, asin, degrees, epsilon, floor, max, min, pi, radians, sqrtPi, tau } from \"./math.js\";\nvar K = 3,\n    healpixParallel = asin(1 - 1 / K) * degrees,\n    healpixLambert = cylindricalEqualAreaRaw(0);\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + dy1 * dy1 * 4 / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function (x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphereTop(x, i) {\n  return [x, i & 1 ? 90 - epsilon : healpixParallel];\n}\n\nfunction sphereBottom(x, i) {\n  return [x, i & 1 ? -90 + epsilon : -healpixParallel];\n}\n\nfunction sphereNudge(d) {\n  return [d[0] * (1 - epsilon), d[1]];\n}\n\nfunction sphere(step) {\n  var c = [].concat(range(-180, 180 + step / 2, step).map(sphereTop), range(180, -180 - step / 2, -step).map(sphereBottom));\n  return {\n    type: \"Polygon\",\n    coordinates: [step === 180 ? c.map(sphereNudge) : c]\n  };\n}\n\nexport default function () {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function (_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      geoStream(sphere(180 / H), sphereStream);\n    };\n\n    return rotateStream;\n  };\n\n  return p.scale(239.75);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt } from \"./math.js\";\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n\n    if (t && t < 2) {\n      var theta = halfPi - phi,\n          i = 25,\n          delta;\n\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 - 0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n\n    return [rho * sin(omega), rho0 - rho * cos(omega)];\n  }\n\n  forward.invert = function (x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [asin(x / sqrt(rho2)) * pi / Bt_Bt1, asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)];\n  };\n\n  return forward;\n}\nexport default function () {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function (_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p.scale(167.774).center([0, 18.67]);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { mollweideRaw } from \"./mollweide.js\";\nimport { sinusoidalRaw } from \"./sinusoidal.js\";\nexport var sinuMollweidePhi = 0.7109889596207567;\nexport var sinuMollweideY = 0.0528035274542;\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda) : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function (x, y) {\n  return y > -sinuMollweidePhi ? mollweideRaw.invert(x, y - sinuMollweideY) : sinusoidalRaw.invert(x, y);\n};\n\nexport default function () {\n  return projection(sinuMollweideRaw).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs } from \"./math.js\";\nimport { mollweideRaw } from \"./mollweide.js\";\nimport { sinusoidalRaw } from \"./sinusoidal.js\";\nimport { sinuMollweidePhi, sinuMollweideY } from \"./sinuMollweide.js\";\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda) : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function (x, y) {\n  return abs(y) > sinuMollweidePhi ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY)) : sinusoidalRaw.invert(x, y);\n};\n\nexport default function () {\n  return projection(homolosineRaw).scale(152.63);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, degrees, pi, radians, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\nexport function hufnagelRaw(a, b, psiMax, ratio) {\n  var k = sqrt(4 * pi / (2 * psiMax + (1 + a - b / 2) * sin(2 * psiMax) + (a + b) / 2 * sin(4 * psiMax) + b / 2 * sin(6 * psiMax))),\n      c = sqrt(ratio * sin(psiMax) * sqrt((1 + a * cos(2 * psiMax) + b * cos(4 * psiMax)) / (1 + a + b))),\n      M = psiMax * mapping(1);\n\n  function radius(psi) {\n    return sqrt(1 + a * cos(2 * psi) + b * cos(4 * psi));\n  }\n\n  function mapping(t) {\n    var psi = t * psiMax;\n    return (2 * psi + (1 + a - b / 2) * sin(2 * psi) + (a + b) / 2 * sin(4 * psi) + b / 2 * sin(6 * psi)) / psiMax;\n  }\n\n  function inversemapping(psi) {\n    return radius(psi) * sin(psi);\n  }\n\n  var forward = function forward(lambda, phi) {\n    var psi = psiMax * solve(mapping, M * sin(phi) / psiMax, phi / pi);\n    if (isNaN(psi)) psi = psiMax * sign(phi);\n    var kr = k * radius(psi);\n    return [kr * c * lambda / pi * cos(psi), kr / c * sin(psi)];\n  };\n\n  forward.invert = function (x, y) {\n    var psi = solve(inversemapping, y * c / k);\n    return [x * pi / (cos(psi) * k * c * radius(psi)), asin(psiMax * mapping(psi / psiMax) / M)];\n  };\n\n  if (psiMax === 0) {\n    k = sqrt(ratio / pi);\n\n    forward = function forward(lambda, phi) {\n      return [lambda * k, sin(phi) / k];\n    };\n\n    forward.invert = function (x, y) {\n      return [x / k, asin(y * k)];\n    };\n  }\n\n  return forward;\n}\nexport default function () {\n  var a = 1,\n      b = 0,\n      psiMax = 45 * radians,\n      ratio = 2,\n      mutate = projectionMutator(hufnagelRaw),\n      projection = mutate(a, b, psiMax, ratio);\n\n  projection.a = function (_) {\n    return arguments.length ? mutate(a = +_, b, psiMax, ratio) : a;\n  };\n\n  projection.b = function (_) {\n    return arguments.length ? mutate(a, b = +_, psiMax, ratio) : b;\n  };\n\n  projection.psiMax = function (_) {\n    return arguments.length ? mutate(a, b, psiMax = +_ * radians, ratio) : psiMax * degrees;\n  };\n\n  projection.ratio = function (_) {\n    return arguments.length ? mutate(a, b, psiMax, ratio = +_) : ratio;\n  };\n\n  return projection.scale(180.739);\n}","// https://github.com/scijs/integrate-adaptive-simpson\n// This algorithm adapted from pseudocode in:\n// http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf\nfunction adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n  if (state.nanEncountered) {\n    return NaN;\n  }\n\n  var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n  h = b - a;\n  f1 = f(a + h * 0.25);\n  f2 = f(b - h * 0.25); // Simple check for NaN:\n\n  if (isNaN(f1)) {\n    state.nanEncountered = true;\n    return;\n  } // Simple check for NaN:\n\n\n  if (isNaN(f2)) {\n    state.nanEncountered = true;\n    return;\n  }\n\n  sl = h * (fa + 4 * f1 + fm) / 12;\n  sr = h * (fm + 4 * f2 + fb) / 12;\n  s2 = sl + sr;\n  err = (s2 - V0) / 15;\n\n  if (depth > maxdepth) {\n    state.maxDepthCount++;\n    return s2 + err;\n  } else if (Math.abs(err) < tol) {\n    return s2 + err;\n  } else {\n    m = a + h * 0.5;\n    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V1)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V2)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    return V1 + V2;\n  }\n}\n\nexport function integrate(f, a, b, tol, maxdepth) {\n  var state = {\n    maxDepthCount: 0,\n    nanEncountered: false\n  };\n\n  if (tol === undefined) {\n    tol = 1e-8;\n  }\n\n  if (maxdepth === undefined) {\n    maxdepth = 20;\n  }\n\n  var fa = f(a);\n  var fm = f(0.5 * (a + b));\n  var fb = f(b);\n  var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n  var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n  /*\n    if (state.maxDepthCount > 0 && console && console.warn) {\n      console.warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n    }\n  \n    if (state.nanEncountered && console && console.warn) {\n      console.warn('integrate-adaptive-simpson: Warning: NaN encountered. Halting early.');\n    }\n  */\n\n  return result;\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, asin, pi, pow, sign, sin } from \"./math.js\";\nimport { integrate } from \"./integrate.js\";\nexport function hyperellipticalRaw(alpha, k, gamma) {\n  function elliptic(f) {\n    return alpha + (1 - alpha) * pow(1 - pow(f, k), 1 / k);\n  }\n\n  function z(f) {\n    return integrate(elliptic, 0, f, 1e-4);\n  }\n\n  var G = 1 / z(1),\n      n = 1000,\n      m = (1 + 1e-8) * G,\n      approx = [];\n\n  for (var i = 0; i <= n; i++) {\n    approx.push(z(i / n) * m);\n  }\n\n  function Y(sinphi) {\n    var rmin = 0,\n        rmax = n,\n        r = n >> 1;\n\n    do {\n      if (approx[r] > sinphi) rmax = r;else rmin = r;\n      r = rmin + rmax >> 1;\n    } while (r > rmin);\n\n    var u = approx[r + 1] - approx[r];\n    if (u) u = (sinphi - approx[r + 1]) / u;\n    return (r + 1 + u) / n;\n  }\n\n  var ratio = 2 * Y(1) / pi * G / gamma;\n\n  var forward = function forward(lambda, phi) {\n    var y = Y(abs(sin(phi))),\n        x = elliptic(y) * lambda;\n    y /= ratio;\n    return [x, phi >= 0 ? y : -y];\n  };\n\n  forward.invert = function (x, y) {\n    var phi;\n    y *= ratio;\n    if (abs(y) < 1) phi = sign(y) * asin(z(abs(y)) * G);\n    return [x / elliptic(abs(y)), phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  var alpha = 0,\n      k = 2.5,\n      gamma = 1.183136,\n      // affine = sqrt(2 * gamma / pi) = 0.8679\n  m = projectionMutator(hyperellipticalRaw),\n      p = m(alpha, k, gamma);\n\n  p.alpha = function (_) {\n    return arguments.length ? m(alpha = +_, k, gamma) : alpha;\n  };\n\n  p.k = function (_) {\n    return arguments.length ? m(alpha, k = +_, gamma) : k;\n  };\n\n  p.gamma = function (_) {\n    return arguments.length ? m(alpha, k, gamma = +_) : gamma;\n  };\n\n  return p.scale(152.63);\n}","import { merge } from \"d3-array\";\nimport { geoStream, geoProjection as projection } from \"d3-geo\";\nimport { abs, degrees, epsilon, radians } from \"../math.js\";\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction interpolateLine(coordinates, m) {\n  var i = -1,\n      n = coordinates.length,\n      p0 = coordinates[0],\n      p1,\n      dx,\n      dy,\n      resampled = [];\n\n  while (++i < n) {\n    p1 = coordinates[i];\n    dx = (p1[0] - p0[0]) / m;\n    dy = (p1[1] - p0[1]) / m;\n\n    for (var j = 0; j < m; ++j) {\n      resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\n    }\n\n    p0 = p1;\n  }\n\n  resampled.push(p1);\n  return resampled;\n}\n\nfunction interpolateSphere(lobes) {\n  var coordinates = [],\n      lobe,\n      lambda0,\n      phi0,\n      phi1,\n      lambda2,\n      phi2,\n      i,\n      n = lobes[0].length; // Northern Hemisphere\n\n  for (i = 0; i < n; ++i) {\n    lobe = lobes[0][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([[lambda0 + epsilon, phi0 + epsilon], [lambda0 + epsilon, phi1 - epsilon], [lambda2 - epsilon, phi1 - epsilon], [lambda2 - epsilon, phi2 + epsilon]], 30));\n  } // Southern Hemisphere\n\n\n  for (i = lobes[1].length - 1; i >= 0; --i) {\n    lobe = lobes[1][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([[lambda2 - epsilon, phi2 - epsilon], [lambda2 - epsilon, phi1 + epsilon], [lambda0 + epsilon, phi1 + epsilon], [lambda0 + epsilon, phi0 - epsilon]], 30));\n  }\n\n  return {\n    type: \"Polygon\",\n    coordinates: [merge(coordinates)]\n  };\n}\n\nexport default function (project, lobes, inverse) {\n  var sphere, bounds;\n\n  function forward(lambda, phi) {\n    var sign = phi < 0 ? -1 : +1,\n        lobe = lobes[+(phi < 0)];\n\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i) {\n      ;\n    }\n\n    var p = project(lambda - lobe[i][1][0], phi);\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\n    return p;\n  }\n\n  if (inverse) {\n    forward.invert = inverse(forward);\n  } else if (project.invert) {\n    forward.invert = function (x, y) {\n      var bound = bounds[+(y < 0)],\n          lobe = lobes[+(y < 0)];\n\n      for (var i = 0, n = bound.length; i < n; ++i) {\n        var b = bound[i];\n\n        if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n          var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\n          p[0] += lobe[i][1][0];\n          return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\n        }\n      }\n    };\n  }\n\n  var p = projection(forward),\n      stream_ = p.stream;\n\n  p.stream = function (stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      geoStream(sphere, sphereStream);\n    };\n\n    return rotateStream;\n  };\n\n  p.lobes = function (_) {\n    if (!arguments.length) return lobes.map(function (lobe) {\n      return lobe.map(function (l) {\n        return [[l[0][0] * degrees, l[0][1] * degrees], [l[1][0] * degrees, l[1][1] * degrees], [l[2][0] * degrees, l[2][1] * degrees]];\n      });\n    });\n    sphere = interpolateSphere(_);\n    lobes = _.map(function (lobe) {\n      return lobe.map(function (l) {\n        return [[l[0][0] * radians, l[0][1] * radians], [l[1][0] * radians, l[1][1] * radians], [l[2][0] * radians, l[2][1] * radians]];\n      });\n    });\n    bounds = lobes.map(function (lobe) {\n      return lobe.map(function (l) {\n        var x0 = project(l[0][0], l[0][1])[0],\n            x1 = project(l[2][0], l[2][1])[0],\n            y0 = project(l[1][0], l[0][1])[1],\n            y1 = project(l[1][0], l[1][1])[1],\n            t;\n        if (y0 > y1) t = y0, y0 = y1, y1 = t;\n        return [[x0, y0], [x1, y1]];\n      });\n    });\n    return p;\n  };\n\n  if (lobes != null) p.lobes(lobes);\n  return p;\n}","import { boggsRaw } from \"../boggs.js\";\nimport interrupt from \"./index.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere\n[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];\nexport default function () {\n  return interrupt(boggsRaw, lobes).scale(160.857);\n}","import { homolosineRaw } from \"../homolosine.js\";\nimport interrupt from \"./index.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere\n[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];\nexport default function () {\n  return interrupt(homolosineRaw, lobes).scale(152.63);\n}","import { mollweideRaw } from \"../mollweide.js\";\nimport interrupt from \"./index.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 0], [-100, 90], [-40, 0]], [[-40, 0], [30, 90], [180, 0]]], [// southern hemisphere\n[[-180, 0], [-160, -90], [-100, 0]], [[-100, 0], [-60, -90], [-20, 0]], [[-20, 0], [20, -90], [80, 0]], [[80, 0], [140, -90], [180, 0]]]];\nexport default function () {\n  return interrupt(mollweideRaw, lobes).scale(169.529);\n}","import { mollweideRaw } from \"../mollweide.js\";\nimport interrupt from \"./index.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 0], [-90, 90], [0, 0]], [[0, 0], [90, 90], [180, 0]]], [// southern hemisphere\n[[-180, 0], [-90, -90], [0, 0]], [[0, 0], [90, -90], [180, 0]]]];\nexport default function () {\n  return interrupt(mollweideRaw, lobes).scale(169.529).rotate([20, 0]);\n}","import { sinuMollweideRaw } from \"../sinuMollweide.js\";\nimport interrupt from \"./index.js\";\nimport { solve2d } from \"../newton.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 35], [-30, 90], [0, 35]], [[0, 35], [30, 90], [180, 35]]], [// southern hemisphere\n[[-180, -10], [-102, -90], [-65, -10]], [[-65, -10], [5, -90], [77, -10]], [[77, -10], [103, -90], [180, -10]]]];\nexport default function () {\n  return interrupt(sinuMollweideRaw, lobes, solve2d).rotate([-20, -55]).scale(164.263).center([0, -5.4036]);\n}","import { sinusoidalRaw } from \"../sinusoidal.js\";\nimport interrupt from \"./index.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 0], [-110, 90], [-40, 0]], [[-40, 0], [0, 90], [40, 0]], [[40, 0], [110, 90], [180, 0]]], [// southern hemisphere\n[[-180, 0], [-110, -90], [-40, 0]], [[-40, 0], [0, -90], [40, 0]], [[40, 0], [110, -90], [180, 0]]]];\nexport default function () {\n  return interrupt(sinusoidalRaw, lobes).scale(152.63).rotate([-20, 0]);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { pi, sqrt, tau } from \"./math.js\";\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function (x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function () {\n  return projection(kavrayskiy7Raw).scale(158.837);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin } from \"./math.js\";\nexport function lagrangeRaw(n) {\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [2 * sin(lambda) / c, (v - 1 / v) / c];\n  }\n\n  forward.invert = function (x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [atan2(2 * x, 1 - x2 - y2) / n, asin((t - 1) / (t + 1))];\n  };\n\n  return forward;\n}\nexport default function () {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function (_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p.scale(124.75);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2 } from \"./math.js\";\nvar pi_sqrt2 = pi / sqrt2;\nexport function larriveeRaw(lambda, phi) {\n  return [lambda * (1 + sqrt(cos(phi))) / 2, phi / (cos(phi / 2) * cos(lambda / 6))];\n}\n\nlarriveeRaw.invert = function (x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;else lambda += 6 * acos(pi_sqrt2 / y0);\n\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 + 0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = phi / cosPhi_2 * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function () {\n  return projection(larriveeRaw).scale(97.2672);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon, pi, sign } from \"./math.js\";\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)), phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))];\n}\n\nlaskowskiRaw.invert = function (x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n\n  return i && [lambda, phi];\n};\n\nexport default function () {\n  return projection(laskowskiRaw).scale(139.98);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2 } from \"./math.js\";\nexport function littrowRaw(lambda, phi) {\n  return [sin(lambda) / cos(phi), tan(phi) * cos(lambda)];\n}\n\nlittrowRaw.invert = function (x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      x2_y2_1 = x2 + y2_1,\n      cosPhi = x ? sqrt1_2 * sqrt((x2_y2_1 - sqrt(x2_y2_1 * x2_y2_1 - 4 * x2)) / x2) : 1 / sqrt(y2_1);\n  return [asin(x * cosPhi), sign(y) * acos(cosPhi)];\n};\n\nexport default function () {\n  return projection(littrowRaw).scale(144.049).clipAngle(90 - 1e-3);\n}","import parallel1 from \"./parallel1.js\";\nimport { abs, cos, epsilon, halfPi, log, quarterPi, tan } from \"./math.js\";\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0 : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function (x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [abs(y) < epsilon ? x / cosPhi0 : abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon ? 0 : x * log(tan(lambda) / tanPhi0) / y, phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(loximuthalRaw).parallel(40).scale(158.837);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { atan, exp, log, quarterPi, pi, tan } from \"./math.js\";\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function (x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function () {\n  return projection(millerRaw).scale(108.318);\n}","import { geoProjection as projection, geoRotation as rotation } from \"d3-geo\";\nimport { abs, asin, atan, atan2, cos, epsilon, sin, sqrt } from \"./math.js\";\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function (x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n      var denominator = br * br + bi * bi,\n          deltar,\n          deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64]).scale(1400).center([-160.908, 62.4864]).clipAngle(30).angle(7.8);\n}\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38]).scale(1000).clipAngle(55).center([-96.5563, 38.8675]);\n}\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45]).scale(359.513).clipAngle(55).center([-117.474, 53.0628]);\n}\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18]).scale(209.091).center([20, 16.7214]).clipAngle(82);\n}\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10]).scale(250).clipAngle(130).center([-165, -10]);\n}\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n  delete p.rotate;\n\n  p.center = function (_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, cos, sin, sqrt } from \"./math.js\";\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7, 9 * sin(theta / 3) / sqrt7];\n}\n\nmtFlatPolarParabolicRaw.invert = function (x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)), asin(sin(theta) * 3 * sqrt6 / 7)];\n};\n\nexport default function () {\n  return projection(mtFlatPolarParabolicRaw).scale(164.859);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2 } from \"./math.js\";\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n\n  return [lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2), 2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)];\n}\n\nmtFlatPolarQuarticRaw.invert = function (x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)), asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))];\n};\n\nexport default function () {\n  return projection(mtFlatPolarQuarticRaw).scale(188.209);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math.js\";\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n\n  return [A * (0.5 + cos(theta)) * lambda / 1.5, A * theta];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function (x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [1.5 * x / (A * (0.5 + cos(theta))), asin((theta / 2 + sin(theta)) / (1 + pi / 4))];\n};\n\nexport default function () {\n  return projection(mtFlatPolarSinusoidalRaw).scale(166.518);\n}","import projection from \"./index.js\";\nimport { abs, epsilon } from \"../math.js\";\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi,\n      phi4 = phi2 * phi2;\n  return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];\n}\n\nnaturalEarth1Raw.invert = function (x, y) {\n  var phi = y,\n      i = 25,\n      delta;\n\n  do {\n    var phi2 = phi * phi,\n        phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n\n  return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];\n};\n\nexport default function () {\n  return projection(naturalEarth1Raw).scale(175.295);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon2 } from \"./math.js\";\nexport function naturalEarth2Raw(lambda, phi) {\n  var phi2 = phi * phi,\n      phi4 = phi2 * phi2,\n      phi6 = phi2 * phi4;\n  return [lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)), phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))];\n}\n\nnaturalEarth2Raw.invert = function (x, y) {\n  var phi = y,\n      i = 25,\n      delta,\n      phi2,\n      phi4,\n      phi6;\n\n  do {\n    phi2 = phi * phi;\n    phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4)) - y) / (1.01183 + phi4 * phi4 * (9 * -0.02625 + 11 * 0.01926 * phi2 + 13 * -0.00396 * phi4));\n  } while (abs(delta) > epsilon2 && --i > 0);\n\n  phi2 = phi * phi;\n  phi4 = phi2 * phi2;\n  phi6 = phi2 * phi4;\n  return [x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)), phi];\n};\n\nexport default function () {\n  return projection(naturalEarth2Raw).scale(175.295);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, cos, epsilon, tan } from \"./math.js\";\nexport function nellHammerRaw(lambda, phi) {\n  return [lambda * (1 + cos(phi)) / 2, 2 * (phi - tan(phi / 2))];\n}\n\nnellHammerRaw.invert = function (x, y) {\n  var p = y / 2;\n\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n\n  return [2 * x / (1 + cos(y)), y];\n};\n\nexport default function () {\n  return projection(nellHammerRaw).scale(152.63);\n}","import { hammerRaw } from \"../hammer.js\";\nimport interrupt from \"./index.js\";\nvar lobes = [[// northern hemisphere\n[[-180, 0], [-90, 90], [0, 0]], [[0, 0], [90, 90], [180, 0]]], [// southern hemisphere\n[[-180, 0], [-90, -90], [0, 0]], [[0, 0], [90, -90], [180, 0]]]];\nexport default function () {\n  return interrupt(hammerRaw(Infinity), lobes).rotate([20, 0]).scale(152.63);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, cos, halfPi, pi, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\"; // Based on Torben Jansen's implementation\n// https://beta.observablehq.com/@toja/nicolosi-globular-projection\n// https://beta.observablehq.com/@toja/nicolosi-globular-inverse\n\nexport function nicolosiRaw(lambda, phi) {\n  var sinPhi = sin(phi),\n      q = cos(phi),\n      s = sign(lambda);\n  if (lambda === 0 || abs(phi) === halfPi) return [0, phi];else if (phi === 0) return [lambda, 0];else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];\n  var b = pi / (2 * lambda) - 2 * lambda / pi,\n      c = 2 * phi / pi,\n      d = (1 - c * c) / (sinPhi - c);\n  var b2 = b * b,\n      d2 = d * d,\n      b2d2 = 1 + b2 / d2,\n      d2b2 = 1 + d2 / b2;\n  var M = (b * sinPhi / d - b / 2) / b2d2,\n      N = (d2 * sinPhi / b2 + d / 2) / d2b2,\n      m = M * M + q * q / b2d2,\n      n = N * N - (d2 * sinPhi * sinPhi / b2 + d * sinPhi - 1) / d2b2;\n  return [halfPi * (M + sqrt(m) * s), halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)];\n}\n\nnicolosiRaw.invert = function (x, y) {\n  x /= halfPi;\n  y /= halfPi;\n  var x2 = x * x,\n      y2 = y * y,\n      x2y2 = x2 + y2,\n      pi2 = pi * pi;\n  return [x ? (x2y2 - 1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0, solve(function (phi) {\n    return x2y2 * (pi * sin(phi) - 2 * phi) * pi + 4 * phi * phi * (y - sin(phi)) + 2 * pi * phi - pi2 * y;\n  }, 0)];\n};\n\nexport default function () {\n  return projection(nicolosiRaw).scale(127.267);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon } from \"./math.js\"; // Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [lambda, phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))];\n}\n\npattersonRaw.invert = function (x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y,\n      delta;\n\n  do {\n    // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = (yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function () {\n  return projection(pattersonRaw).scale(139.319);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan } from \"./math.js\";\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [sin(k) / tanPhi, phi + (1 - cos(k)) / tanPhi];\n}\n\npolyconicRaw.invert = function (x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10,\n      delta;\n\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n\n  tanPhi = tan(phi);\n  return [(abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(y) * sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi), phi];\n};\n\nexport default function () {\n  return projection(polyconicRaw).scale(103.74);\n}","import adder from \"./adder.js\";\nimport { atan2, cos, quarterPi, radians, sin, tau } from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\nexport var areaRingSum = adder();\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function polygonStart() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function polygonEnd() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function sphere() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u)); // Advance the previous points.\n\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function (object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}","import adder from \"./adder.js\";\nimport { areaStream, areaRingSum } from \"./area.js\";\nimport { cartesian, cartesianCross, cartesianNormalizeInPlace, spherical } from \"./cartesian.js\";\nimport { abs, degrees, epsilon, radians } from \"./math.js\";\nimport stream from \"./stream.js\";\nvar lambda0,\n    phi0,\n    lambda1,\n    phi1,\n    // bounds\nlambda2,\n    // previous lambda-coordinate\nlambda00,\n    phi00,\n    // first point\np0,\n    // previous 3D point\ndeltaSum = adder(),\n    ranges,\n    range;\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function polygonStart() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function polygonEnd() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > epsilon) phi1 = 90;else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  },\n  sphere: function sphere() {\n    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n} // Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\n\n\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function (feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream); // First, sort ranges by their minimum longitudes.\n\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare); // Then, merge any ranges that overlap.\n\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    } // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n\n\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n  return lambda0 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0, phi0], [lambda1, phi1]];\n}","import { asin, atan2, cos, degrees, haversin, radians, sin, sqrt } from \"./math.js\";\nexport default function (a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n  var interpolate = d ? function (t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [atan2(y, x) * degrees, atan2(z, sqrt(x * x + y * y)) * degrees];\n  } : function () {\n    return [x0 * degrees, y0 * degrees];\n  };\n  interpolate.distance = d;\n  return interpolate;\n}","import { atan2, cos, sin, sqrt } from \"../math.js\"; // Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n// Transform matrix for [a0, a1] -> [b0, b1].\n\nexport default function (a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n  return multiply([1, 0, a[0][0], 0, 1, a[0][1]], multiply([s, 0, 0, 0, s, 0], multiply([cos(phi), sin(phi), 0, -sin(phi), cos(phi), 0], [1, 0, -b[0][0], 0, 1, -b[0][1]])));\n} // Inverts a transform matrix.\n\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]), -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])];\n} // Multiplies two 3x2 matrices.\n\nexport function multiply(a, b) {\n  return [a[0] * b[0] + a[1] * b[3], a[0] * b[1] + a[1] * b[4], a[0] * b[2] + a[1] * b[5] + a[2], a[3] * b[0] + a[4] * b[3], a[3] * b[1] + a[4] * b[4], a[3] * b[2] + a[4] * b[5] + a[5]];\n} // Subtracts 2D vectors.\n\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n} // Magnitude of a 2D vector.\n\n\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n} // Angle between two 2D vectors.\n\n\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}","import { geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection } from \"d3-geo\";\nimport { abs, degrees, epsilon, radians } from \"../math.js\";\nimport { default as matrix, multiply, inverse } from \"./matrix.js\"; // Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\n//  * r: rotation angle for root face [deprecated by .angle()].\n\nexport default function (root, face, r) {\n  recurse(root, {\n    transform: null\n  });\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face); // Find shared edge.\n\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m; // Replace shared edge in parent edges array.\n\n      var edges = parent.edges;\n\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n\n      edges = node.edges;\n\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n\n    if (node.children) {\n      node.children.forEach(function (child) {\n        recurse(child, node);\n      });\n    }\n\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n\n    if (t = node.transform) {\n      return [t[0] * point[0] + t[1] * point[1] + t[2], -(t[3] * point[0] + t[4] * point[1] + t[5])];\n    }\n\n    point[1] = -point[1];\n    return point;\n  } // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n\n\n  if (hasInverse(root)) forward.invert = function (x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n\n    if (t) {\n      t = inverse(t);\n      point = [t[0] * point[0] + t[1] * point[1] + t[2], t[3] * point[0] + t[4] * point[1] + t[5]];\n    }\n\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function (stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n\n    rotateStream.sphere = function () {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n\n    return rotateStream;\n  };\n\n  return proj.angle(r == null ? -30 : r * degrees);\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {\n    type: \"MultiPoint\",\n    coordinates: node.face\n  },\n      notPoles = node.face.filter(function (d) {\n    return abs(d[1]) !== 90;\n  }),\n      b = bounds({\n    type: \"MultiPoint\",\n    coordinates: notPoles\n  }),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0]; // TODO\n\n  var c = dx === 180 || dx === 360 ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2] : centroid(multiPoint); // First find the shared edge…\n\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n} // Tests equality of two spherical points.\n\n\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n} // Finds a shared edge given two clockwise polygons.\n\n\nfunction sharedEdge(a, b) {\n  var x,\n      y,\n      n = a.length,\n      found = null;\n\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n} // Converts an array of n face vertices to an array of n + 1 edges.\n\n\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n\n  for (var a = face[n - 1], i = 0; i < n; ++i) {\n    edges.push([a, a = face[i]]);\n  }\n\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}","import { atan, cos, sin } from \"../math.js\";\nimport { azimuthalInvert } from \"./azimuthal.js\";\nimport projection from \"./index.js\";\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y),\n      k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\ngnomonicRaw.invert = azimuthalInvert(atan);\nexport default function () {\n  return projection(gnomonicRaw).scale(144.049).clipAngle(60);\n}","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [[0, 90], [-90, 0], [0, 0], [90, 0], [180, 0], [0, -90]];\nexport default [[0, 2, 1], [0, 3, 2], [5, 1, 2], [5, 2, 3], [0, 1, 4], [0, 4, 3], [5, 4, 1], [5, 3, 4]].map(function (face) {\n  return face.map(function (i) {\n    return octahedron[i];\n  });\n});","import { geoCentroid as centroid, geoGnomonic as gnomonic } from \"d3-geo\";\nimport { pi } from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\nexport default function (faceProjection) {\n  faceProjection = faceProjection || function (face) {\n    var c = centroid({\n      type: \"MultiPoint\",\n      coordinates: face\n    });\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var faces = octahedron.map(function (face) {\n    return {\n      face: face,\n      project: faceProjection(face)\n    };\n  });\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n  return polyhedral(faces[0], function (lambda, phi) {\n    return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5];\n  }).angle(-30).scale(101.858).center([0, 45]);\n}","import { geoCentroid as centroid, geoProjection as projection } from \"d3-geo\";\nimport { collignonRaw } from \"../collignon.js\";\nimport { pi, sqrt } from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function (x, y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function (faceProjection) {\n  faceProjection = faceProjection || function (face) {\n    var c = centroid({\n      type: \"MultiPoint\",\n      coordinates: face\n    });\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function (face) {\n    return {\n      face: face,\n      project: faceProjection(face)\n    };\n  });\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function (d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n  return polyhedral(faces[0], function (lambda, phi) {\n    return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5];\n  }).angle(-30).scale(121.906).center([0, 48.5904]);\n}","import { geoCentroid as centroid, geoGnomonic as gnomonic } from \"d3-geo\";\nimport { asin, atan2, cos, degrees, max, min, pi, radians, sin } from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\nexport default function (faceProjection) {\n  faceProjection = faceProjection || function (face) {\n    var c = face.length === 6 ? centroid({\n      type: \"MultiPoint\",\n      coordinates: face\n    }) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function (face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794, a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794, a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794]), spherical([b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794, b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794, b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794]));\n      a = b;\n    }\n\n    return hexagon;\n  });\n  var cornerNormals = [];\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n  w5.forEach(function (hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n\n    for (var i = 0; i < n; ++i) {\n      w5.push([face[i], hexagon[(i * 2 + 2) % (2 * n)], hexagon[(i * 2 + 1) % (2 * n)]]);\n      parents.push(j);\n      normals.push(cross(cartesian(hexagon[(i * 2 + 2) % (2 * n)]), cartesian(hexagon[(i * 2 + 1) % (2 * n)])));\n    }\n  });\n  var faces = w5.map(function (face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n  parents.forEach(function (d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4 : lambda < 0 ? phi < 0 ? 2 : 0 : lambda < pi / 2 ? phi < 0 ? 3 : 1 : phi < 0 ? 7 : 5;\n    var n = cornerNormals[hexagon];\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1 : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2 : hexagon];\n  }\n\n  return polyhedral(faces[0], face).angle(-30).scale(110.625).center([0, 45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) {\n    s += a[i] * b[i];\n  }\n\n  return s;\n}\n\nfunction cross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n} // Converts 3D Cartesian to spherical coordinates (degrees).\n\n\nfunction spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]) * degrees, asin(max(-1, min(1, cartesian[2]))) * degrees];\n} // Converts spherical coordinates (degrees) to 3D Cartesian.\n\n\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n}","export default function () {}","import { geoStream } from \"d3-geo\";\nimport noop from \"../noop.js\";\nimport clockwise from \"./clockwise.js\";\nimport contains from \"./contains.js\";\nexport default function (object, projection) {\n  var stream = projection.stream,\n      project;\n  if (!stream) throw new Error(\"invalid projection\");\n\n  switch (object && object.type) {\n    case \"Feature\":\n      project = projectFeature;\n      break;\n\n    case \"FeatureCollection\":\n      project = projectFeatureCollection;\n      break;\n\n    default:\n      project = projectGeometry;\n      break;\n  }\n\n  return project(object, stream);\n}\n\nfunction projectFeatureCollection(o, stream) {\n  return {\n    type: \"FeatureCollection\",\n    features: o.features.map(function (f) {\n      return projectFeature(f, stream);\n    })\n  };\n}\n\nfunction projectFeature(o, stream) {\n  return {\n    type: \"Feature\",\n    id: o.id,\n    properties: o.properties,\n    geometry: projectGeometry(o.geometry, stream)\n  };\n}\n\nfunction projectGeometryCollection(o, stream) {\n  return {\n    type: \"GeometryCollection\",\n    geometries: o.geometries.map(function (o) {\n      return projectGeometry(o, stream);\n    })\n  };\n}\n\nfunction projectGeometry(o, stream) {\n  if (!o) return null;\n  if (o.type === \"GeometryCollection\") return projectGeometryCollection(o, stream);\n  var sink;\n\n  switch (o.type) {\n    case \"Point\":\n      sink = sinkPoint;\n      break;\n\n    case \"MultiPoint\":\n      sink = sinkPoint;\n      break;\n\n    case \"LineString\":\n      sink = sinkLine;\n      break;\n\n    case \"MultiLineString\":\n      sink = sinkLine;\n      break;\n\n    case \"Polygon\":\n      sink = sinkPolygon;\n      break;\n\n    case \"MultiPolygon\":\n      sink = sinkPolygon;\n      break;\n\n    case \"Sphere\":\n      sink = sinkPolygon;\n      break;\n\n    default:\n      return null;\n  }\n\n  geoStream(o, stream(sink));\n  return sink.result();\n}\n\nvar points = [],\n    lines = [];\nvar sinkPoint = {\n  point: function point(x, y) {\n    points.push([x, y]);\n  },\n  result: function result() {\n    var result = !points.length ? null : points.length < 2 ? {\n      type: \"Point\",\n      coordinates: points[0]\n    } : {\n      type: \"MultiPoint\",\n      coordinates: points\n    };\n    points = [];\n    return result;\n  }\n};\nvar sinkLine = {\n  lineStart: noop,\n  point: function point(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function lineEnd() {\n    if (points.length) lines.push(points), points = [];\n  },\n  result: function result() {\n    var result = !lines.length ? null : lines.length < 2 ? {\n      type: \"LineString\",\n      coordinates: lines[0]\n    } : {\n      type: \"MultiLineString\",\n      coordinates: lines\n    };\n    lines = [];\n    return result;\n  }\n};\nvar sinkPolygon = {\n  polygonStart: noop,\n  lineStart: noop,\n  point: function point(x, y) {\n    points.push([x, y]);\n  },\n  lineEnd: function lineEnd() {\n    var n = points.length;\n\n    if (n) {\n      do {\n        points.push(points[0].slice());\n      } while (++n < 4);\n\n      lines.push(points), points = [];\n    }\n  },\n  polygonEnd: noop,\n  result: function result() {\n    if (!lines.length) return null;\n    var polygons = [],\n        holes = []; // https://github.com/d3/d3/issues/1558\n\n    lines.forEach(function (ring) {\n      if (clockwise(ring)) polygons.push([ring]);else holes.push(ring);\n    });\n    holes.forEach(function (hole) {\n      var point = hole[0];\n      polygons.some(function (polygon) {\n        if (contains(polygon[0], point)) {\n          polygon.push(hole);\n          return true;\n        }\n      }) || polygons.push([hole]);\n    });\n    lines = [];\n    return !polygons.length ? null : polygons.length > 1 ? {\n      type: \"MultiPolygon\",\n      coordinates: polygons\n    } : {\n      type: \"Polygon\",\n      coordinates: polygons[0]\n    };\n  }\n};","export default function (ring) {\n  if ((n = ring.length) < 4) return false;\n  var i = 0,\n      n,\n      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n\n  while (++i < n) {\n    area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  }\n\n  return area <= 0;\n}","export default function (ring, point) {\n  var x = point[0],\n      y = point[1],\n      contains = false;\n\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i],\n        xi = pi[0],\n        yi = pi[1],\n        pj = ring[j],\n        xj = pj[0],\n        yj = pj[1];\n    if (yi > y ^ yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = !contains;\n  }\n\n  return contains;\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, halfPi, pi, sign, sqrt1_2 } from \"../math.js\";\nexport default function (project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectQuincuncial(lambda, phi) {\n    var t = abs(lambda) < halfPi,\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\n        x = (p[0] - p[1]) * sqrt1_2,\n        y = (p[0] + p[1]) * sqrt1_2;\n    if (t) return [x, y];\n    var d = dx * sqrt1_2,\n        s = x > 0 ^ y > 0 ? -1 : 1;\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\n  }\n\n  if (project.invert) projectQuincuncial.invert = function (x0, y0) {\n    var x = (x0 + y0) * sqrt1_2,\n        y = (y0 - x0) * sqrt1_2,\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\n\n    if (!t) {\n      var d = dx * sqrt1_2,\n          s = x > 0 ^ y > 0 ? -1 : 1,\n          x1 = -s * x0 + (y > 0 ? 1 : -1) * d,\n          y1 = -s * y0 + (x > 0 ? 1 : -1) * d;\n      x = (-x1 - y1) * sqrt1_2;\n      y = (x1 - y1) * sqrt1_2;\n    }\n\n    var p = project.invert(x, y);\n    if (!t) p[0] += x > 0 ? pi : -pi;\n    return p;\n  };\n  return projection(projectQuincuncial).rotate([-90, -90, 45]).clipAngle(180 - 1e-3);\n}","import { gringortenRaw } from \"../gringorten.js\";\nimport quincuncial from \"./index.js\";\nexport default function () {\n  return quincuncial(gringortenRaw).scale(176.423);\n}","import { guyouRaw } from \"../guyou.js\";\nimport quincuncial from \"./index.js\";\nexport default function () {\n  return quincuncial(guyouRaw).scale(111.48);\n}","export default function (input, digits) {\n  if (!(0 <= (digits = +digits) && digits <= 20)) throw new Error(\"invalid digits\");\n\n  function quantizePoint(input) {\n    var n = input.length,\n        i = 2,\n        output = new Array(n);\n    output[0] = +input[0].toFixed(digits);\n    output[1] = +input[1].toFixed(digits);\n\n    while (i < n) {\n      output[i] = input[i], ++i;\n    }\n\n    return output;\n  }\n\n  function quantizePoints(input) {\n    return input.map(quantizePoint);\n  }\n\n  function quantizePointsNoDuplicates(input) {\n    var point0 = quantizePoint(input[0]);\n    var output = [point0];\n\n    for (var i = 1; i < input.length; i++) {\n      var point = quantizePoint(input[i]);\n\n      if (point.length > 2 || point[0] != point0[0] || point[1] != point0[1]) {\n        output.push(point);\n        point0 = point;\n      }\n    }\n\n    if (output.length === 1 && input.length > 1) {\n      output.push(quantizePoint(input[input.length - 1]));\n    }\n\n    return output;\n  }\n\n  function quantizePolygon(input) {\n    return input.map(quantizePointsNoDuplicates);\n  }\n\n  function quantizeGeometry(input) {\n    if (input == null) return input;\n    var output;\n\n    switch (input.type) {\n      case \"GeometryCollection\":\n        output = {\n          type: \"GeometryCollection\",\n          geometries: input.geometries.map(quantizeGeometry)\n        };\n        break;\n\n      case \"Point\":\n        output = {\n          type: \"Point\",\n          coordinates: quantizePoint(input.coordinates)\n        };\n        break;\n\n      case \"MultiPoint\":\n        output = {\n          type: input.type,\n          coordinates: quantizePoints(input.coordinates)\n        };\n        break;\n\n      case \"LineString\":\n        output = {\n          type: input.type,\n          coordinates: quantizePointsNoDuplicates(input.coordinates)\n        };\n        break;\n\n      case \"MultiLineString\":\n      case \"Polygon\":\n        output = {\n          type: input.type,\n          coordinates: quantizePolygon(input.coordinates)\n        };\n        break;\n\n      case \"MultiPolygon\":\n        output = {\n          type: \"MultiPolygon\",\n          coordinates: input.coordinates.map(quantizePolygon)\n        };\n        break;\n\n      default:\n        return input;\n    }\n\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n\n  function quantizeFeature(input) {\n    var output = {\n      type: \"Feature\",\n      properties: input.properties,\n      geometry: quantizeGeometry(input.geometry)\n    };\n    if (input.id != null) output.id = input.id;\n    if (input.bbox != null) output.bbox = input.bbox;\n    return output;\n  }\n\n  if (input != null) switch (input.type) {\n    case \"Feature\":\n      return quantizeFeature(input);\n\n    case \"FeatureCollection\":\n      {\n        var output = {\n          type: \"FeatureCollection\",\n          features: input.features.map(quantizeFeature)\n        };\n        if (input.bbox != null) output.bbox = input.bbox;\n        return output;\n      }\n\n    default:\n      return quantizeGeometry(input);\n  }\n  return input;\n}","import { abs, acos, asin, atan, cos, epsilon, pi, sin, tan } from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [sin(E) * cotPhi, phi + (1 - cos(E)) * cotPhi - phi0];\n  } // TODO return null for points outside outline.\n\n\n  forward.invert = function (x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10,\n        delta;\n\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A, phi];\n  };\n\n  return forward;\n}\nexport default function () {\n  return parallel1(rectangularPolyconicRaw).scale(131.215);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, degrees, epsilon2, floor, halfPi, max, min, pi, radians } from \"./math.js\";\nvar K = [[0.9986, -0.062], [1.0000, 0.0000], [0.9986, 0.0620], [0.9954, 0.1240], [0.9900, 0.1860], [0.9822, 0.2480], [0.9730, 0.3100], [0.9600, 0.3720], [0.9427, 0.4340], [0.9216, 0.4958], [0.8962, 0.5571], [0.8679, 0.6176], [0.8350, 0.6769], [0.7986, 0.7346], [0.7597, 0.7903], [0.7186, 0.8435], [0.6732, 0.8936], [0.6213, 0.9394], [0.5722, 0.9761], [0.5322, 1.0000]];\nK.forEach(function (d) {\n  d[1] *= 1.0144;\n});\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), (phi > 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)];\n}\n\nrobinsonRaw.invert = function (x, y) {\n  var yy = y / halfPi,\n      phi = yy * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(yy) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50,\n          delta;\n\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = (y >= 0 ? halfPi : -halfPi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n\n      break;\n    }\n  } while (--i0 >= 0);\n\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2), phi * radians];\n};\n\nexport default function () {\n  return projection(robinsonRaw).scale(152.63);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { acos, asin, atan2, cos, degrees, radians, sin, sqrt } from \"./math.js\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [k * cosPhi * sin(lambda), k * sin(phi)];\n  }\n\n  forward.invert = function (x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [atan2(x * sinc, rho * sqrt(1 - sinc * sinc)), rho ? asin(y * sinc / rho) : 0];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [coordinates[0] * cosOmega / A, y / A];\n  }\n\n  forward.invert = function (x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\nexport default function () {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega); // As a multiple of radius.\n\n  p.distance = function (_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function (_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p.scale(432.147).clipAngle(acos(1 / distance) * degrees - 1e-6);\n}","var epsilon = 1e-4,\n    epsilonInverse = 1e4,\n    x0 = -180,\n    x0e = x0 + epsilon,\n    x1 = 180,\n    x1e = x1 - epsilon,\n    y0 = -90,\n    y0e = y0 + epsilon,\n    y1 = 90,\n    y1e = y1 - epsilon;\n\nfunction nonempty(coordinates) {\n  return coordinates.length > 0;\n}\n\nfunction quantize(x) {\n  return Math.floor(x * epsilonInverse) / epsilonInverse;\n}\n\nfunction normalizePoint(y) {\n  return y === y0 || y === y1 ? [0, y] : [x0, quantize(y)]; // pole or antimeridian?\n}\n\nfunction clampPoint(p) {\n  var x = p[0],\n      y = p[1],\n      clamped = false;\n  if (x <= x0e) x = x0, clamped = true;else if (x >= x1e) x = x1, clamped = true;\n  if (y <= y0e) y = y0, clamped = true;else if (y >= y1e) y = y1, clamped = true;\n  return clamped ? [x, y] : p;\n}\n\nfunction clampPoints(points) {\n  return points.map(clampPoint);\n} // For each ring, detect where it crosses the antimeridian or pole.\n\n\nfunction extractFragments(rings, polygon, fragments) {\n  for (var j = 0, m = rings.length; j < m; ++j) {\n    var ring = rings[j].slice(); // By default, assume that this ring doesn’t need any stitching.\n\n    fragments.push({\n      index: -1,\n      polygon: polygon,\n      ring: ring\n    });\n\n    for (var i = 0, n = ring.length; i < n; ++i) {\n      var point = ring[i],\n          x = point[0],\n          y = point[1]; // If this is an antimeridian or polar point…\n\n      if (x <= x0e || x >= x1e || y <= y0e || y >= y1e) {\n        ring[i] = clampPoint(point); // Advance through any antimeridian or polar points…\n\n        for (var k = i + 1; k < n; ++k) {\n          var pointk = ring[k],\n              xk = pointk[0],\n              yk = pointk[1];\n          if (xk > x0e && xk < x1e && yk > y0e && yk < y1e) break;\n        } // If this was just a single antimeridian or polar point,\n        // we don’t need to cut this ring into a fragment;\n        // we can just leave it as-is.\n\n\n        if (k === i + 1) continue; // Otherwise, if this is not the first point in the ring,\n        // cut the current fragment so that it ends at the current point.\n        // The current point is also normalized for later joining.\n\n        if (i) {\n          var fragmentBefore = {\n            index: -1,\n            polygon: polygon,\n            ring: ring.slice(0, i + 1)\n          };\n          fragmentBefore.ring[fragmentBefore.ring.length - 1] = normalizePoint(y);\n          fragments[fragments.length - 1] = fragmentBefore;\n        } // If the ring started with an antimeridian fragment,\n        // we can ignore that fragment entirely.\n        else fragments.pop(); // If the remainder of the ring is an antimeridian fragment,\n        // move on to the next ring.\n\n\n        if (k >= n) break; // Otherwise, add the remaining ring fragment and continue.\n\n        fragments.push({\n          index: -1,\n          polygon: polygon,\n          ring: ring = ring.slice(k - 1)\n        });\n        ring[0] = normalizePoint(ring[0][1]);\n        i = -1;\n        n = ring.length;\n      }\n    }\n  }\n} // Now stitch the fragments back together into rings.\n\n\nfunction stitchFragments(fragments) {\n  var i,\n      n = fragments.length; // To connect the fragments start-to-end, create a simple index by end.\n\n  var fragmentByStart = {},\n      fragmentByEnd = {},\n      fragment,\n      start,\n      startFragment,\n      end,\n      endFragment; // For each fragment…\n\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n    start = fragment.ring[0];\n    end = fragment.ring[fragment.ring.length - 1]; // If this fragment is closed, add it as a standalone ring.\n\n    if (start[0] === end[0] && start[1] === end[1]) {\n      fragment.polygon.push(fragment.ring);\n      fragments[i] = null;\n      continue;\n    }\n\n    fragment.index = i;\n    fragmentByStart[start] = fragmentByEnd[end] = fragment;\n  } // For each open fragment…\n\n\n  for (i = 0; i < n; ++i) {\n    fragment = fragments[i];\n\n    if (fragment) {\n      start = fragment.ring[0];\n      end = fragment.ring[fragment.ring.length - 1];\n      startFragment = fragmentByEnd[start];\n      endFragment = fragmentByStart[end];\n      delete fragmentByStart[start];\n      delete fragmentByEnd[end]; // If this fragment is closed, add it as a standalone ring.\n\n      if (start[0] === end[0] && start[1] === end[1]) {\n        fragment.polygon.push(fragment.ring);\n        continue;\n      }\n\n      if (startFragment) {\n        delete fragmentByEnd[start];\n        delete fragmentByStart[startFragment.ring[0]];\n        startFragment.ring.pop(); // drop the shared coordinate\n\n        fragments[startFragment.index] = null;\n        fragment = {\n          index: -1,\n          polygon: startFragment.polygon,\n          ring: startFragment.ring.concat(fragment.ring)\n        };\n\n        if (startFragment === endFragment) {\n          // Connect both ends to this single fragment to create a ring.\n          fragment.polygon.push(fragment.ring);\n        } else {\n          fragment.index = n++;\n          fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);\n        }\n      } else if (endFragment) {\n        delete fragmentByStart[end];\n        delete fragmentByEnd[endFragment.ring[endFragment.ring.length - 1]];\n        fragment.ring.pop(); // drop the shared coordinate\n\n        fragment = {\n          index: n++,\n          polygon: endFragment.polygon,\n          ring: fragment.ring.concat(endFragment.ring)\n        };\n        fragments[endFragment.index] = null;\n        fragments.push(fragmentByStart[fragment.ring[0]] = fragmentByEnd[fragment.ring[fragment.ring.length - 1]] = fragment);\n      } else {\n        fragment.ring.push(fragment.ring[0]); // close ring\n\n        fragment.polygon.push(fragment.ring);\n      }\n    }\n  }\n}\n\nfunction stitchFeature(input) {\n  var output = {\n    type: \"Feature\",\n    geometry: stitchGeometry(input.geometry)\n  };\n  if (input.id != null) output.id = input.id;\n  if (input.bbox != null) output.bbox = input.bbox;\n  if (input.properties != null) output.properties = input.properties;\n  return output;\n}\n\nfunction stitchGeometry(input) {\n  if (input == null) return input;\n  var output, fragments, i, n;\n\n  switch (input.type) {\n    case \"GeometryCollection\":\n      output = {\n        type: \"GeometryCollection\",\n        geometries: input.geometries.map(stitchGeometry)\n      };\n      break;\n\n    case \"Point\":\n      output = {\n        type: \"Point\",\n        coordinates: clampPoint(input.coordinates)\n      };\n      break;\n\n    case \"MultiPoint\":\n    case \"LineString\":\n      output = {\n        type: input.type,\n        coordinates: clampPoints(input.coordinates)\n      };\n      break;\n\n    case \"MultiLineString\":\n      output = {\n        type: \"MultiLineString\",\n        coordinates: input.coordinates.map(clampPoints)\n      };\n      break;\n\n    case \"Polygon\":\n      {\n        var polygon = [];\n        extractFragments(input.coordinates, polygon, fragments = []);\n        stitchFragments(fragments);\n        output = {\n          type: \"Polygon\",\n          coordinates: polygon\n        };\n        break;\n      }\n\n    case \"MultiPolygon\":\n      {\n        fragments = [], i = -1, n = input.coordinates.length;\n        var polygons = new Array(n);\n\n        while (++i < n) {\n          extractFragments(input.coordinates[i], polygons[i] = [], fragments);\n        }\n\n        stitchFragments(fragments);\n        output = {\n          type: \"MultiPolygon\",\n          coordinates: polygons.filter(nonempty)\n        };\n        break;\n      }\n\n    default:\n      return input;\n  }\n\n  if (input.bbox != null) output.bbox = input.bbox;\n  return output;\n}\n\nexport default function (input) {\n  if (input == null) return input;\n\n  switch (input.type) {\n    case \"Feature\":\n      return stitchFeature(input);\n\n    case \"FeatureCollection\":\n      {\n        var output = {\n          type: \"FeatureCollection\",\n          features: input.features.map(stitchFeature)\n        };\n        if (input.bbox != null) output.bbox = input.bbox;\n        return output;\n      }\n\n    default:\n      return stitchGeometry(input);\n  }\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { atan, quarterPi, sin, tan } from \"./math.js\";\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [lambda * (0.74482 - 0.34588 * s * s), 1.70711 * t];\n}\n\ntimesRaw.invert = function (x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [x / (0.74482 - 0.34588 * s * s), 2 * atan(t)];\n};\n\nexport default function () {\n  return projection(timesRaw).scale(146.153);\n}","import { geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation } from \"d3-geo\";\nimport { asin, degrees, pi, sin, radians } from \"./math.js\"; // Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\n\nexport default function (raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n  delete p.rotate;\n\n  p.center = function (_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p.clipAngle(90);\n}","import { geoGnomonicRaw as gnomonicRaw } from \"d3-geo\";\nimport { cos } from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\";\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function (x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39]).clipAngle(60).scale(400);\n}\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}","import { geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw } from \"d3-geo\";\nimport { acos, atan2, cos, sin, sqrt, tan } from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\"; // TODO clip to ellipse\n\nexport function twoPointEquidistantRaw(z0) {\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\n  var lambdaa = -z0 / 2,\n      lambdab = -lambdaa,\n      z02 = z0 * z0,\n      tanLambda0 = tan(lambdab),\n      S = 0.5 / sin(lambdab);\n\n  function forward(lambda, phi) {\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\n        ys = phi < 0 ? -1 : 1;\n    za *= za, zb *= zb;\n    return [(za - zb) / (2 * z0), ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)];\n  }\n\n  forward.invert = function (x, y) {\n    var y2 = y * y,\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\n        t,\n        d;\n    return [atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0), (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)];\n  };\n\n  return forward;\n}\nexport function twoPointEquidistantUsa() {\n  return twoPointEquidistant([-158, 21.5], [-77, 39]).clipAngle(130).scale(122.571);\n}\nexport default function twoPointEquidistant(p0, p1) {\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan } from \"./math.js\";\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2, sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2];\n}\n\nvanDerGrintenRaw.invert = function (x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x), sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))];\n};\n\nexport default function () {\n  return projection(vanDerGrintenRaw).scale(79.4183);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan } from \"./math.js\";\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [sign(lambda) * pi * x1, sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))];\n}\n\nvanDerGrinten2Raw.invert = function (x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [sign(x) * pi * (B - A), sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))];\n};\n\nexport default function () {\n  return projection(vanDerGrinten2Raw).scale(79.4183);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan } from \"./math.js\";\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A), pi * y1];\n}\n\nvanDerGrinten3Raw.invert = function (x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0, halfPi * sin(2 * atan(y1))];\n};\n\nexport default function () {\n  return projection(vanDerGrinten3Raw).scale(79.4183);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon, halfPi, pi, sign, sqrt } from \"./math.js\";\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [sign(lambda) * halfPi * x1, sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)];\n}\n\nvanDerGrinten4Raw.invert = function (x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  y /= pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = 2 * y,\n      i = 50;\n\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta > epsilon && --i > 0);\n\n  return [sign(x) * (sqrt(D * D + 4) + D) * pi / 4, halfPi * B];\n};\n\nexport default function () {\n  return projection(vanDerGrinten4Raw).scale(127.16);\n}","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { acos, asin, atan2, cos, degrees, epsilon, halfPi, max, min, pi, radians, sin, sqrt, tan } from \"./math.js\";\n\nfunction wagnerFormula(cx, cy, m1, m2, n) {\n  function forward(lambda, phi) {\n    var s = m1 * sin(m2 * phi),\n        c0 = sqrt(1 - s * s),\n        c1 = sqrt(2 / (1 + c0 * cos(lambda *= n)));\n    return [cx * c0 * c1 * sin(lambda), cy * s * c1];\n  }\n\n  forward.invert = function (x, y) {\n    var t1 = x / cx,\n        t2 = y / cy,\n        p = sqrt(t1 * t1 + t2 * t2),\n        c = 2 * asin(p / 2);\n    return [atan2(x * tan(c), cx * p) / n, p && asin(y * sin(c) / (cy * m1 * p)) / m2];\n  };\n\n  return forward;\n}\n\nexport function wagnerRaw(poleline, parallels, inflation, ratio) {\n  // 60 is always used as reference parallel\n  var phi1 = pi / 3; // sanitizing the input values\n  // poleline and parallels may approximate but never equal 0\n\n  poleline = max(poleline, epsilon);\n  parallels = max(parallels, epsilon); // poleline must be <= 90; parallels may approximate but never equal 180\n\n  poleline = min(poleline, halfPi);\n  parallels = min(parallels, pi - epsilon); // 0 <= inflation <= 99.999\n\n  inflation = max(inflation, 0);\n  inflation = min(inflation, 100 - epsilon); // ratio > 0.\n  // sensible values, i.e. something that renders a map which still can be\n  // recognized as world map, are e.g. 20 <= ratio <= 1000.\n\n  ratio = max(ratio, epsilon); // convert values from boehm notation\n  // areal inflation e.g. from 0 to 1 or 20 to 1.2:\n\n  var vinflation = inflation / 100 + 1; // axial ratio e.g. from 200 to 2:\n\n  var vratio = ratio / 100; // the other ones are a bit more complicated...\n\n  var m2 = acos(vinflation * cos(phi1)) / phi1,\n      m1 = sin(poleline) / sin(m2 * halfPi),\n      n = parallels / pi,\n      k = sqrt(vratio * sin(poleline / 2) / sin(parallels / 2)),\n      cx = k / sqrt(n * m1 * m2),\n      cy = 1 / (k * sqrt(n * m1 * m2));\n  return wagnerFormula(cx, cy, m1, m2, n);\n}\nexport default function wagner() {\n  // default values generate wagner8\n  var poleline = 65 * radians,\n      parallels = 60 * radians,\n      inflation = 20,\n      ratio = 200,\n      mutate = projectionMutator(wagnerRaw),\n      projection = mutate(poleline, parallels, inflation, ratio);\n\n  projection.poleline = function (_) {\n    return arguments.length ? mutate(poleline = +_ * radians, parallels, inflation, ratio) : poleline * degrees;\n  };\n\n  projection.parallels = function (_) {\n    return arguments.length ? mutate(poleline, parallels = +_ * radians, inflation, ratio) : parallels * degrees;\n  };\n\n  projection.inflation = function (_) {\n    return arguments.length ? mutate(poleline, parallels, inflation = +_, ratio) : inflation;\n  };\n\n  projection.ratio = function (_) {\n    return arguments.length ? mutate(poleline, parallels, inflation, ratio = +_) : ratio;\n  };\n\n  return projection.scale(163.775);\n}\nexport function wagner7() {\n  return wagner().poleline(65).parallels(60).inflation(0).ratio(200).scale(172.633);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { sqrt, pi } from \"./math.js\";\nimport { mollweideBromleyRaw } from \"./mollweide.js\";\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\nexport default function () {\n  return projection(wagner4Raw).scale(176.84);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { pi, sqrt } from \"./math.js\";\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function (x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function () {\n  return projection(wagner6Raw).scale(152.63);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { asin, atan2, cos, sin, sqrt } from \"./math.js\";\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [sinLambda * cosPhi - cosLambda * sin1_Phi, -cosLambda * cosPhi - sinLambda * sin1_Phi];\n}\n\nwiechelRaw.invert = function (x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [atan2(k * b, D * (1 + w)), D ? -asin(k * a / D) : 0];\n};\n\nexport default function () {\n  return projection(wiechelRaw).rotate([0, -90, 45]).scale(124.75).clipAngle(180 - 1e-3);\n}","import { geoProjection as projection } from \"d3-geo\";\nimport { aitoffRaw } from \"./aitoff.js\";\nimport { halfPi, epsilon, sin, cos, sqrt, abs, acos } from \"./math.js\";\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [(coordinates[0] + lambda / halfPi) / 2, (coordinates[1] + phi) / 2];\n}\n\nwinkel3Raw.invert = function (x, y) {\n  var lambda = x,\n      phi = y,\n      i = 25;\n\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n\n  return [lambda, phi];\n};\n\nexport default function () {\n  return projection(winkel3Raw).scale(158.837);\n}","export { default as geoAiry, airyRaw as geoAiryRaw } from \"./airy\";\nexport { default as geoAitoff, aitoffRaw as geoAitoffRaw } from \"./aitoff\";\nexport { default as geoArmadillo, armadilloRaw as geoArmadilloRaw } from \"./armadillo\";\nexport { default as geoAugust, augustRaw as geoAugustRaw } from \"./august\";\nexport { default as geoBaker, bakerRaw as geoBakerRaw } from \"./baker\";\nexport { default as geoBerghaus, berghausRaw as geoBerghausRaw } from \"./berghaus\";\nexport { default as geoBertin1953, bertin1953Raw as geoBertin1953Raw } from \"./bertin\";\nexport { default as geoBoggs, boggsRaw as geoBoggsRaw } from \"./boggs\";\nexport { default as geoBonne, bonneRaw as geoBonneRaw } from \"./bonne\";\nexport { default as geoBottomley, bottomleyRaw as geoBottomleyRaw } from \"./bottomley\";\nexport { default as geoBromley, bromleyRaw as geoBromleyRaw } from \"./bromley\";\nexport { default as geoChamberlin, chamberlinRaw as geoChamberlinRaw, chamberlinAfrica as geoChamberlinAfrica } from \"./chamberlin\";\nexport { default as geoCollignon, collignonRaw as geoCollignonRaw } from \"./collignon\";\nexport { default as geoCraig, craigRaw as geoCraigRaw } from \"./craig\";\nexport { default as geoCraster, crasterRaw as geoCrasterRaw } from \"./craster\";\nexport { default as geoCylindricalEqualArea, cylindricalEqualAreaRaw as geoCylindricalEqualAreaRaw } from \"./cylindricalEqualArea\";\nexport { default as geoCylindricalStereographic, cylindricalStereographicRaw as geoCylindricalStereographicRaw } from \"./cylindricalStereographic\";\nexport { default as geoEckert1, eckert1Raw as geoEckert1Raw } from \"./eckert1.js\";\nexport { default as geoEckert2, eckert2Raw as geoEckert2Raw } from \"./eckert2.js\";\nexport { default as geoEckert3, eckert3Raw as geoEckert3Raw } from \"./eckert3.js\";\nexport { default as geoEckert4, eckert4Raw as geoEckert4Raw } from \"./eckert4.js\";\nexport { default as geoEckert5, eckert5Raw as geoEckert5Raw } from \"./eckert5.js\";\nexport { default as geoEckert6, eckert6Raw as geoEckert6Raw } from \"./eckert6.js\";\nexport { default as geoEisenlohr, eisenlohrRaw as geoEisenlohrRaw } from \"./eisenlohr.js\";\nexport { default as geoFahey, faheyRaw as geoFaheyRaw } from \"./fahey.js\";\nexport { default as geoFoucaut, foucautRaw as geoFoucautRaw } from \"./foucaut.js\";\nexport { default as geoFoucautSinusoidal, foucautSinusoidalRaw as geoFoucautSinusoidalRaw } from \"./foucautSinusoidal.js\";\nexport { default as geoGilbert } from \"./gilbert.js\";\nexport { default as geoGingery, gingeryRaw as geoGingeryRaw } from \"./gingery.js\";\nexport { default as geoGinzburg4, ginzburg4Raw as geoGinzburg4Raw } from \"./ginzburg4.js\";\nexport { default as geoGinzburg5, ginzburg5Raw as geoGinzburg5Raw } from \"./ginzburg5.js\";\nexport { default as geoGinzburg6, ginzburg6Raw as geoGinzburg6Raw } from \"./ginzburg6.js\";\nexport { default as geoGinzburg8, ginzburg8Raw as geoGinzburg8Raw } from \"./ginzburg8.js\";\nexport { default as geoGinzburg9, ginzburg9Raw as geoGinzburg9Raw } from \"./ginzburg9.js\";\nexport { default as geoGringorten, gringortenRaw as geoGringortenRaw } from \"./gringorten.js\";\nexport { default as geoGuyou, guyouRaw as geoGuyouRaw } from \"./guyou.js\";\nexport { default as geoHammer, hammerRaw as geoHammerRaw } from \"./hammer.js\";\nexport { default as geoHammerRetroazimuthal, hammerRetroazimuthalRaw as geoHammerRetroazimuthalRaw } from \"./hammerRetroazimuthal.js\";\nexport { default as geoHealpix, healpixRaw as geoHealpixRaw } from \"./healpix.js\";\nexport { default as geoHill, hillRaw as geoHillRaw } from \"./hill.js\";\nexport { default as geoHomolosine, homolosineRaw as geoHomolosineRaw } from \"./homolosine.js\";\nexport { default as geoHufnagel, hufnagelRaw as geoHufnagelRaw } from \"./hufnagel.js\";\nexport { default as geoHyperelliptical, hyperellipticalRaw as geoHyperellipticalRaw } from \"./hyperelliptical\";\nexport { default as geoInterrupt } from \"./interrupted/index\";\nexport { default as geoInterruptedBoggs } from \"./interrupted/boggs\";\nexport { default as geoInterruptedHomolosine } from \"./interrupted/homolosine\";\nexport { default as geoInterruptedMollweide } from \"./interrupted/mollweide\";\nexport { default as geoInterruptedMollweideHemispheres } from \"./interrupted/mollweideHemispheres\";\nexport { default as geoInterruptedSinuMollweide } from \"./interrupted/sinuMollweide\";\nexport { default as geoInterruptedSinusoidal } from \"./interrupted/sinusoidal\";\nexport { default as geoKavrayskiy7, kavrayskiy7Raw as geoKavrayskiy7Raw } from \"./kavrayskiy7.js\";\nexport { default as geoLagrange, lagrangeRaw as geoLagrangeRaw } from \"./lagrange.js\";\nexport { default as geoLarrivee, larriveeRaw as geoLarriveeRaw } from \"./larrivee\";\nexport { default as geoLaskowski, laskowskiRaw as geoLaskowskiRaw } from \"./laskowski\";\nexport { default as geoLittrow, littrowRaw as geoLittrowRaw } from \"./littrow.js\";\nexport { default as geoLoximuthal, loximuthalRaw as geoLoximuthalRaw } from \"./loximuthal.js\";\nexport { default as geoMiller, millerRaw as geoMillerRaw } from \"./miller\";\nexport { default as geoModifiedStereographic, modifiedStereographicRaw as geoModifiedStereographicRaw, modifiedStereographicAlaska as geoModifiedStereographicAlaska, modifiedStereographicGs48 as geoModifiedStereographicGs48, modifiedStereographicGs50 as geoModifiedStereographicGs50, modifiedStereographicMiller as geoModifiedStereographicMiller, modifiedStereographicLee as geoModifiedStereographicLee } from \"./modifiedStereographic\";\nexport { default as geoMollweide, mollweideRaw as geoMollweideRaw } from \"./mollweide\";\nexport { default as geoMtFlatPolarParabolic, mtFlatPolarParabolicRaw as geoMtFlatPolarParabolicRaw } from \"./mtFlatPolarParabolic\";\nexport { default as geoMtFlatPolarQuartic, mtFlatPolarQuarticRaw as geoMtFlatPolarQuarticRaw } from \"./mtFlatPolarQuartic\";\nexport { default as geoMtFlatPolarSinusoidal, mtFlatPolarSinusoidalRaw as geoMtFlatPolarSinusoidalRaw } from \"./mtFlatPolarSinusoidal\";\nexport { geoNaturalEarth1 as geoNaturalEarth, geoNaturalEarth1Raw as geoNaturalEarthRaw } from \"d3-geo\"; // DEPRECATED moved to d3-geo\n\nexport { default as geoNaturalEarth2, naturalEarth2Raw as geoNaturalEarth2Raw } from \"./naturalEarth2\";\nexport { default as geoNellHammer, nellHammerRaw as geoNellHammerRaw } from \"./nellHammer\";\nexport { default as geoInterruptedQuarticAuthalic } from \"./interrupted/quarticAuthalic\";\nexport { default as geoNicolosi, nicolosiRaw as geoNicolosiRaw } from \"./nicolosi\";\nexport { default as geoPatterson, pattersonRaw as geoPattersonRaw } from \"./patterson\";\nexport { default as geoPolyconic, polyconicRaw as geoPolyconicRaw } from \"./polyconic\";\nexport { default as geoPolyhedral } from \"./polyhedral/index.js\";\nexport { default as geoPolyhedralButterfly } from \"./polyhedral/butterfly.js\";\nexport { default as geoPolyhedralCollignon } from \"./polyhedral/collignon.js\";\nexport { default as geoPolyhedralWaterman } from \"./polyhedral/waterman.js\";\nexport { default as geoProject } from \"./project/index\";\nexport { default as geoGringortenQuincuncial } from \"./quincuncial/gringorten.js\";\nexport { default as geoPeirceQuincuncial } from \"./quincuncial/peirce.js\";\nexport { default as geoPierceQuincuncial } from \"./quincuncial/peirce.js\"; // DEPRECATED misspelling\n\nexport { default as geoQuantize } from \"./quantize\";\nexport { default as geoQuincuncial } from \"./quincuncial/index.js\";\nexport { default as geoRectangularPolyconic, rectangularPolyconicRaw as geoRectangularPolyconicRaw } from \"./rectangularPolyconic\";\nexport { default as geoRobinson, robinsonRaw as geoRobinsonRaw } from \"./robinson\";\nexport { default as geoSatellite, satelliteRaw as geoSatelliteRaw } from \"./satellite\";\nexport { default as geoSinuMollweide, sinuMollweideRaw as geoSinuMollweideRaw } from \"./sinuMollweide\";\nexport { default as geoSinusoidal, sinusoidalRaw as geoSinusoidalRaw } from \"./sinusoidal\";\nexport { default as geoStitch } from \"./stitch\";\nexport { default as geoTimes, timesRaw as geoTimesRaw } from \"./times\";\nexport { default as geoTwoPointAzimuthal, twoPointAzimuthalRaw as geoTwoPointAzimuthalRaw, twoPointAzimuthalUsa as geoTwoPointAzimuthalUsa } from \"./twoPointAzimuthal\";\nexport { default as geoTwoPointEquidistant, twoPointEquidistantRaw as geoTwoPointEquidistantRaw, twoPointEquidistantUsa as geoTwoPointEquidistantUsa } from \"./twoPointEquidistant\";\nexport { default as geoVanDerGrinten, vanDerGrintenRaw as geoVanDerGrintenRaw } from \"./vanDerGrinten\";\nexport { default as geoVanDerGrinten2, vanDerGrinten2Raw as geoVanDerGrinten2Raw } from \"./vanDerGrinten2\";\nexport { default as geoVanDerGrinten3, vanDerGrinten3Raw as geoVanDerGrinten3Raw } from \"./vanDerGrinten3\";\nexport { default as geoVanDerGrinten4, vanDerGrinten4Raw as geoVanDerGrinten4Raw } from \"./vanDerGrinten4\";\nexport { default as geoWagner, wagner7 as geoWagner7, wagnerRaw as geoWagnerRaw } from \"./wagner.js\";\nexport { default as geoWagner4, wagner4Raw as geoWagner4Raw } from \"./wagner4.js\";\nexport { default as geoWagner6, wagner6Raw as geoWagner6Raw } from \"./wagner6.js\";\nexport { default as geoWiechel, wiechelRaw as geoWiechelRaw } from \"./wiechel.js\";\nexport { default as geoWinkel3, winkel3Raw as geoWinkel3Raw } from \"./winkel3\";"],"sourceRoot":""}