{"version":3,"sources":["components/Blog/posts/LearnD3/LearnD3Geo.jsx","components/_ui/Expandy/Expandy.jsx","components/_ui/InlineExpandy/InlineExpandy.jsx"],"names":["LearnD3Geo","_ref","onScrollToSectionLocal","_useState","useState","_useState2","Object","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","className","_LearnD3__WEBPACK_IMPORTED_MODULE_17__","repo","builtInProjections","length","components_ui_List_List__WEBPACK_IMPORTED_MODULE_15__","items","Fragment","geoProjectionProjections","geoPolygonProjections","GeoExampleSelect","GeoExampleCycle","projections","exampleProjections","components_ui_Aside_Aside__WEBPACK_IMPORTED_MODULE_9__","components_ui_Link_Link__WEBPACK_IMPORTED_MODULE_13__","to","hasNumbers","id","concat","sphere","type","GeoExample","_ref2","_ref2$projectionName","projectionName","uniqueId","clipPathId","_useState3","_useState4","height","setHeight","_useState5","_useState6","countryPaths","setCountryPaths","_useState7","_useState8","earthPath","setEarthPath","_useState9","_useState10","graticulePath","setGraticulePath","_React$useTransition","React","useTransition","_React$useTransition2","isPending","startTransition","useEffect","parsedProjectionName","split","currentProjection","d3","d3GeoProjection","d3GeoPolygon","projection","fitSize","pathGenerator","_pathGenerator$bounds","bounds","_pathGenerator$bounds2","_pathGenerator$bounds3","_pathGenerator$bounds4","countryShapes","features","map","country","key","properties","su_a3","name","name_long","path","e","console","log","viewBox","style","transition","opacity","transform","d","clipPath","_ref3","projectionOptions","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","value","label","_useState11","_useState12","setProjectionName","onProjectionNameDiff","diff","arguments","undefined","newIndex","findIndex","_ref4","components_ui_Button_Button__WEBPACK_IMPORTED_MODULE_10__","onClick","components_ui_Icon_Icon__WEBPACK_IMPORTED_MODULE_14__","direction","react_select__WEBPACK_IMPORTED_MODULE_8__","options","find","onChange","newProjectionName","_ref5","Expandy","trigger","triggerExpandText","doHideIfCollapsed","children","props","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isExpanded","setIsExpanded","ref","useRef","assign","onToggle","target","open","components_ui_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_4__","contents","components_ui_Icon_Icon__WEBPACK_IMPORTED_MODULE_3__","size","InlineExpandy","description"],"mappings":"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","file":"static/js/57.50d6a423.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\"\nimport { Twemoji } from \"react-emoji-render\"\nimport * as d3 from \"d3\"\nimport * as d3GeoProjection from \"d3-geo-projection\"\nimport * as d3GeoPolygon from \"d3-geo-polygon\"\nimport { uniqueId } from \"lodash\"\nimport Select from 'react-select';\n\nimport Aside from \"components/_ui/Aside/Aside\"\nimport Button from \"components/_ui/Button/Button\"\nimport Expandy from \"components/_ui/Expandy/Expandy\"\nimport InlineExpandy from \"components/_ui/InlineExpandy/InlineExpandy\"\nimport Link from \"components/_ui/Link/Link\"\nimport Icon from \"components/_ui/Icon/Icon\"\nimport List from \"components/_ui/List/List\"\nimport Code from \"components/_ui/Code/Code\"\nimport { DocsLink, ReadMore, P } from \"./LearnD3\"\nimport bookImage from \"images/book.png\";\nimport countryShapes from \"./countries.json\"\nimport { useInterval } from \"utils/utils\"\n\nconst numberOfDataPoints = 4\nconst LearnD3Geo = ({ onScrollToSectionLocal }) => {\n  const [initialProjection, setInitialProjection] = useState(null)\n\n    return (\n        <div className=\"LearnD3Geo\">\n            <p>\n              Drawing maps and globes is a topic that you could spend a lifetime exploring - you can tell how much there is to learn by th size of these d3 modules. Before drawing any map, we should understand the basics, but thankfully <DocsLink repo=\"geo\" /> is here to do most of the heavy lifting for us.\n            </p>\n\n            {/* <Code size=\"s\" fileName=\"data.json\">\n            </Code> */}\n\n\n            <h3>d3-geo</h3>\n\n            <p>\n              Because our goal is to represent a 3d sphere (Earth) onto a 2d plane (a computer screen), we’re going to have to decide on a set of rules for how to handle the transformation. This set of rules is called a <b>projection</b>.\n            </p>\n\n            <p>\n              Part of the reason that <DocsLink repo=\"geo\" /> is so large (it’s the largest module in the core build) is because it contains {builtInProjections.length} projections.\n            </p>\n\n            <p>\n              There are even two d3 modules that aren’t in the core build that provide extra projections:\n            </p>\n\n            <List items={[\n              <><DocsLink repo=\"geo-projection\" />\n              <p>the <i>largest</i> d3 module, adding {geoProjectionProjections.length} projections</p>\n              </>,\n              <><DocsLink repo=\"geo-polygon\" />\n              <p>a d3 module that handles spherical polygons, adding {geoPolygonProjections.length} projections</p>\n              </>,\n            ]} />\n\n            <p>\n              Change the projection in the dropdown below to see how they differ.\n            </p>\n\n            <GeoExampleSelect />\n\n            <p>\n              As you can see, things get pretty wild! Here are a few of the crazier examples:\n            </p>\n\n            <GeoExampleCycle projections={exampleProjections} />\n\n            <Aside>\n              Want to learn more about geographic projections? <Link to=\"https://mercator.tass.com/ancient-maps\">Here’s a great article</Link> that covers the history of Mercator, and <Link to=\"https://www.atlasandboots.com/map-projections/\">another article</Link> that covers a few common projections.\n            </Aside>\n\n            <p>\n              When creating a map with <DocsLink repo=\"geo\" />, you’ll want to be familiar with two concepts:\n            </p>\n\n            <List items={[\n              \"importing the geographic shapes\",\n              \"projecting those shapes onto the world\",\n            ]} hasNumbers />\n\n            <p>\n              <DocsLink repo=\"geo\" /> has a <DocsLink repo=\"geo\" id=\"geoPath\" /> method that will take a <b>d3 projection</b> and create a <b>path generator</b>. We can then take our <b>path generator</b> and use it to transform our geographic shapes into a <P>{`<path>`}</P>’s <P>d</P> attribute string.\n            </p>\n\n            <Aside>\n              For a nice getting started guide of drawing a map, check out <Link to=\"https://bost.ocks.org/mike/map/\">Mike Bostock’s Let’s Make a Map article</Link>.\n            </Aside>\n\n        </div>\n    )\n}\n\nexport default LearnD3Geo\n\n\nconst builtInProjections = [ \"geoAzimuthalEqualArea\", \"geoAzimuthalEquidistant\", \"geoGnomonic\", \"geoOrthographic\", \"geoStereographic\", \"geoEqualEarth\", \"geoAlbersUsa\", \"geoAlbers\", \"geoConicConformal\", \"geoConicEqualArea\", \"geoConicEquidistant\", \"geoEquirectangular\", \"geoMercator\", \"geoTransverseMercator\", \"geoNaturalEarth1\", ]\nconst geoProjectionProjections = [ \"geoAiry\", \"geoAitoff\", \"geoArmadillo\", \"geoAugust\", \"geoBaker\", \"geoBerghaus\", \"geoBertin1953\", \"geoBoggs\", \"geoBonne\", \"geoBottomley\", \"geoBromley\", \"geoChamberlin\", \"geoChamberlinAfrica\", \"geoCollignon\", \"geoCraig\", \"geoCraster\", \"geoCylindricalEqualArea\", \"geoCylindricalStereographic\", \"geoEckert1\", \"geoEckert2\", \"geoEckert3\", \"geoEckert4\", \"geoEckert5\", \"geoEckert6\", \"geoEisenlohr\", \"geoFahey\", \"geoFoucaut\", \"geoFoucautSinusoidal\", \"geoGilbert\", \"geoGingery\", \"geoGinzburg4\", \"geoGinzburg5\", \"geoGinzburg6\", \"geoGinzburg8\", \"geoGinzburg9\", \"geoGringorten\", \"geoGuyou\", \"geoHammer\", \"geoHammerRetroazimuthal\", \"geoHealpix\", \"geoHill\", \"geoHomolosine\", \"geoHufnagel\", \"geoHyperelliptical\", \"geoKavrayskiy7\", \"geoLagrange\", \"geoLarrivee\", \"geoLaskowski\", \"geoLittrow\", \"geoLoximuthal\", \"geoMiller\", \"geoModifiedStereographic\", \"geoModifiedStereographicAlaska\", \"geoModifiedStereographicGs48\", \"geoModifiedStereographicGs50\", \"geoModifiedStereographicMiller\", \"geoModifiedStereographicLee\", \"geoMollweide\", \"geoMtFlatPolarParabolic\", \"geoMtFlatPolarQuartic\", \"geoMtFlatPolarSinusoidal\", \"geoNaturalEarth2\", \"geoNellHammer\", \"geoNicolosi\", \"geoPatterson\", \"geoPolyconic\", \"geoRectangularPolyconic\", \"geoRobinson\", \"geoSatellite\", \"geoSinusoidal\", \"geoSinuMollweide\", \"geoTimes\", \"geoTwoPointAzimuthal\", \"geoTwoPointAzimuthalUsa\", \"geoTwoPointEquidistant\", \"geoTwoPointEquidistantUsa\", \"geoVanDerGrinten\", \"geoVanDerGrinten2\", \"geoVanDerGrinten3\", \"geoVanDerGrinten4\", \"geoWagner\", \"geoWagner4\", \"geoWagner6\", \"geoWagner7\", \"geoWiechel\", \"geoWinkel3\", \"geoInterrupt\", \"geoInterruptedHomolosine\", \"geoInterruptedSinusoidal\", \"geoInterruptedBoggs\", \"geoInterruptedSinuMollweide\", \"geoInterruptedMollweide\", \"geoInterruptedMollweideHemispheres\", \"geoPolyhedral\", \"geoPolyhedralButterfly\", \"geoPolyhedralCollignon\", \"geoPolyhedralWaterman\", \"geoQuincuncial\", \"geoGringortenQuincuncial\", \"geoPeirceQuincuncial\", ]\nconst geoPolygonProjections = [\"geoCubic\", \"geoDodecahedral\", \"geoIcosahedral\", \"geoAirocean\", \"geoCahillKeyes\", \"geoImago\", \"geoTetrahedralLee\", \"geoCox\", ]\nconst projections = [\n  ...builtInProjections,\n  ...geoProjectionProjections,\n  ...geoPolygonProjections,\n]\nconst exampleProjections = [\n  \"geoGringortenQuincuncial (d3-geo-projection)\",\n  \"geoModifiedStereographicGs50 (d3-geo-projection)\",\n  \"geoInterruptedMollweide (d3-geo-projection)\",\n  \"geoHealpix (d3-geo-projection)\",\n  \"geoBerghaus (d3-geo-projection)\",\n  \"geoGingery (d3-geo-projection)\",\n]\n\n\nconst width = 500\nconst maxHeight = 500\nconst sphere = ({type: \"Sphere\"})\nconst GeoExample = ({ projectionName=\"geoMercator\" }) => {\n  const id = uniqueId()\n  const clipPathId = `GeoExample__clip-${id}`\n  const [height, setHeight] = useState(maxHeight)\n  const [countryPaths, setCountryPaths] = useState([])\n  const [earthPath, setEarthPath] = useState(\"\")\n  const [graticulePath, setGraticulePath] = useState(\"\")\n  const [isPending, startTransition] = React.useTransition()\n\n  useEffect(() => {\n    try {\n      startTransition(() => {\n        const parsedProjectionName = projectionName.split(\" (\")[0]\n        const currentProjection = d3[parsedProjectionName]\n          || d3GeoProjection[parsedProjectionName]\n          || d3GeoPolygon[parsedProjectionName]\n        if (!currentProjection) return {}\n\n        const projection = currentProjection()\n          .fitSize([width, maxHeight], sphere)\n\n        const pathGenerator = d3.geoPath(projection)\n        const earthPath = pathGenerator(sphere)\n        const graticulePath = pathGenerator(d3.geoGraticule10())\n        const [[x0, y0], [x1, y1]] = pathGenerator.bounds(sphere)\n        const height = y1\n        const countryPaths = countryShapes.features.map(country => ({\n          key: country.properties.su_a3,\n          name: country.properties.name_long,\n          path: pathGenerator(country),\n        }))\n\n        setHeight(height)\n        setCountryPaths(countryPaths)\n        setEarthPath(earthPath)\n        setGraticulePath(graticulePath)\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }, [startTransition, projectionName])\n\n  return (\n    <div className=\"GeoExample\">\n      <svg viewBox={`0 0 ${width} ${maxHeight}`} style={{\n        transition: \"opacity 0.3s ease-out\",\n        opacity: isPending ? 0.5 : 1,\n      }}>\n        <g transform={`translate(0, ${(maxHeight - height) / 2})`}>\n          <clipPath id={clipPathId}>\n            <path d={earthPath} />\n          </clipPath>\n          <path className=\"GeoExample__earth\" d={earthPath} />\n          <path className=\"GeoExample__graticules\" d={graticulePath} clipPath={`url(#${clipPathId})`} />\n\n          <g className=\"GeoExample__countries\">\n            {countryPaths.map(({key, name, path}) => (\n              <path\n                key={key}\n                className=\"GeoExample__country\"\n                d={path}\n                clipPath={`url(#${clipPathId})`}\n              >\n                <title>{ name }</title>\n              </path>\n            ))}\n          </g>\n        </g>\n      </svg>\n    </div>\n  )\n}\n\n\nconst projectionOptions = [\n  ...builtInProjections.map(d => ({ value: d, label: `${d}`})),\n  ...geoProjectionProjections.map(d => ({ value: d, label: `${d} (d3-geo-projection)`})),\n  ...geoPolygonProjections.map(d => ({ value: d, label: `${d} (d3-geo-polygon)`})),\n]\nconst GeoExampleSelect = () => {\n  const [projectionName, setProjectionName] = useState(\"geoMercator\")\n\n  const onSetProjectionName = newProjectionName => {\n    React.startTransition(() => {\n      setProjectionName(newProjectionName.value)\n    })\n  }\n\n  const onProjectionNameDiff = (diff = 1) => {\n    const projectionNameIndex = projectionOptions.findIndex(({value}) => value === projectionName)\n    const newIndex = (projectionNameIndex + diff) % projectionOptions.length\n    setProjectionName(projectionOptions[newIndex].value)\n  }\n\n  return (\n    <div className=\"GeoExampleSelect\">\n      <div className=\"GeoExampleSelect__controls\">\n        <Button onClick={() => onProjectionNameDiff(-1)}>\n          <Icon name=\"arrow\" direction=\"w\" />\n        </Button>\n        <div className=\"GeoExampleSelect__select\">\n          <Select\n            name=\"countries\"\n            options={projectionOptions}\n            value={projectionOptions.find(d => d.value === projectionName)}\n            onChange={onSetProjectionName}\n            />\n        </div>\n        <Button onClick={() => onProjectionNameDiff(1)}>\n          <Icon name=\"arrow\" direction=\"e\" />\n        </Button>\n      </div>\n\n      <GeoExample {...{projectionName}} />\n    </div>\n  )\n}\n\n\nconst GeoExampleCycle = ({ projections }) => {\n\n  return (\n    <div className=\"GeoExampleCycle\">\n      {projections.map(projection => (\n        <div className=\"GeoExampleCycle__item\" key={projection}>\n          <b>{ projection.split(\" (\")[0] }</b>\n          <GeoExample projectionName={projection} />\n        </div>\n      ))}\n    </div>\n  )\n}\n","import React, { useState, useRef } from 'react'\nimport Icon from \"components/_ui/Icon/Icon\";\nimport Tooltip from \"components/_ui/Tooltip/Tooltip\";\nimport { scrollTo } from \"utils.js\"\n\nimport './Expandy.scss';\n\nconst Expandy = ({ trigger, triggerExpandText, doHideIfCollapsed=false, className, children, ...props }) => {\n    const [isExpanded, setIsExpanded] = useState(false)\n    const ref = useRef()\n\n    // const onToggleExpanded = () => {\n    //     setIsExpanded(!isExpanded)\n\n    //     if (isExpanded) {\n    //         const top = ref.current.getBoundingClientRect().top\n    //         if (top > window.innerHeight * 0.3) return\n    //         const y = top\n    //             + window.scrollY\n    //             - window.innerHeight * 0.3\n    //         scrollTo(y, 600)\n    //     }\n    // }\n\n    return (\n        <details className={`Expandy Expandy--is-${isExpanded ? \"expanded\" : \"collapsed\"} ${className}`} {...props} ref={ref}\n            onToggle={e => {\n                const isExpanded = e.target.open\n                setIsExpanded(isExpanded)\n        }}>\n            <summary>\n            <div className=\"Expandy__trigger button-no-appearance\" >\n                <div className=\"Expandy__trigger__text\">\n                    <b>{ trigger }</b>\n                    <div className=\"Expandy__trigger__info\">\n                        { triggerExpandText || `tap me ${isExpanded ? \"to hide\" : \"for more\" } details` }\n                    </div>\n                </div>\n                <div className=\"Expandy__trigger__mark\">ἰ</div>\n            </div>\n\n            <Tooltip\n                className=\"Expandy__toggle\"\n                contents={<button className=\"button-no-appearance\">{isExpanded ? \"Collapse me\" : \"Expand me\"}</button>}\n                >\n                <div className=\"Expandy__toggle__arrow Expandy__toggle__arrow--up\">\n                    <Icon name=\"arrow\" direction=\"n\" size=\"s\" />\n                </div>\n                <div className=\"Expandy__toggle__arrow Expandy__toggle__arrow--down\">\n                    <Icon name=\"arrow\" direction=\"s\" size=\"s\" />\n                </div>\n                </Tooltip>\n                </summary>\n            <div className=\"Expandy__contents\">\n                {children }\n            </div>\n        </details>\n    )\n}\n\nexport default Expandy\n","import React, { useState, useRef } from 'react'\nimport Icon from \"components/_ui/Icon/Icon\"\n\nimport './InlineExpandy.scss';\n\nconst InlineExpandy = ({ description, className, children, ...props }) => {\n    const [isExpanded, setIsExpanded] = useState(false)\n\n    const onToggleExpanded = () => {\n        setIsExpanded(!isExpanded)\n    }\n\n    return (\n        <div className={`InlineExpandy InlineExpandy--is-${isExpanded ? \"expanded\" : \"collapsed\"} ${className}`} {...props}>\n            <div className=\"InlineExpandy__trigger\" onClick={onToggleExpanded}>\n                { isExpanded ? \"Hide\" : \"Show\" } { description }...\n            </div>\n\n            {isExpanded && (\n                <div className=\"InlineExpandy__contents\">\n                    { children }\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default InlineExpandy\n"],"sourceRoot":""}