{"version":3,"sources":["components/Articles/Fishing/countryCodes.js","components/Articles/Fishing/Fishing.jsx","../node_modules/numeral/numeral.js","components/_ui/RadioGroup/RadioGroup.jsx"],"names":["countryCodes","ABW","AFG","AGO","AIA","ALA","ALB","AND","ARE","ARG","ARM","ASM","ATA","ATF","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BES","BFA","BGD","BGR","BHR","BHS","BIH","BLM","BLR","BLZ","BMU","BOL","BRA","BRB","BRN","BTN","BVT","BWA","CAF","CAN","CCK","CHE","CHL","CHN","CIV","CMR","COD","COG","COK","COL","COM","CPV","CRI","CUB","CUW","CXR","CYM","CYP","CZE","DEU","DJI","DMA","DNK","DOM","DZA","ECU","EGY","ERI","ESH","ESP","EST","ETH","FIN","FJI","FLK","FRA","FRO","FSM","GAB","GBR","GEO","GGY","GHA","GIB","GIN","GLP","GMB","GNB","GNQ","GRC","GRD","GRL","GTM","GUF","GUM","GUY","HKG","HMD","HND","HRV","HTI","HUN","IDN","IMN","IND","IOT","IRL","IRN","IRQ","ISL","ISR","ITA","JAM","JEY","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KNA","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LIE","LKA","LSO","LTU","LUX","LVA","MAC","MAF","MAR","MCO","MDA","MDG","MDV","MEX","MHL","MKD","MLI","MLT","MMR","MNE","MNG","MNP","MOZ","MRT","MSR","MTQ","MUS","MWI","MYS","MYT","NAM","NCL","NER","NFK","NGA","NIC","NIU","NLD","NOR","NPL","NRU","NZL","OMN","PAK","PAN","PCN","PER","PHL","PLW","PNG","POL","PRI","PRK","PRT","PRY","PSE","PYF","QAT","REU","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SGS","SHN","SJM","SLB","SLE","SLV","SMR","SOM","SPM","SRB","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SXM","SYC","SYR","TCA","TCD","TGO","THA","TJK","TKL","TKM","TLS","TON","TTO","TUN","TUR","TUV","TWN","TZA","UGA","UKR","UMI","URY","USA","UZB","VAT","VCT","VEN","VGB","VIR","VNM","VUT","WLF","WSM","YEM","ZAF","ZMB","ZWE","ordinalColors","countryColors","_","fromPairs","map","keys","country","i","length","metricOptions","value","label","metricFieldMap","boats","hours","metricTakenFieldMap","metricTotalsFieldMap","metricLabels","metric","parseDate","Fishing","_useState","useState","_useState2","Object","slicedToArray","setMetric","react_default","a","createElement","className","RadioGroup","options","onChange","d","data","slice","name","key","Fishing_FishingCircle","takenMetric","totalsMetric","href","d3","parseMonth","formatMonth","FishingCircle","_ref","radius","dateAccessor","radiusAccessor","_useState3","_useState4","countryData","setCountryData","_useState5","_useState6","takenData","setTakenData","useEffect","newCountryData","values","toCountry","sortBy","padData","newTakenData","dateScale","domain","range","Math","PI","radiusScale","flatMap","nice","dateAccessorScaled","lineGenerator","angle","curve","takenAreaGenerator","topCountries","orderBy","toPairs","width","height","transform","concat","r","ticks","yValue","numeral","format","fill","times","x","cos","y","sin","style","textAnchor","x1","x2","y1","y2","title","background","formatDate","start","end","dates","arguments","undefined","date","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","_numeral","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","Numeral","input","number","this","_input","_value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","roundingFunction","leadingCount","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","abbr","decimal","neg","includes","indexOf","RegExp","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","String","string","abbreviation","stringOriginal","currency","symbol","pow","min","_isNaN","_x","apply","search","insert","subString","reduce","array","callback","TypeError","t","len","k","multiplier","parts","correctionFactor","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","toLowerCase","localeData","Error","reset","property","register","type","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","_format","space","splice","join","base","suffixes","binary","unformatRegex","filter","item","_format2","bytes","suffix","bytesMultiplier","_format3","symbols","before","after","_format4","toExponential","_format5","_format6","_format7","floor","minutes","seconds","timeArray","exports","__webpack_require__","module","require","getOptionValue","option","isObject","areSameValue","_this$props","_this","props","newValue","isMulti","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","renderOption","idx","_this$props2","classNames","RadioGroup__option--selected","react__WEBPACK_IMPORTED_MODULE_5___default","color","onClick","renderClear","_this$props3","canClear","getClassName","Component","defaultProps","noop"],"mappings":"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","file":"static/js/53.9eb3175f.chunk.js","sourcesContent":["export default {\r\n  ABW: \"Aruba\",\r\n  AFG: \"Afghanistan\",\r\n  AGO: \"Angola\",\r\n  AIA: \"Anguilla\",\r\n  ALA: \"Åland Islands\",\r\n  ALB: \"Albania\",\r\n  AND: \"Andorra\",\r\n  ARE: \"United Arab Emirates\",\r\n  ARG: \"Argentina\",\r\n  ARM: \"Armenia\",\r\n  ASM: \"American Samoa\",\r\n  ATA: \"Antarctica\",\r\n  ATF: \"French Southern Territories\",\r\n  ATG: \"Antigua and Barbuda\",\r\n  AUS: \"Australia\",\r\n  AUT: \"Austria\",\r\n  AZE: \"Azerbaijan\",\r\n  BDI: \"Burundi\",\r\n  BEL: \"Belgium\",\r\n  BEN: \"Benin\",\r\n  BES: \"Bonaire, Sint Eustatius and Saba\",\r\n  BFA: \"Burkina Faso\",\r\n  BGD: \"Bangladesh\",\r\n  BGR: \"Bulgaria\",\r\n  BHR: \"Bahrain\",\r\n  BHS: \"Bahamas\",\r\n  BIH: \"Bosnia and Herzegovina\",\r\n  BLM: \"Saint Barthélemy\",\r\n  BLR: \"Belarus\",\r\n  BLZ: \"Belize\",\r\n  BMU: \"Bermuda\",\r\n  BOL: \"Bolivia (Plurinational State of)\",\r\n  BRA: \"Brazil\",\r\n  BRB: \"Barbados\",\r\n  BRN: \"Brunei Darussalam\",\r\n  BTN: \"Bhutan\",\r\n  BVT: \"Bouvet Island\",\r\n  BWA: \"Botswana\",\r\n  CAF: \"Central African Republic\",\r\n  CAN: \"Canada\",\r\n  CCK: \"Cocos (Keeling) Islands\",\r\n  CHE: \"Switzerland\",\r\n  CHL: \"Chile\",\r\n  CHN: \"China\",\r\n  CIV: \"Côte d'Ivoire\",\r\n  CMR: \"Cameroon\",\r\n  COD: \"Congo, Democratic Republic of the\",\r\n  COG: \"Congo\",\r\n  COK: \"Cook Islands\",\r\n  COL: \"Colombia\",\r\n  COM: \"Comoros\",\r\n  CPV: \"Cabo Verde\",\r\n  CRI: \"Costa Rica\",\r\n  CUB: \"Cuba\",\r\n  CUW: \"Curaçao\",\r\n  CXR: \"Christmas Island\",\r\n  CYM: \"Cayman Islands\",\r\n  CYP: \"Cyprus\",\r\n  CZE: \"Czechia\",\r\n  DEU: \"Germany\",\r\n  DJI: \"Djibouti\",\r\n  DMA: \"Dominica\",\r\n  DNK: \"Denmark\",\r\n  DOM: \"Dominican Republic\",\r\n  DZA: \"Algeria\",\r\n  ECU: \"Ecuador\",\r\n  EGY: \"Egypt\",\r\n  ERI: \"Eritrea\",\r\n  ESH: \"Western Sahara\",\r\n  ESP: \"Spain\",\r\n  EST: \"Estonia\",\r\n  ETH: \"Ethiopia\",\r\n  FIN: \"Finland\",\r\n  FJI: \"Fiji\",\r\n  FLK: \"Falkland Islands (Malvinas)\",\r\n  FRA: \"France\",\r\n  FRO: \"Faroe Islands\",\r\n  FSM: \"Micronesia (Federated States of)\",\r\n  GAB: \"Gabon\",\r\n  GBR: \"The United Kingdom\",\r\n  GEO: \"Georgia\",\r\n  GGY: \"Guernsey\",\r\n  GHA: \"Ghana\",\r\n  GIB: \"Gibraltar\",\r\n  GIN: \"Guinea\",\r\n  GLP: \"Guadeloupe\",\r\n  GMB: \"Gambia\",\r\n  GNB: \"Guinea-Bissau\",\r\n  GNQ: \"Equatorial Guinea\",\r\n  GRC: \"Greece\",\r\n  GRD: \"Grenada\",\r\n  GRL: \"Greenland\",\r\n  GTM: \"Guatemala\",\r\n  GUF: \"French Guiana\",\r\n  GUM: \"Guam\",\r\n  GUY: \"Guyana\",\r\n  HKG: \"Hong Kong\",\r\n  HMD: \"Heard Island and McDonald Islands\",\r\n  HND: \"Honduras\",\r\n  HRV: \"Croatia\",\r\n  HTI: \"Haiti\",\r\n  HUN: \"Hungary\",\r\n  IDN: \"Indonesia\",\r\n  IMN: \"Isle of Man\",\r\n  IND: \"India\",\r\n  IOT: \"British Indian Ocean Territory\",\r\n  IRL: \"Ireland\",\r\n  IRN: \"Iran (Islamic Republic of)\",\r\n  IRQ: \"Iraq\",\r\n  ISL: \"Iceland\",\r\n  ISR: \"Israel\",\r\n  ITA: \"Italy\",\r\n  JAM: \"Jamaica\",\r\n  JEY: \"Jersey\",\r\n  JOR: \"Jordan\",\r\n  JPN: \"Japan\",\r\n  KAZ: \"Kazakhstan\",\r\n  KEN: \"Kenya\",\r\n  KGZ: \"Kyrgyzstan\",\r\n  KHM: \"Cambodia\",\r\n  KIR: \"Kiribati\",\r\n  KNA: \"Saint Kitts and Nevis\",\r\n  KOR: \"South Korea\",\r\n  KWT: \"Kuwait\",\r\n  LAO: \"Lao People's Democratic Republic\",\r\n  LBN: \"Lebanon\",\r\n  LBR: \"Liberia\",\r\n  LBY: \"Libya\",\r\n  LCA: \"Saint Lucia\",\r\n  LIE: \"Liechtenstein\",\r\n  LKA: \"Sri Lanka\",\r\n  LSO: \"Lesotho\",\r\n  LTU: \"Lithuania\",\r\n  LUX: \"Luxembourg\",\r\n  LVA: \"Latvia\",\r\n  MAC: \"Macao\",\r\n  MAF: \"Saint Martin (French part)\",\r\n  MAR: \"Morocco\",\r\n  MCO: \"Monaco\",\r\n  MDA: \"Moldova, Republic of\",\r\n  MDG: \"Madagascar\",\r\n  MDV: \"Maldives\",\r\n  MEX: \"Mexico\",\r\n  MHL: \"Marshall Islands\",\r\n  MKD: \"Macedonia, the former Yugoslav Republic of\",\r\n  MLI: \"Mali\",\r\n  MLT: \"Malta\",\r\n  MMR: \"Myanmar\",\r\n  MNE: \"Montenegro\",\r\n  MNG: \"Mongolia\",\r\n  MNP: \"Northern Mariana Islands\",\r\n  MOZ: \"Mozambique\",\r\n  MRT: \"Mauritania\",\r\n  MSR: \"Montserrat\",\r\n  MTQ: \"Martinique\",\r\n  MUS: \"Mauritius\",\r\n  MWI: \"Malawi\",\r\n  MYS: \"Malaysia\",\r\n  MYT: \"Mayotte\",\r\n  NAM: \"Namibia\",\r\n  NCL: \"New Caledonia\",\r\n  NER: \"Niger\",\r\n  NFK: \"Norfolk Island\",\r\n  NGA: \"Nigeria\",\r\n  NIC: \"Nicaragua\",\r\n  NIU: \"Niue\",\r\n  NLD: \"The Netherlands\",\r\n  NOR: \"Norway\",\r\n  NPL: \"Nepal\",\r\n  NRU: \"Nauru\",\r\n  NZL: \"New Zealand\",\r\n  OMN: \"Oman\",\r\n  PAK: \"Pakistan\",\r\n  PAN: \"Panama\",\r\n  PCN: \"Pitcairn\",\r\n  PER: \"Peru\",\r\n  PHL: \"Philippines\",\r\n  PLW: \"Palau\",\r\n  PNG: \"Papua New Guinea\",\r\n  POL: \"Poland\",\r\n  PRI: \"Puerto Rico\",\r\n  PRK: \"Korea (Democratic People's Republic of)\",\r\n  PRT: \"Portugal\",\r\n  PRY: \"Paraguay\",\r\n  PSE: \"Palestine, State of\",\r\n  PYF: \"French Polynesia\",\r\n  QAT: \"Qatar\",\r\n  REU: \"Réunion\",\r\n  ROU: \"Romania\",\r\n  RUS: \"Russia\",\r\n  RWA: \"Rwanda\",\r\n  SAU: \"Saudi Arabia\",\r\n  SDN: \"Sudan\",\r\n  SEN: \"Senegal\",\r\n  SGP: \"Singapore\",\r\n  SGS: \"South Georgia and the South Sandwich Islands\",\r\n  SHN: \"Saint Helena, Ascension and Tristan da Cunha\",\r\n  SJM: \"Svalbard and Jan Mayen\",\r\n  SLB: \"Solomon Islands\",\r\n  SLE: \"Sierra Leone\",\r\n  SLV: \"El Salvador\",\r\n  SMR: \"San Marino\",\r\n  SOM: \"Somalia\",\r\n  SPM: \"Saint Pierre and Miquelon\",\r\n  SRB: \"Serbia\",\r\n  SSD: \"South Sudan\",\r\n  STP: \"Sao Tome and Principe\",\r\n  SUR: \"Suriname\",\r\n  SVK: \"Slovakia\",\r\n  SVN: \"Slovenia\",\r\n  SWE: \"Sweden\",\r\n  SWZ: \"Eswatini\",\r\n  SXM: \"Sint Maarten (Dutch part)\",\r\n  SYC: \"Seychelles\",\r\n  SYR: \"Syrian Arab Republic\",\r\n  TCA: \"Turks and Caicos Islands\",\r\n  TCD: \"Chad\",\r\n  TGO: \"Togo\",\r\n  THA: \"Thailand\",\r\n  TJK: \"Tajikistan\",\r\n  TKL: \"Tokelau\",\r\n  TKM: \"Turkmenistan\",\r\n  TLS: \"Timor-Leste\",\r\n  TON: \"Tonga\",\r\n  TTO: \"Trinidad and Tobago\",\r\n  TUN: \"Tunisia\",\r\n  TUR: \"Turkey\",\r\n  TUV: \"Tuvalu\",\r\n  TWN: \"Taiwan\",\r\n  TZA: \"Tanzania, United Republic of\",\r\n  UGA: \"Uganda\",\r\n  UKR: \"Ukraine\",\r\n  UMI: \"United States Minor Outlying Islands\",\r\n  URY: \"Uruguay\",\r\n  USA: \"United States of America\",\r\n  UZB: \"Uzbekistan\",\r\n  VAT: \"Holy See\",\r\n  VCT: \"Saint Vincent and the Grenadines\",\r\n  VEN: \"Venezuela\",\r\n  VGB: \"Virgin Islands (British)\",\r\n  VIR: \"Virgin Islands (U.S.)\",\r\n  VNM: \"Viet Nam\",\r\n  VUT: \"Vanuatu\",\r\n  WLF: \"Wallis and Futuna\",\r\n  WSM: \"Samoa\",\r\n  YEM: \"Yemen\",\r\n  ZAF: \"South Africa\",\r\n  ZMB: \"Zambia\",\r\n  ZWE: \"Zimbabwe\",\r\n}","import { useState, useEffect } from 'react';\nimport React from \"react\"\nimport numeral from \"numeral\"\nimport * as d3 from \"d3\"\nimport _ from \"lodash\"\nimport RadioGroup from \"components/_ui/RadioGroup/RadioGroup\"\nimport data from \"./data.json\"\nimport countryCodes from \"./countryCodes\"\n\nimport './Fishing.scss';\n\nconst formatNumber = d => numeral(d).format(\"0,0a\")\nconst formatNumberLong = d => numeral(d).format(\"0,0\")\nconst ordinalColors = [\"#c7ecee\", \"#778beb\", \"#f7d794\", \"#63cdda\", \"#cf6a87\", \"#e77f67\", \"#786fa6\", \"#FDA7DF\", \"#4b7bec\", \"#778ca3\"];\nconst countryColors = _.fromPairs(_.map(_.keys(countryCodes), (country, i) => [\n  country,\n  ordinalColors[i % (ordinalColors.length - 1)],\n]))\n\nconst metricOptions = [{\n  value: \"boats\",\n  label: \"Daily number of boats fishing in foreign waters\",\n},{\n  value: \"hours\",\n  label: \"Daily hours of fishing in foreign waters\",\n}]\nconst metricFieldMap = {\n  boats: \"hours_by_day\",\n  hours: \"boats_by_day\",\n}\nconst metricTakenFieldMap = {\n  boats: \"taken_hours\",\n  hours: \"taken_boats\",\n}\nconst metricTotalsFieldMap = {\n  boats: \"total_boats_by_country\",\n  hours: \"total_hours_by_country\",\n}\nconst metricLabels = _.fromPairs(_.map(metricOptions, metric => ([\n  metric.value,\n  metric.label,\n])))\nconst Fishing = () => {\n  // const [sortedAuthors, setSortedAuthors] = useState([])\n  const [metric, setMetric] = useState(\"boats\")\n  const setMetricToValue = d => setMetric(d.value)\n\n  return (\n    <div className=\"Fishing\">\n      <div className=\"Fishing__title-container\">\n        <h2 className=\"Fishing__title\">\n          Global Fishing\n        </h2>\n      </div>\n      <div className=\"Fishing__contents\">\n\n        <RadioGroup\n          options={metricOptions}\n          value={metric}\n          onChange={setMetricToValue}\n        />\n\n\n        <div className=\"Fishing__circles\">\n          {_.map(data.slice(0, 69), d => d.name && (\n            <div className=\"Fishing__circles__item\" key={d.name}>\n              <h6>{ countryCodes[d.name] || d.name }</h6>\n              <div className=\"Fishing__circles__item__description\">\n                { metricLabels[metric] } (2016)\n              </div>\n              <FishingCircle\n                data={d}\n                metric={metricFieldMap[metric]}\n                takenMetric={metricTakenFieldMap[metric]}\n                totalsMetric={metricTotalsFieldMap[metric]}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"Fishing__note\">\n        Data from <a href=\"https://www.olgatsubiks.com/single-post/2019/02/07/Visualizing-global-fishing-to-promote-ocean-sustainability\">Global Fishing Watch</a> which uses AIS tracking devices and other kinds of information to show what's happening in the oceans around the world. They monitor commercial fishing activity and larger boats.\n      </div>\n    </div>\n  )\n}\n\nexport default Fishing\n\n\nconst parseDate = d3.timeParse(\"%m/%d/%Y\")\nconst parseMonth = d3.timeParse(\"%m\")\nconst formatMonth = d3.timeFormat(\"%b\")\nconst FishingCircle = ({ data, metric, takenMetric, totalsMetric }) => {\n\n  const width = 400\n  const height = 400\n  const margin = {top: 50, right: 50, bottom: 50, left: 50}\n  const boundedWidth = width - margin.left - margin.right\n  const radius = boundedWidth / 2\n\n  const dateAccessor = d => d[0]\n  const radiusAccessor = d => d[1]\n\n  const [countryData, setCountryData] = useState([])\n  const [takenData, setTakenData] = useState([])\n  // const [lineGenerator, setLineGenerator] = useState(_.noop)\n  // const [radiusScale, setRadiusScale] = useState(_.noop)\n  // const [dateScale, setDateScale] = useState(_.noop)\n\n  useEffect(() => {\n    const newCountryData = _.map(data[metric], (values, toCountry) => ({\n      name: toCountry,\n      values: _.sortBy(padData(values), dateAccessor),\n    }))\n    setCountryData(newCountryData)\n\n    const newTakenData = _.sortBy(padData(data[takenMetric]), dateAccessor)\n    setTakenData(newTakenData)\n  }, [metric, data, takenMetric])\n  if (!data) return null\n\n  const dateScale = d3.scaleTime()\n    // .domain(d3.extent(_.flatMap(countryData, \"values\"), dateAccessor))\n    .domain([parseDate(\"1/1/2015\"), parseDate(\"1/1/2016\")])\n    .range([0, Math.PI * 2])\n\n  const radiusScale = d3.scaleLinear()\n    .domain(d3.extent(_.flatMap(countryData, \"values\"), radiusAccessor))\n    .range([0, radius])\n    .nice()\n\n  const dateAccessorScaled = d => dateScale(dateAccessor(d)) || 0\n  const radiusAccessorScaled = d => radiusScale(radiusAccessor(d)) || 0\n  const takenRadiusAccessorScaled = d => radius * 0.99 - (radiusScale(radiusAccessor(d)) || 0)\n\n  const lineGenerator = d3.lineRadial()\n    .angle(dateAccessorScaled)\n    .radius(radiusAccessorScaled)\n    .curve(d3.curveLinearClosed)\n\n  const takenAreaGenerator = d3.lineRadial()\n    .angle(dateAccessorScaled)\n    .radius(takenRadiusAccessorScaled)\n    .curve(d3.curveLinearClosed)\n\n  const topCountries = _.orderBy(_.toPairs(data[totalsMetric]), \"1\", \"desc\")\n\n  return (\n    <div className=\"FishingCircle__wrapper\">\n      <div className=\"FishingCircle__annotation\">\n        Fish taken from { countryCodes[data.name] }’s waters\n      </div>\n\n      <svg\n        className={`FishingCircle`}\n        width={width}\n        height={height}>\n        {/* <defs>\n          <Gradient\n            id={gradientId}\n            x={-width / 7}\n            y={-height / 4}\n            width={-width / 7}\n            height={height / 2}\n            stops={_.times(10, i => ({\n              offset: `${i * 100 / 9}%`,\n              color: colorScale(i / 9),\n            }))}\n          />\n        </defs> */}\n        <g transform={`translate(${width / 2}, ${height / 2})`}>\n          <circle\n            r={radius}\n            className=\"FishingCircle__taken\"\n          >\n            <title>\n              Taken from { countryCodes[data.name] }’s waters\n            </title>\n          </circle>\n          <path\n            d={takenAreaGenerator(takenData)}\n            className=\"FishingCircle__reset\"\n          />\n\n          {radiusScale && _.map(radiusScale.ticks(3), yValue => {\n            // const yValue = radiusScale && radiusScale.domain()[1] * (i + 1) / 3\n            if (!yValue) return null\n            const r = radiusScale(yValue)\n            return (\n              <circle key={yValue}\n                className=\"FishingCircle__tick\"\n                r={r}\n              />\n            )\n          })}\n\n          {/* <rect\n            x={-25}\n            y={-radius}\n            width={50}\n            height={radius * 0.9}\n            className=\"FishingCircle__tick-rect\"\n          /> */}\n          {radiusScale && _.map(radiusScale.ticks(3), yValue => {\n            // const yValue = radiusScale && radiusScale.domain()[1] * (i + 1) / 3\n            if (!yValue) return null\n            const r = radiusScale(yValue)\n            return (\n              <text transform={`translate(0, ${-r + 6})`} className=\"FishingCircle__tick-text\" key={yValue}>\n                { radiusScale && formatNumber(yValue) }\n              </text>\n            )\n          })}\n          {_.map(countryData, (toCountry, i) => (\n            <path\n              key={toCountry.name}\n              className=\"FishingCircle__country\"\n              d={lineGenerator(toCountry.values)}\n              // fill={`url(#${gradientId})`}\n              fill={countryColors[toCountry.name]}\n            >\n              <title>\n                { countryCodes[toCountry.name] }\n              </title>\n            </path>\n          ))}\n          {_.times(12, i => {\n            const angle = i * ((Math.PI * 2) / 12) - Math.PI * 0.5\n            const x = Math.cos(angle) * (radius * 1.1)\n            const y = Math.sin(angle) * (radius * 1.1)\n            return (\n              <text\n                key={i}\n                className=\"FishingCircle__month\"\n                transform={`translate(${x},${y})`}\n                style={{textAnchor: i == 0 || i == 6 ? \"middle\" :\n                                                  i < 6 ? \"start\"  :\n                                                          \"end\"\n              }}>\n                { formatMonth(parseMonth(i)) }\n              </text>\n            )\n          })}\n        </g>\n\n        <line\n          className=\"FishingCircle__annotation-line\"\n          x1={width - 86}\n          x2={width - 86 + 35}\n          y1={height - 103}\n          y2={height - 103 + 35}\n        />\n      </svg>\n\n      <div className=\"FishingCircle__legend\">\n        {_.map(topCountries.slice(0, 3), country => (\n            <div className=\"FishingCircle__legend__item\" key={country[0]}>\n              <div className=\"FishingCircle__legend__item__label\" title={countryCodes[country[0]]}>\n                <div className=\"FishingCircle__legend__item__dot\" style={{\n                  background: countryColors[country[0]]\n                }} />\n                <b>{ countryCodes[country[0]] }</b>\n              </div>\n              <div className=\"FishingCircle__legend__item__value\">\n                { formatNumberLong(country[1]) }\n              </div>\n            </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\n\nconst formatDate = d3.timeFormat(\"%-m/%-d/%Y\")\nconst start = parseDate(\"1/1/2015\")\nconst end = parseDate(\"1/1/2016\")\nconst dates = d3.timeDays(start, end).map(d => [\n  d,\n  formatDate(d),\n])\nconst padData = (data={}) => _.map(dates, date => ([\n  date[0],\n  data[date[1]] || 0,\n]))","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    global.numeral = factory();\n  }\n})(this, function () {\n  /************************************\n      Variables\n  ************************************/\n  var _numeral,\n      _,\n      VERSION = '2.0.6',\n      formats = {},\n      locales = {},\n      defaults = {\n    currentLocale: 'en',\n    zeroFormat: null,\n    nullFormat: null,\n    defaultFormat: '0,0',\n    scalePercentBy100: true\n  },\n      options = {\n    currentLocale: defaults.currentLocale,\n    zeroFormat: defaults.zeroFormat,\n    nullFormat: defaults.nullFormat,\n    defaultFormat: defaults.defaultFormat,\n    scalePercentBy100: defaults.scalePercentBy100\n  };\n  /************************************\n      Constructors\n  ************************************/\n  // Numeral prototype object\n\n\n  function Numeral(input, number) {\n    this._input = input;\n    this._value = number;\n  }\n\n  _numeral = function numeral(input) {\n    var value, kind, unformatFunction, regexp;\n\n    if (_numeral.isNumeral(input)) {\n      value = input.value();\n    } else if (input === 0 || typeof input === 'undefined') {\n      value = 0;\n    } else if (input === null || _.isNaN(input)) {\n      value = null;\n    } else if (typeof input === 'string') {\n      if (options.zeroFormat && input === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        for (kind in formats) {\n          regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n          if (regexp && input.match(regexp)) {\n            unformatFunction = formats[kind].unformat;\n            break;\n          }\n        }\n\n        unformatFunction = unformatFunction || _numeral._.stringToNumber;\n        value = unformatFunction(input);\n      }\n    } else {\n      value = Number(input) || null;\n    }\n\n    return new Numeral(input, value);\n  }; // version number\n\n\n  _numeral.version = VERSION; // compare numeral object\n\n  _numeral.isNumeral = function (obj) {\n    return obj instanceof Numeral;\n  }; // helper functions\n\n\n  _numeral._ = _ = {\n    // formats numbers separators, decimals places, signs, abbreviations\n    numberToFormat: function numberToFormat(value, format, roundingFunction) {\n      var locale = locales[_numeral.options.currentLocale],\n          negP = false,\n          optDec = false,\n          leadingCount = 0,\n          abbr = '',\n          trillion = 1000000000000,\n          billion = 1000000000,\n          million = 1000000,\n          thousand = 1000,\n          decimal = '',\n          neg = false,\n          abbrForce,\n          // force abbreviation\n      abs,\n          min,\n          max,\n          power,\n          int,\n          precision,\n          signed,\n          thousands,\n          output; // make sure we never format a null value\n\n      value = value || 0;\n      abs = Math.abs(value); // see if we should use parentheses for negative number or if we should prefix with a sign\n      // if both are present we default to parentheses\n\n      if (_numeral._.includes(format, '(')) {\n        negP = true;\n        format = format.replace(/[\\(|\\)]/g, '');\n      } else if (_numeral._.includes(format, '+') || _numeral._.includes(format, '-')) {\n        signed = _numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n        format = format.replace(/[\\+|\\-]/g, '');\n      } // see if abbreviation is wanted\n\n\n      if (_numeral._.includes(format, 'a')) {\n        abbrForce = format.match(/a(k|m|b|t)?/);\n        abbrForce = abbrForce ? abbrForce[1] : false; // check for space before abbreviation\n\n        if (_numeral._.includes(format, ' a')) {\n          abbr = ' ';\n        }\n\n        format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n        if (abs >= trillion && !abbrForce || abbrForce === 't') {\n          // trillion\n          abbr += locale.abbreviations.trillion;\n          value = value / trillion;\n        } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n          // billion\n          abbr += locale.abbreviations.billion;\n          value = value / billion;\n        } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n          // million\n          abbr += locale.abbreviations.million;\n          value = value / million;\n        } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n          // thousand\n          abbr += locale.abbreviations.thousand;\n          value = value / thousand;\n        }\n      } // check for optional decimals\n\n\n      if (_numeral._.includes(format, '[.]')) {\n        optDec = true;\n        format = format.replace('[.]', '.');\n      } // break number and format\n\n\n      int = value.toString().split('.')[0];\n      precision = format.split('.')[1];\n      thousands = format.indexOf(',');\n      leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n      if (precision) {\n        if (_numeral._.includes(precision, '[')) {\n          precision = precision.replace(']', '');\n          precision = precision.split('[');\n          decimal = _numeral._.toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n        } else {\n          decimal = _numeral._.toFixed(value, precision.length, roundingFunction);\n        }\n\n        int = decimal.split('.')[0];\n\n        if (_numeral._.includes(decimal, '.')) {\n          decimal = locale.delimiters.decimal + decimal.split('.')[1];\n        } else {\n          decimal = '';\n        }\n\n        if (optDec && Number(decimal.slice(1)) === 0) {\n          decimal = '';\n        }\n      } else {\n        int = _numeral._.toFixed(value, 0, roundingFunction);\n      } // check abbreviation again after rounding\n\n\n      if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n        int = String(Number(int) / 1000);\n\n        switch (abbr) {\n          case locale.abbreviations.thousand:\n            abbr = locale.abbreviations.million;\n            break;\n\n          case locale.abbreviations.million:\n            abbr = locale.abbreviations.billion;\n            break;\n\n          case locale.abbreviations.billion:\n            abbr = locale.abbreviations.trillion;\n            break;\n        }\n      } // format number\n\n\n      if (_numeral._.includes(int, '-')) {\n        int = int.slice(1);\n        neg = true;\n      }\n\n      if (int.length < leadingCount) {\n        for (var i = leadingCount - int.length; i > 0; i--) {\n          int = '0' + int;\n        }\n      }\n\n      if (thousands > -1) {\n        int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n      }\n\n      if (format.indexOf('.') === 0) {\n        int = '';\n      }\n\n      output = int + decimal + (abbr ? abbr : '');\n\n      if (negP) {\n        output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n      } else {\n        if (signed >= 0) {\n          output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n        } else if (neg) {\n          output = '-' + output;\n        }\n      }\n\n      return output;\n    },\n    // unformats numbers separators, decimals places, signs, abbreviations\n    stringToNumber: function stringToNumber(string) {\n      var locale = locales[options.currentLocale],\n          stringOriginal = string,\n          abbreviations = {\n        thousand: 3,\n        million: 6,\n        billion: 9,\n        trillion: 12\n      },\n          abbreviation,\n          value,\n          i,\n          regexp;\n\n      if (options.zeroFormat && string === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        value = 1;\n\n        if (locale.delimiters.decimal !== '.') {\n          string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n        }\n\n        for (abbreviation in abbreviations) {\n          regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n          if (stringOriginal.match(regexp)) {\n            value *= Math.pow(10, abbreviations[abbreviation]);\n            break;\n          }\n        } // check for negative number\n\n\n        value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1; // remove non numbers\n\n        string = string.replace(/[^0-9\\.]+/g, '');\n        value *= Number(string);\n      }\n\n      return value;\n    },\n    isNaN: function (_isNaN) {\n      function isNaN(_x) {\n        return _isNaN.apply(this, arguments);\n      }\n\n      isNaN.toString = function () {\n        return _isNaN.toString();\n      };\n\n      return isNaN;\n    }(function (value) {\n      return typeof value === 'number' && isNaN(value);\n    }),\n    includes: function includes(string, search) {\n      return string.indexOf(search) !== -1;\n    },\n    insert: function insert(string, subString, start) {\n      return string.slice(0, start) + subString + string.slice(start);\n    },\n    reduce: function reduce(array, callback\n    /*, initialValue*/\n    ) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.reduce called on null or undefined');\n      }\n\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n\n      var t = Object(array),\n          len = t.length >>> 0,\n          k = 0,\n          value;\n\n      if (arguments.length === 3) {\n        value = arguments[2];\n      } else {\n        while (k < len && !(k in t)) {\n          k++;\n        }\n\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n\n        value = t[k++];\n      }\n\n      for (; k < len; k++) {\n        if (k in t) {\n          value = callback(value, t[k], k, t);\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    multiplier: function multiplier(x) {\n      var parts = x.toString().split('.');\n      return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n    },\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    correctionFactor: function correctionFactor() {\n      var args = Array.prototype.slice.call(arguments);\n      return args.reduce(function (accum, next) {\n        var mn = _.multiplier(next);\n\n        return accum > mn ? accum : mn;\n      }, 1);\n    },\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    toFixed: function toFixed(value, maxDecimals, roundingFunction, optionals) {\n      var splitValue = value.toString().split('.'),\n          minDecimals = maxDecimals - (optionals || 0),\n          boundedPrecision,\n          optionalsRegExp,\n          power,\n          output; // Use the smallest precision value possible to avoid errors from floating point representation\n\n      if (splitValue.length === 2) {\n        boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n      } else {\n        boundedPrecision = minDecimals;\n      }\n\n      power = Math.pow(10, boundedPrecision); // Multiply up by precision, round accurately, then divide and use native toFixed():\n\n      output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n      if (optionals > maxDecimals - boundedPrecision) {\n        optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n        output = output.replace(optionalsRegExp, '');\n      }\n\n      return output;\n    }\n  }; // avaliable options\n\n  _numeral.options = options; // avaliable formats\n\n  _numeral.formats = formats; // avaliable formats\n\n  _numeral.locales = locales; // This function sets the current locale.  If\n  // no arguments are passed in, it will simply return the current global\n  // locale key.\n\n  _numeral.locale = function (key) {\n    if (key) {\n      options.currentLocale = key.toLowerCase();\n    }\n\n    return options.currentLocale;\n  }; // This function provides access to the loaded locale data.  If\n  // no arguments are passed in, it will simply return the current\n  // global locale object.\n\n\n  _numeral.localeData = function (key) {\n    if (!key) {\n      return locales[options.currentLocale];\n    }\n\n    key = key.toLowerCase();\n\n    if (!locales[key]) {\n      throw new Error('Unknown locale : ' + key);\n    }\n\n    return locales[key];\n  };\n\n  _numeral.reset = function () {\n    for (var property in defaults) {\n      options[property] = defaults[property];\n    }\n  };\n\n  _numeral.zeroFormat = function (format) {\n    options.zeroFormat = typeof format === 'string' ? format : null;\n  };\n\n  _numeral.nullFormat = function (format) {\n    options.nullFormat = typeof format === 'string' ? format : null;\n  };\n\n  _numeral.defaultFormat = function (format) {\n    options.defaultFormat = typeof format === 'string' ? format : '0.0';\n  };\n\n  _numeral.register = function (type, name, format) {\n    name = name.toLowerCase();\n\n    if (this[type + 's'][name]) {\n      throw new TypeError(name + ' ' + type + ' already registered.');\n    }\n\n    this[type + 's'][name] = format;\n    return format;\n  };\n\n  _numeral.validate = function (val, culture) {\n    var _decimalSep, _thousandSep, _currSymbol, _valArray, _abbrObj, _thousandRegEx, localeData, temp; //coerce val to string\n\n\n    if (typeof val !== 'string') {\n      val += '';\n\n      if (console.warn) {\n        console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n      }\n    } //trim whitespaces from either sides\n\n\n    val = val.trim(); //if val is just digits return true\n\n    if (!!val.match(/^\\d+$/)) {\n      return true;\n    } //if val is empty return false\n\n\n    if (val === '') {\n      return false;\n    } //get the decimal and thousands separator from numeral.localeData\n\n\n    try {\n      //check if the culture is understood by numeral. if not, default it to current locale\n      localeData = _numeral.localeData(culture);\n    } catch (e) {\n      localeData = _numeral.localeData(_numeral.locale());\n    } //setup the delimiters and currency symbol based on culture/locale\n\n\n    _currSymbol = localeData.currency.symbol;\n    _abbrObj = localeData.abbreviations;\n    _decimalSep = localeData.delimiters.decimal;\n\n    if (localeData.delimiters.thousands === '.') {\n      _thousandSep = '\\\\.';\n    } else {\n      _thousandSep = localeData.delimiters.thousands;\n    } // validating currency symbol\n\n\n    temp = val.match(/^[^\\d]+/);\n\n    if (temp !== null) {\n      val = val.substr(1);\n\n      if (temp[0] !== _currSymbol) {\n        return false;\n      }\n    } //validating abbreviation symbol\n\n\n    temp = val.match(/[^\\d]+$/);\n\n    if (temp !== null) {\n      val = val.slice(0, -1);\n\n      if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n        return false;\n      }\n    }\n\n    _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n    if (!val.match(/[^\\d.,]/g)) {\n      _valArray = val.split(_decimalSep);\n\n      if (_valArray.length > 2) {\n        return false;\n      } else {\n        if (_valArray.length < 2) {\n          return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx);\n        } else {\n          if (_valArray[0].length === 1) {\n            return !!_valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          } else {\n            return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /************************************\n      Numeral Prototype\n  ************************************/\n\n\n  _numeral.fn = Numeral.prototype = {\n    clone: function clone() {\n      return _numeral(this);\n    },\n    format: function format(inputString, roundingFunction) {\n      var value = this._value,\n          format = inputString || options.defaultFormat,\n          kind,\n          output,\n          formatFunction; // make sure we have a roundingFunction\n\n      roundingFunction = roundingFunction || Math.round; // format based on value\n\n      if (value === 0 && options.zeroFormat !== null) {\n        output = options.zeroFormat;\n      } else if (value === null && options.nullFormat !== null) {\n        output = options.nullFormat;\n      } else {\n        for (kind in formats) {\n          if (format.match(formats[kind].regexps.format)) {\n            formatFunction = formats[kind].format;\n            break;\n          }\n        }\n\n        formatFunction = formatFunction || _numeral._.numberToFormat;\n        output = formatFunction(value, format, roundingFunction);\n      }\n\n      return output;\n    },\n    value: function value() {\n      return this._value;\n    },\n    input: function input() {\n      return this._input;\n    },\n    set: function set(value) {\n      this._value = Number(value);\n      return this;\n    },\n    add: function add(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum + Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n      return this;\n    },\n    subtract: function subtract(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum - Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n      return this;\n    },\n    multiply: function multiply(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 1);\n      return this;\n    },\n    divide: function divide(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback);\n      return this;\n    },\n    difference: function difference(value) {\n      return Math.abs(_numeral(this._value).subtract(value).value());\n    }\n  };\n  /************************************\n      Default Locale && Format\n  ************************************/\n\n  _numeral.register('locale', 'en', {\n    delimiters: {\n      thousands: ',',\n      decimal: '.'\n    },\n    abbreviations: {\n      thousand: 'k',\n      million: 'm',\n      billion: 'b',\n      trillion: 't'\n    },\n    ordinal: function ordinal(number) {\n      var b = number % 10;\n      return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n    },\n    currency: {\n      symbol: '$'\n    }\n  });\n\n  (function () {\n    _numeral.register('format', 'bps', {\n      regexps: {\n        format: /(BPS)/,\n        unformat: /(BPS)/\n      },\n      format: function format(value, _format, roundingFunction) {\n        var space = _numeral._.includes(_format, ' BPS') ? ' ' : '',\n            output;\n        value = value * 10000; // check for space before BPS\n\n        _format = _format.replace(/\\s?BPS/, '');\n        output = _numeral._.numberToFormat(value, _format, roundingFunction);\n\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + 'BPS');\n          output = output.join('');\n        } else {\n          output = output + space + 'BPS';\n        }\n\n        return output;\n      },\n      unformat: function unformat(string) {\n        return +(_numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n      }\n    });\n  })();\n\n  (function () {\n    var decimal = {\n      base: 1000,\n      suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    },\n        binary = {\n      base: 1024,\n      suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n    };\n    var allSuffixes = decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n      return decimal.suffixes.indexOf(item) < 0;\n    }));\n    var unformatRegex = allSuffixes.join('|'); // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n\n    unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    _numeral.register('format', 'bytes', {\n      regexps: {\n        format: /([0\\s]i?b)/,\n        unformat: new RegExp(unformatRegex)\n      },\n      format: function format(value, _format2, roundingFunction) {\n        var output,\n            bytes = _numeral._.includes(_format2, 'ib') ? binary : decimal,\n            suffix = _numeral._.includes(_format2, ' b') || _numeral._.includes(_format2, ' ib') ? ' ' : '',\n            power,\n            min,\n            max; // check for space before\n\n        _format2 = _format2.replace(/\\s?i?b/, '');\n\n        for (power = 0; power <= bytes.suffixes.length; power++) {\n          min = Math.pow(bytes.base, power);\n          max = Math.pow(bytes.base, power + 1);\n\n          if (value === null || value === 0 || value >= min && value < max) {\n            suffix += bytes.suffixes[power];\n\n            if (min > 0) {\n              value = value / min;\n            }\n\n            break;\n          }\n        }\n\n        output = _numeral._.numberToFormat(value, _format2, roundingFunction);\n        return output + suffix;\n      },\n      unformat: function unformat(string) {\n        var value = _numeral._.stringToNumber(string),\n            power,\n            bytesMultiplier;\n\n        if (value) {\n          for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n            if (_numeral._.includes(string, decimal.suffixes[power])) {\n              bytesMultiplier = Math.pow(decimal.base, power);\n              break;\n            }\n\n            if (_numeral._.includes(string, binary.suffixes[power])) {\n              bytesMultiplier = Math.pow(binary.base, power);\n              break;\n            }\n          }\n\n          value *= bytesMultiplier || 1;\n        }\n\n        return value;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'currency', {\n      regexps: {\n        format: /(\\$)/\n      },\n      format: function format(value, _format3, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n            symbols = {\n          before: _format3.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n          after: _format3.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n        },\n            output,\n            symbol,\n            i; // strip format of spaces and $\n\n        _format3 = _format3.replace(/\\s?\\$\\s?/, ''); // format the number\n\n        output = _numeral._.numberToFormat(value, _format3, roundingFunction); // update the before and after based on value\n\n        if (value >= 0) {\n          symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n          symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n        } else if (value < 0 && !_numeral._.includes(symbols.before, '-') && !_numeral._.includes(symbols.before, '(')) {\n          symbols.before = '-' + symbols.before;\n        } // loop through each before symbol\n\n\n        for (i = 0; i < symbols.before.length; i++) {\n          symbol = symbols.before[i];\n\n          switch (symbol) {\n            case '$':\n              output = _numeral._.insert(output, locale.currency.symbol, i);\n              break;\n\n            case ' ':\n              output = _numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n              break;\n          }\n        } // loop through each after symbol\n\n\n        for (i = symbols.after.length - 1; i >= 0; i--) {\n          symbol = symbols.after[i];\n\n          switch (symbol) {\n            case '$':\n              output = i === symbols.after.length - 1 ? output + locale.currency.symbol : _numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n              break;\n\n            case ' ':\n              output = i === symbols.after.length - 1 ? output + ' ' : _numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n              break;\n          }\n        }\n\n        return output;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'exponential', {\n      regexps: {\n        format: /(e\\+|e-)/,\n        unformat: /(e\\+|e-)/\n      },\n      format: function format(value, _format4, roundingFunction) {\n        var output,\n            exponential = typeof value === 'number' && !_numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n            parts = exponential.split('e');\n        _format4 = _format4.replace(/e[\\+|\\-]{1}0/, '');\n        output = _numeral._.numberToFormat(Number(parts[0]), _format4, roundingFunction);\n        return output + 'e' + parts[1];\n      },\n      unformat: function unformat(string) {\n        var parts = _numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n            value = Number(parts[0]),\n            power = Number(parts[1]);\n        power = _numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n        function cback(accum, curr, currI, O) {\n          var corrFactor = _numeral._.correctionFactor(accum, curr),\n              num = accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);\n\n          return num;\n        }\n\n        return _numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'ordinal', {\n      regexps: {\n        format: /(o)/\n      },\n      format: function format(value, _format5, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n            output,\n            ordinal = _numeral._.includes(_format5, ' o') ? ' ' : ''; // check for space before\n\n        _format5 = _format5.replace(/\\s?o/, '');\n        ordinal += locale.ordinal(value);\n        output = _numeral._.numberToFormat(value, _format5, roundingFunction);\n        return output + ordinal;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'percentage', {\n      regexps: {\n        format: /(%)/,\n        unformat: /(%)/\n      },\n      format: function format(value, _format6, roundingFunction) {\n        var space = _numeral._.includes(_format6, ' %') ? ' ' : '',\n            output;\n\n        if (_numeral.options.scalePercentBy100) {\n          value = value * 100;\n        } // check for space before %\n\n\n        _format6 = _format6.replace(/\\s?\\%/, '');\n        output = _numeral._.numberToFormat(value, _format6, roundingFunction);\n\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + '%');\n          output = output.join('');\n        } else {\n          output = output + space + '%';\n        }\n\n        return output;\n      },\n      unformat: function unformat(string) {\n        var number = _numeral._.stringToNumber(string);\n\n        if (_numeral.options.scalePercentBy100) {\n          return number * 0.01;\n        }\n\n        return number;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'time', {\n      regexps: {\n        format: /(:)/,\n        unformat: /(:)/\n      },\n      format: function format(value, _format7, roundingFunction) {\n        var hours = Math.floor(value / 60 / 60),\n            minutes = Math.floor((value - hours * 60 * 60) / 60),\n            seconds = Math.round(value - hours * 60 * 60 - minutes * 60);\n        return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n      },\n      unformat: function unformat(string) {\n        var timeArray = string.split(':'),\n            seconds = 0; // turn hours and minutes into seconds and add them all up\n\n        if (timeArray.length === 3) {\n          // hours\n          seconds = seconds + Number(timeArray[0]) * 60 * 60; // minutes\n\n          seconds = seconds + Number(timeArray[1]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n          // minutes\n          seconds = seconds + Number(timeArray[0]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[1]);\n        }\n\n        return Number(seconds);\n      }\n    });\n  })();\n\n  return _numeral;\n});","import React, {Component} from \"react\"\nimport PropTypes from \"prop-types\"\nimport classNames from \"classnames\"\nimport _ from \"lodash\"\nimport {isObject} from \"lodash\"\n\nrequire('./RadioGroup.scss')\n\nconst getOptionValue = option => _.isObject(option) ? option.value : option\nconst areSameValue = (a, b) => getOptionValue(a) == getOptionValue(b)\nclass RadioGroup extends Component {\n  static propTypes = {\n    options: PropTypes.array,\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.object\n    ]),\n    isMulti: PropTypes.bool,\n    canClear: PropTypes.bool,\n    onChange: PropTypes.func,\n  };\n\n  static defaultProps = {\n    options: [],\n    isMulti: false,\n    canClear: false,\n    onChange: _.noop,\n  };\n\n  getClassName() {\n    return classNames(\n      \"RadioGroup\", this.props.className\n    )\n  }\n\n  onChange = option => () => {\n    const { value, isMulti } = this.props\n    const newValue = isMulti ?\n        !option ? [] :\n        value.map(getOptionValue).includes(getOptionValue(option)) ? _.filter(value, d => !areSameValue(option, d)) :\n          [...value, option]  :\n        !option || areSameValue(value, option) ?\n          null :\n        option\n    this.props.onChange(newValue)\n  }\n\n  renderOption = (option, idx) => {\n    const {value, isMulti} = this.props\n\n    const className = classNames(\n      \"RadioGroup__option\", {\n        \"RadioGroup__option--selected\": isMulti ?\n          value.map(getOptionValue).includes(getOptionValue(option)) :\n          areSameValue(option, value)\n      }\n    )\n    return <div className={className} style={{\n      color: option.color,\n    }} onClick={this.onChange(option)} key={idx}>\n      {_.isObject(option) && option.label ? option.label : getOptionValue(option)}\n    </div>\n  }\n\n  renderClear = () => {\n    return (\n      <div className=\"RadioGroup__option RadioGroup__clear\" onClick={this.onChange()}>\n        x\n      </div>\n    )\n  }\n\n  render() {\n    const {options, canClear, isMulti} = this.props\n\n    return (\n      <div className={this.getClassName()}>\n        {options.map(this.renderOption)}\n        {canClear && this.renderClear()}\n      </div>\n    )\n  }\n}\n\nexport default RadioGroup\n"],"sourceRoot":""}