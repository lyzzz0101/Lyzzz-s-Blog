{"version":3,"sources":["../node_modules/d3-scale-chromatic/src/colors.js","../node_modules/numeral/numeral.js","../node_modules/d3-interpolate/src/basis.js","../node_modules/d3-interpolate/src/rgb.js","../node_modules/d3-interpolate/src/basisClosed.js","../node_modules/d3-scale-chromatic/src/ramp.js","../node_modules/react-select/dist/react-select.browser.esm.js","../node_modules/d3-color/src/color.js","../node_modules/d3-color/src/define.js","../node_modules/d3-interpolate/src/constant.js","../node_modules/d3-interpolate/src/color.js"],"names":["__webpack_exports__","specifier","n","length","colors","Array","i","slice","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","_numeral","_","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","this","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","leadingCount","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","abbr","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","String","string","abbreviation","stringOriginal","currency","symbol","pow","min","_isNaN","_x","apply","arguments","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","multiplier","x","parts","correctionFactor","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","_format","space","splice","join","base","suffixes","binary","unformatRegex","concat","filter","item","_format2","bytes","suffix","bytesMultiplier","_format3","symbols","before","after","_format4","toExponential","_format5","_format6","_format7","hours","floor","minutes","seconds","timeArray","exports","__webpack_require__","module","basis","t1","v0","v1","v2","v3","t2","t3","rgbGamma","y","color","d3_interpolate_src_color","rgb","end","r","src_color","g","opacity","gamma","rgbSpline","spline","rgbBasis","values","scheme","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","memoize_one__WEBPACK_IMPORTED_MODULE_1__","_emotion_core__WEBPACK_IMPORTED_MODULE_2__","_Select_9fdb8cd0_browser_esm_js__WEBPACK_IMPORTED_MODULE_5__","_stateManager_04f734a2_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__","_emotion_cache__WEBPACK_IMPORTED_MODULE_9__","index","d","Color","_darker","_brighter","rgbConvert","Rgb","hsl","_define_js__WEBPACK_IMPORTED_MODULE_0__","reI","reN","reP","reHex","reRgbInteger","reRgbPercent","reRgbaInteger","reRgbaPercent","reHslPercent","reHslaPercent","named","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","color_formatHex","formatHex","color_formatRgb","formatRgb","m","l","exec","parseInt","rgbn","rgba","hsla","hasOwnProperty","NaN","a","o","rgb_formatHex","hex","rgb_formatRgb","h","s","Hsl","hslConvert","hsl2rgb","m1","m2","copy","channels","assign","constructor","displayable","formatHsl","brighter","darker","extend","parent","definition","create","factory","constant","linear","hue","nogamma","exponential"],"mappings":"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","file":"static/js/13.ab6a69df.chunk.js","sourcesContent":["export default function (specifier) {\n  var n = specifier.length / 6 | 0,\n      colors = new Array(n),\n      i = 0;\n\n  while (i < n) {\n    colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n  }\n\n  return colors;\n}","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    global.numeral = factory();\n  }\n})(this, function () {\n  /************************************\n      Variables\n  ************************************/\n  var _numeral,\n      _,\n      VERSION = '2.0.6',\n      formats = {},\n      locales = {},\n      defaults = {\n    currentLocale: 'en',\n    zeroFormat: null,\n    nullFormat: null,\n    defaultFormat: '0,0',\n    scalePercentBy100: true\n  },\n      options = {\n    currentLocale: defaults.currentLocale,\n    zeroFormat: defaults.zeroFormat,\n    nullFormat: defaults.nullFormat,\n    defaultFormat: defaults.defaultFormat,\n    scalePercentBy100: defaults.scalePercentBy100\n  };\n  /************************************\n      Constructors\n  ************************************/\n  // Numeral prototype object\n\n\n  function Numeral(input, number) {\n    this._input = input;\n    this._value = number;\n  }\n\n  _numeral = function numeral(input) {\n    var value, kind, unformatFunction, regexp;\n\n    if (_numeral.isNumeral(input)) {\n      value = input.value();\n    } else if (input === 0 || typeof input === 'undefined') {\n      value = 0;\n    } else if (input === null || _.isNaN(input)) {\n      value = null;\n    } else if (typeof input === 'string') {\n      if (options.zeroFormat && input === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        for (kind in formats) {\n          regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n          if (regexp && input.match(regexp)) {\n            unformatFunction = formats[kind].unformat;\n            break;\n          }\n        }\n\n        unformatFunction = unformatFunction || _numeral._.stringToNumber;\n        value = unformatFunction(input);\n      }\n    } else {\n      value = Number(input) || null;\n    }\n\n    return new Numeral(input, value);\n  }; // version number\n\n\n  _numeral.version = VERSION; // compare numeral object\n\n  _numeral.isNumeral = function (obj) {\n    return obj instanceof Numeral;\n  }; // helper functions\n\n\n  _numeral._ = _ = {\n    // formats numbers separators, decimals places, signs, abbreviations\n    numberToFormat: function numberToFormat(value, format, roundingFunction) {\n      var locale = locales[_numeral.options.currentLocale],\n          negP = false,\n          optDec = false,\n          leadingCount = 0,\n          abbr = '',\n          trillion = 1000000000000,\n          billion = 1000000000,\n          million = 1000000,\n          thousand = 1000,\n          decimal = '',\n          neg = false,\n          abbrForce,\n          // force abbreviation\n      abs,\n          min,\n          max,\n          power,\n          int,\n          precision,\n          signed,\n          thousands,\n          output; // make sure we never format a null value\n\n      value = value || 0;\n      abs = Math.abs(value); // see if we should use parentheses for negative number or if we should prefix with a sign\n      // if both are present we default to parentheses\n\n      if (_numeral._.includes(format, '(')) {\n        negP = true;\n        format = format.replace(/[\\(|\\)]/g, '');\n      } else if (_numeral._.includes(format, '+') || _numeral._.includes(format, '-')) {\n        signed = _numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n        format = format.replace(/[\\+|\\-]/g, '');\n      } // see if abbreviation is wanted\n\n\n      if (_numeral._.includes(format, 'a')) {\n        abbrForce = format.match(/a(k|m|b|t)?/);\n        abbrForce = abbrForce ? abbrForce[1] : false; // check for space before abbreviation\n\n        if (_numeral._.includes(format, ' a')) {\n          abbr = ' ';\n        }\n\n        format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n        if (abs >= trillion && !abbrForce || abbrForce === 't') {\n          // trillion\n          abbr += locale.abbreviations.trillion;\n          value = value / trillion;\n        } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n          // billion\n          abbr += locale.abbreviations.billion;\n          value = value / billion;\n        } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n          // million\n          abbr += locale.abbreviations.million;\n          value = value / million;\n        } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n          // thousand\n          abbr += locale.abbreviations.thousand;\n          value = value / thousand;\n        }\n      } // check for optional decimals\n\n\n      if (_numeral._.includes(format, '[.]')) {\n        optDec = true;\n        format = format.replace('[.]', '.');\n      } // break number and format\n\n\n      int = value.toString().split('.')[0];\n      precision = format.split('.')[1];\n      thousands = format.indexOf(',');\n      leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n      if (precision) {\n        if (_numeral._.includes(precision, '[')) {\n          precision = precision.replace(']', '');\n          precision = precision.split('[');\n          decimal = _numeral._.toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n        } else {\n          decimal = _numeral._.toFixed(value, precision.length, roundingFunction);\n        }\n\n        int = decimal.split('.')[0];\n\n        if (_numeral._.includes(decimal, '.')) {\n          decimal = locale.delimiters.decimal + decimal.split('.')[1];\n        } else {\n          decimal = '';\n        }\n\n        if (optDec && Number(decimal.slice(1)) === 0) {\n          decimal = '';\n        }\n      } else {\n        int = _numeral._.toFixed(value, 0, roundingFunction);\n      } // check abbreviation again after rounding\n\n\n      if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n        int = String(Number(int) / 1000);\n\n        switch (abbr) {\n          case locale.abbreviations.thousand:\n            abbr = locale.abbreviations.million;\n            break;\n\n          case locale.abbreviations.million:\n            abbr = locale.abbreviations.billion;\n            break;\n\n          case locale.abbreviations.billion:\n            abbr = locale.abbreviations.trillion;\n            break;\n        }\n      } // format number\n\n\n      if (_numeral._.includes(int, '-')) {\n        int = int.slice(1);\n        neg = true;\n      }\n\n      if (int.length < leadingCount) {\n        for (var i = leadingCount - int.length; i > 0; i--) {\n          int = '0' + int;\n        }\n      }\n\n      if (thousands > -1) {\n        int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n      }\n\n      if (format.indexOf('.') === 0) {\n        int = '';\n      }\n\n      output = int + decimal + (abbr ? abbr : '');\n\n      if (negP) {\n        output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n      } else {\n        if (signed >= 0) {\n          output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n        } else if (neg) {\n          output = '-' + output;\n        }\n      }\n\n      return output;\n    },\n    // unformats numbers separators, decimals places, signs, abbreviations\n    stringToNumber: function stringToNumber(string) {\n      var locale = locales[options.currentLocale],\n          stringOriginal = string,\n          abbreviations = {\n        thousand: 3,\n        million: 6,\n        billion: 9,\n        trillion: 12\n      },\n          abbreviation,\n          value,\n          i,\n          regexp;\n\n      if (options.zeroFormat && string === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        value = 1;\n\n        if (locale.delimiters.decimal !== '.') {\n          string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n        }\n\n        for (abbreviation in abbreviations) {\n          regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n          if (stringOriginal.match(regexp)) {\n            value *= Math.pow(10, abbreviations[abbreviation]);\n            break;\n          }\n        } // check for negative number\n\n\n        value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1; // remove non numbers\n\n        string = string.replace(/[^0-9\\.]+/g, '');\n        value *= Number(string);\n      }\n\n      return value;\n    },\n    isNaN: function (_isNaN) {\n      function isNaN(_x) {\n        return _isNaN.apply(this, arguments);\n      }\n\n      isNaN.toString = function () {\n        return _isNaN.toString();\n      };\n\n      return isNaN;\n    }(function (value) {\n      return typeof value === 'number' && isNaN(value);\n    }),\n    includes: function includes(string, search) {\n      return string.indexOf(search) !== -1;\n    },\n    insert: function insert(string, subString, start) {\n      return string.slice(0, start) + subString + string.slice(start);\n    },\n    reduce: function reduce(array, callback\n    /*, initialValue*/\n    ) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.reduce called on null or undefined');\n      }\n\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n\n      var t = Object(array),\n          len = t.length >>> 0,\n          k = 0,\n          value;\n\n      if (arguments.length === 3) {\n        value = arguments[2];\n      } else {\n        while (k < len && !(k in t)) {\n          k++;\n        }\n\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n\n        value = t[k++];\n      }\n\n      for (; k < len; k++) {\n        if (k in t) {\n          value = callback(value, t[k], k, t);\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    multiplier: function multiplier(x) {\n      var parts = x.toString().split('.');\n      return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n    },\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    correctionFactor: function correctionFactor() {\n      var args = Array.prototype.slice.call(arguments);\n      return args.reduce(function (accum, next) {\n        var mn = _.multiplier(next);\n\n        return accum > mn ? accum : mn;\n      }, 1);\n    },\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    toFixed: function toFixed(value, maxDecimals, roundingFunction, optionals) {\n      var splitValue = value.toString().split('.'),\n          minDecimals = maxDecimals - (optionals || 0),\n          boundedPrecision,\n          optionalsRegExp,\n          power,\n          output; // Use the smallest precision value possible to avoid errors from floating point representation\n\n      if (splitValue.length === 2) {\n        boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n      } else {\n        boundedPrecision = minDecimals;\n      }\n\n      power = Math.pow(10, boundedPrecision); // Multiply up by precision, round accurately, then divide and use native toFixed():\n\n      output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n      if (optionals > maxDecimals - boundedPrecision) {\n        optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n        output = output.replace(optionalsRegExp, '');\n      }\n\n      return output;\n    }\n  }; // avaliable options\n\n  _numeral.options = options; // avaliable formats\n\n  _numeral.formats = formats; // avaliable formats\n\n  _numeral.locales = locales; // This function sets the current locale.  If\n  // no arguments are passed in, it will simply return the current global\n  // locale key.\n\n  _numeral.locale = function (key) {\n    if (key) {\n      options.currentLocale = key.toLowerCase();\n    }\n\n    return options.currentLocale;\n  }; // This function provides access to the loaded locale data.  If\n  // no arguments are passed in, it will simply return the current\n  // global locale object.\n\n\n  _numeral.localeData = function (key) {\n    if (!key) {\n      return locales[options.currentLocale];\n    }\n\n    key = key.toLowerCase();\n\n    if (!locales[key]) {\n      throw new Error('Unknown locale : ' + key);\n    }\n\n    return locales[key];\n  };\n\n  _numeral.reset = function () {\n    for (var property in defaults) {\n      options[property] = defaults[property];\n    }\n  };\n\n  _numeral.zeroFormat = function (format) {\n    options.zeroFormat = typeof format === 'string' ? format : null;\n  };\n\n  _numeral.nullFormat = function (format) {\n    options.nullFormat = typeof format === 'string' ? format : null;\n  };\n\n  _numeral.defaultFormat = function (format) {\n    options.defaultFormat = typeof format === 'string' ? format : '0.0';\n  };\n\n  _numeral.register = function (type, name, format) {\n    name = name.toLowerCase();\n\n    if (this[type + 's'][name]) {\n      throw new TypeError(name + ' ' + type + ' already registered.');\n    }\n\n    this[type + 's'][name] = format;\n    return format;\n  };\n\n  _numeral.validate = function (val, culture) {\n    var _decimalSep, _thousandSep, _currSymbol, _valArray, _abbrObj, _thousandRegEx, localeData, temp; //coerce val to string\n\n\n    if (typeof val !== 'string') {\n      val += '';\n\n      if (console.warn) {\n        console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n      }\n    } //trim whitespaces from either sides\n\n\n    val = val.trim(); //if val is just digits return true\n\n    if (!!val.match(/^\\d+$/)) {\n      return true;\n    } //if val is empty return false\n\n\n    if (val === '') {\n      return false;\n    } //get the decimal and thousands separator from numeral.localeData\n\n\n    try {\n      //check if the culture is understood by numeral. if not, default it to current locale\n      localeData = _numeral.localeData(culture);\n    } catch (e) {\n      localeData = _numeral.localeData(_numeral.locale());\n    } //setup the delimiters and currency symbol based on culture/locale\n\n\n    _currSymbol = localeData.currency.symbol;\n    _abbrObj = localeData.abbreviations;\n    _decimalSep = localeData.delimiters.decimal;\n\n    if (localeData.delimiters.thousands === '.') {\n      _thousandSep = '\\\\.';\n    } else {\n      _thousandSep = localeData.delimiters.thousands;\n    } // validating currency symbol\n\n\n    temp = val.match(/^[^\\d]+/);\n\n    if (temp !== null) {\n      val = val.substr(1);\n\n      if (temp[0] !== _currSymbol) {\n        return false;\n      }\n    } //validating abbreviation symbol\n\n\n    temp = val.match(/[^\\d]+$/);\n\n    if (temp !== null) {\n      val = val.slice(0, -1);\n\n      if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n        return false;\n      }\n    }\n\n    _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n    if (!val.match(/[^\\d.,]/g)) {\n      _valArray = val.split(_decimalSep);\n\n      if (_valArray.length > 2) {\n        return false;\n      } else {\n        if (_valArray.length < 2) {\n          return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx);\n        } else {\n          if (_valArray[0].length === 1) {\n            return !!_valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          } else {\n            return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /************************************\n      Numeral Prototype\n  ************************************/\n\n\n  _numeral.fn = Numeral.prototype = {\n    clone: function clone() {\n      return _numeral(this);\n    },\n    format: function format(inputString, roundingFunction) {\n      var value = this._value,\n          format = inputString || options.defaultFormat,\n          kind,\n          output,\n          formatFunction; // make sure we have a roundingFunction\n\n      roundingFunction = roundingFunction || Math.round; // format based on value\n\n      if (value === 0 && options.zeroFormat !== null) {\n        output = options.zeroFormat;\n      } else if (value === null && options.nullFormat !== null) {\n        output = options.nullFormat;\n      } else {\n        for (kind in formats) {\n          if (format.match(formats[kind].regexps.format)) {\n            formatFunction = formats[kind].format;\n            break;\n          }\n        }\n\n        formatFunction = formatFunction || _numeral._.numberToFormat;\n        output = formatFunction(value, format, roundingFunction);\n      }\n\n      return output;\n    },\n    value: function value() {\n      return this._value;\n    },\n    input: function input() {\n      return this._input;\n    },\n    set: function set(value) {\n      this._value = Number(value);\n      return this;\n    },\n    add: function add(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum + Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n      return this;\n    },\n    subtract: function subtract(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum - Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n      return this;\n    },\n    multiply: function multiply(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 1);\n      return this;\n    },\n    divide: function divide(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback);\n      return this;\n    },\n    difference: function difference(value) {\n      return Math.abs(_numeral(this._value).subtract(value).value());\n    }\n  };\n  /************************************\n      Default Locale && Format\n  ************************************/\n\n  _numeral.register('locale', 'en', {\n    delimiters: {\n      thousands: ',',\n      decimal: '.'\n    },\n    abbreviations: {\n      thousand: 'k',\n      million: 'm',\n      billion: 'b',\n      trillion: 't'\n    },\n    ordinal: function ordinal(number) {\n      var b = number % 10;\n      return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n    },\n    currency: {\n      symbol: '$'\n    }\n  });\n\n  (function () {\n    _numeral.register('format', 'bps', {\n      regexps: {\n        format: /(BPS)/,\n        unformat: /(BPS)/\n      },\n      format: function format(value, _format, roundingFunction) {\n        var space = _numeral._.includes(_format, ' BPS') ? ' ' : '',\n            output;\n        value = value * 10000; // check for space before BPS\n\n        _format = _format.replace(/\\s?BPS/, '');\n        output = _numeral._.numberToFormat(value, _format, roundingFunction);\n\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + 'BPS');\n          output = output.join('');\n        } else {\n          output = output + space + 'BPS';\n        }\n\n        return output;\n      },\n      unformat: function unformat(string) {\n        return +(_numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n      }\n    });\n  })();\n\n  (function () {\n    var decimal = {\n      base: 1000,\n      suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    },\n        binary = {\n      base: 1024,\n      suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n    };\n    var allSuffixes = decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n      return decimal.suffixes.indexOf(item) < 0;\n    }));\n    var unformatRegex = allSuffixes.join('|'); // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n\n    unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    _numeral.register('format', 'bytes', {\n      regexps: {\n        format: /([0\\s]i?b)/,\n        unformat: new RegExp(unformatRegex)\n      },\n      format: function format(value, _format2, roundingFunction) {\n        var output,\n            bytes = _numeral._.includes(_format2, 'ib') ? binary : decimal,\n            suffix = _numeral._.includes(_format2, ' b') || _numeral._.includes(_format2, ' ib') ? ' ' : '',\n            power,\n            min,\n            max; // check for space before\n\n        _format2 = _format2.replace(/\\s?i?b/, '');\n\n        for (power = 0; power <= bytes.suffixes.length; power++) {\n          min = Math.pow(bytes.base, power);\n          max = Math.pow(bytes.base, power + 1);\n\n          if (value === null || value === 0 || value >= min && value < max) {\n            suffix += bytes.suffixes[power];\n\n            if (min > 0) {\n              value = value / min;\n            }\n\n            break;\n          }\n        }\n\n        output = _numeral._.numberToFormat(value, _format2, roundingFunction);\n        return output + suffix;\n      },\n      unformat: function unformat(string) {\n        var value = _numeral._.stringToNumber(string),\n            power,\n            bytesMultiplier;\n\n        if (value) {\n          for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n            if (_numeral._.includes(string, decimal.suffixes[power])) {\n              bytesMultiplier = Math.pow(decimal.base, power);\n              break;\n            }\n\n            if (_numeral._.includes(string, binary.suffixes[power])) {\n              bytesMultiplier = Math.pow(binary.base, power);\n              break;\n            }\n          }\n\n          value *= bytesMultiplier || 1;\n        }\n\n        return value;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'currency', {\n      regexps: {\n        format: /(\\$)/\n      },\n      format: function format(value, _format3, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n            symbols = {\n          before: _format3.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n          after: _format3.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n        },\n            output,\n            symbol,\n            i; // strip format of spaces and $\n\n        _format3 = _format3.replace(/\\s?\\$\\s?/, ''); // format the number\n\n        output = _numeral._.numberToFormat(value, _format3, roundingFunction); // update the before and after based on value\n\n        if (value >= 0) {\n          symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n          symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n        } else if (value < 0 && !_numeral._.includes(symbols.before, '-') && !_numeral._.includes(symbols.before, '(')) {\n          symbols.before = '-' + symbols.before;\n        } // loop through each before symbol\n\n\n        for (i = 0; i < symbols.before.length; i++) {\n          symbol = symbols.before[i];\n\n          switch (symbol) {\n            case '$':\n              output = _numeral._.insert(output, locale.currency.symbol, i);\n              break;\n\n            case ' ':\n              output = _numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n              break;\n          }\n        } // loop through each after symbol\n\n\n        for (i = symbols.after.length - 1; i >= 0; i--) {\n          symbol = symbols.after[i];\n\n          switch (symbol) {\n            case '$':\n              output = i === symbols.after.length - 1 ? output + locale.currency.symbol : _numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n              break;\n\n            case ' ':\n              output = i === symbols.after.length - 1 ? output + ' ' : _numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n              break;\n          }\n        }\n\n        return output;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'exponential', {\n      regexps: {\n        format: /(e\\+|e-)/,\n        unformat: /(e\\+|e-)/\n      },\n      format: function format(value, _format4, roundingFunction) {\n        var output,\n            exponential = typeof value === 'number' && !_numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n            parts = exponential.split('e');\n        _format4 = _format4.replace(/e[\\+|\\-]{1}0/, '');\n        output = _numeral._.numberToFormat(Number(parts[0]), _format4, roundingFunction);\n        return output + 'e' + parts[1];\n      },\n      unformat: function unformat(string) {\n        var parts = _numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n            value = Number(parts[0]),\n            power = Number(parts[1]);\n        power = _numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n        function cback(accum, curr, currI, O) {\n          var corrFactor = _numeral._.correctionFactor(accum, curr),\n              num = accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);\n\n          return num;\n        }\n\n        return _numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'ordinal', {\n      regexps: {\n        format: /(o)/\n      },\n      format: function format(value, _format5, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n            output,\n            ordinal = _numeral._.includes(_format5, ' o') ? ' ' : ''; // check for space before\n\n        _format5 = _format5.replace(/\\s?o/, '');\n        ordinal += locale.ordinal(value);\n        output = _numeral._.numberToFormat(value, _format5, roundingFunction);\n        return output + ordinal;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'percentage', {\n      regexps: {\n        format: /(%)/,\n        unformat: /(%)/\n      },\n      format: function format(value, _format6, roundingFunction) {\n        var space = _numeral._.includes(_format6, ' %') ? ' ' : '',\n            output;\n\n        if (_numeral.options.scalePercentBy100) {\n          value = value * 100;\n        } // check for space before %\n\n\n        _format6 = _format6.replace(/\\s?\\%/, '');\n        output = _numeral._.numberToFormat(value, _format6, roundingFunction);\n\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + '%');\n          output = output.join('');\n        } else {\n          output = output + space + '%';\n        }\n\n        return output;\n      },\n      unformat: function unformat(string) {\n        var number = _numeral._.stringToNumber(string);\n\n        if (_numeral.options.scalePercentBy100) {\n          return number * 0.01;\n        }\n\n        return number;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'time', {\n      regexps: {\n        format: /(:)/,\n        unformat: /(:)/\n      },\n      format: function format(value, _format7, roundingFunction) {\n        var hours = Math.floor(value / 60 / 60),\n            minutes = Math.floor((value - hours * 60 * 60) / 60),\n            seconds = Math.round(value - hours * 60 * 60 - minutes * 60);\n        return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n      },\n      unformat: function unformat(string) {\n        var timeArray = string.split(':'),\n            seconds = 0; // turn hours and minutes into seconds and add them all up\n\n        if (timeArray.length === 3) {\n          // hours\n          seconds = seconds + Number(timeArray[0]) * 60 * 60; // minutes\n\n          seconds = seconds + Number(timeArray[1]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n          // minutes\n          seconds = seconds + Number(timeArray[0]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[1]);\n        }\n\n        return Number(seconds);\n      }\n    });\n  })();\n\n  return _numeral;\n});","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1,\n      t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;\n}\nexport default function (values) {\n  var n = values.length - 1;\n  return function (t) {\n    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}","import { rgb as colorRgb } from \"d3-color\";\nimport basis from \"./basis.js\";\nimport basisClosed from \"./basisClosed.js\";\nimport nogamma, { gamma } from \"./color.js\";\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function (t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function (colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i,\n        color;\n\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function (t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);","import { basis } from \"./basis.js\";\nexport default function (values) {\n  var n = values.length;\n  return function (t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}","import { interpolateRgbBasis } from \"d3-interpolate\";\nexport default function (scheme) {\n  return interpolateRgbBasis(scheme[scheme.length - 1]);\n}","import React, { Component } from 'react';\nimport memoizeOne from 'memoize-one';\nimport { CacheProvider } from '@emotion/core';\nimport 'react-dom';\nimport 'prop-types';\nimport './utils-06b0d5a4.browser.esm.js';\nexport { y as components } from './index-4322c0ed.browser.esm.js';\nimport { S as Select } from './Select-9fdb8cd0.browser.esm.js';\nexport { c as createFilter, a as defaultTheme, m as mergeStyles } from './Select-9fdb8cd0.browser.esm.js';\nimport '@emotion/css';\nimport 'react-input-autosize';\nimport { m as manageState } from './stateManager-04f734a2.browser.esm.js';\nimport createCache from '@emotion/cache';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar NonceProvider = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(NonceProvider, _Component);\n\n  function NonceProvider(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _this.createEmotionCache = function (nonce) {\n      return createCache({\n        nonce: nonce\n      });\n    };\n\n    _this.createEmotionCache = memoizeOne(_this.createEmotionCache);\n    return _this;\n  }\n\n  var _proto = NonceProvider.prototype;\n\n  _proto.render = function render() {\n    var emotionCache = this.createEmotionCache(this.props.nonce);\n    return React.createElement(CacheProvider, {\n      value: emotionCache\n    }, this.props.children);\n  };\n\n  return NonceProvider;\n}(Component);\n\nvar index = manageState(Select);\nexport default index;\nexport { NonceProvider };","import define, { extend } from \"./define.js\";\nexport function Color() {}\nvar _darker = 0.7;\nexport { _darker as darker };\n\nvar _brighter = 1 / _darker;\n\nexport { _brighter as brighter };\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\ndefine(Color, color, {\n  copy: function copy(channels) {\n    return Object.assign(new this.constructor(), this, channels);\n  },\n  displayable: function displayable() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex,\n  // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nexport default function color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n  : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00\n  : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n  : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000\n  : null // invalid hex\n  ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n  : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0) : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb();\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\ndefine(Rgb, rgb, extend(Color, {\n  brighter: function brighter(k) {\n    k = k == null ? _brighter : Math.pow(_brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function darker(k) {\n    k = k == null ? _darker : Math.pow(_darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function rgb() {\n    return this;\n  },\n  displayable: function displayable() {\n    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;\n  },\n  hex: rgb_formatHex,\n  // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n}\n\nfunction rgb_formatRgb() {\n  var a = this.opacity;\n  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n  return (a === 1 ? \"rgb(\" : \"rgba(\") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \" + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? \")\" : \", \" + a + \")\");\n}\n\nfunction hex(value) {\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl();\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n\n  return new Hsl(h, s, l, o.opacity);\n}\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter: function brighter(k) {\n    k = k == null ? _brighter : Math.pow(_brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function darker(k) {\n    k = k == null ? _darker : Math.pow(_darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function rgb() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);\n  },\n  displayable: function displayable() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;\n  },\n  formatHsl: function formatHsl() {\n    var a = this.opacity;\n    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"hsl(\" : \"hsla(\") + (this.h || 0) + \", \" + (this.s || 0) * 100 + \"%, \" + (this.l || 0) * 100 + \"%\" + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n}));\n/* From FvD 13.37, CSS Color Module Level 3 */\n\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;\n}","export default function (constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n\n  for (var key in definition) {\n    prototype[key] = definition[key];\n  }\n\n  return prototype;\n}","export default function (x) {\n  return function () {\n    return x;\n  };\n}","import constant from \"./constant.js\";\n\nfunction linear(a, d) {\n  return function (t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function (a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}"],"sourceRoot":""}