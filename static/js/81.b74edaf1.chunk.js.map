{"version":3,"sources":["components/Articles/ReactZdog/ReactZdog.jsx"],"names":["TAU","Math","PI","ReactZdog","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","className","react_zdog__WEBPACK_IMPORTED_MODULE_3__","zoom","diameter","rotate","x","translate","y","stroke","color","fill","Dogs","AnimShape","Shape","AnimAnchor","Anchor","AnimEllipse","Ellipse","AnimHemisphere","Hemisphere","colors","_","times","columns","Dog","d3","domain","range","_useState","useState","_useState2","Object","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","up","setUp","_useState3","_useState4","iteration","setIteration","useEffect","setInterval","previous","_useSpring","useSpring","size","sample","rotation","group","useRef","time","useRender","current","cos","ref","interpolate","r","DogHead","DogNose","DogEyes","DogEars","_ref","path","z","_ref2","_useMemo","useMemo","position","noseLength","noseballRadius","anim","brighter","toString","quarters","_ref3","_useState5","_useState6","isBlinking","setIsBlinking","timeout","setTimeout","clearTimeout","_useMemo2","_ref4","eyeRadius","eyeBallRadius","eyeSpeckRadius","eyebrowRadius","eyebrowRotation","offset","eyeballX","eyeballY","groupY","groupZ","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","eyeLidQuarters","i","key","abs","scale","_ref5","_useMemo3","areDown","round","random","earRadius","earRotation","darker"],"mappings":"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","file":"static/js/81.b74edaf1.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from \"react\"\nimport { Illustration, Anchor, Ellipse, Shape, Hemisphere, useRender } from 'react-zdog'\nimport { a, useSpring } from 'react-spring'\nimport _ from \"lodash\"\nimport * as d3 from \"d3\"\n\nimport \"./ReactZdog.scss\"\n\nconst TAU = Math.PI * 2\nconst ReactZdog = () => {\n    return (\n        <div className=\"ReactZdog\">\n            <Illustration zoom={120}>\n                <Ellipse diameter={1} rotate={{ x: -TAU / 3 }} translate={{ y: 2 }} stroke={1} color=\"#fff\" fill />\n                <Ellipse diameter={0.5} rotate={{ x: -TAU / 3 }} translate={{ x: -1, y: 2 }} stroke={1} color=\"#fff\" fill />\n                <Ellipse diameter={0.1} rotate={{ x: -TAU / 3 }} translate={{ x: 1, y: 2 }} stroke={1} color=\"#fff\" fill />\n                <Dogs />\n            </Illustration>\n        </div>\n    )\n}\n\nexport default ReactZdog\n\n\nconst AnimShape = a(Shape)\nconst AnimAnchor = a(Anchor)\nconst AnimEllipse = a(Ellipse)\nconst AnimHemisphere = a(Hemisphere)\n\nconst columns = 4\nconst rows = 3\nconst spacing = 4\nconst numberOfDogs = columns * rows\n\n\nconst colors = [\"#dadada\", \"#e1b12c\", \"#40739e\", \"#a5b1c2\", \"#4b6584\", \"#22a6b3\", \"#c7ecee\", \"#686de0\"]\nlet dogs = _.times(numberOfDogs, {})\nconst Dogs = () => {\n  return (\n    <group>\n        <Dog />\n    </group>\n  )\n}\n\n\nconst colorScale = d3.scaleLinear()\n  .domain([0,1])\n  .range([\"#e1b12c\", \"#40739e\"])\n\nfunction Dog() {\n  const [up, setUp] = useState(true)\n  const [iteration, setIteration] = useState(0)\n  useEffect(() => void setInterval(() => {\n    setUp(previous => !previous)\n    setIteration(iteration => iteration + 1)\n  }, 1500), [])\n  // Turn static values into animated values\n  const { rotation, color, size } = useSpring({\n    size: up ? 1.2 : 1.5,\n    color: up ? _.sample(colors) : _.sample(colors),\n    rotation: up ? 0 : Math.PI\n  })\n\n  const group = useRef()\n  let time = 0\n  useRender(() => (\n    group.current.rotate.y = Math.cos((time += 0.3) / TAU) * 0.3\n  ))\n\n  return (\n    <Shape ref={group} stroke={0}>\n      <AnimAnchor rotate={rotation.interpolate(r => ({ x: TAU / 1 + r / 40 }))}>\n          <AnimShape stroke={0}>\n            <DogHead {...{color, iteration}} />\n            <DogNose {...{color, iteration}} />\n            <DogEyes {...{color, iteration}} />\n            <DogEars {...{color, iteration}} />\n          </AnimShape>\n      </AnimAnchor>\n    </Shape>\n  )\n}\n\n\nconst DogHead = ({ color }) => (\n    <AnimShape path={[{ z: -0.1 }, { z: 0.1 }]} color={color} stroke={2} />\n)\n\nconst DogNose = ({ color, iteration }) => {\n  const {position, noseLength, noseballRadius} = useMemo(() => {\n    const position = { y: d3.randomNormal(0.4, 0.1)(), z: d3.randomNormal(0.3, 0.1)()}\n    const noseLength = d3.randomNormal(1.2, 0.1)()\n    const noseballRadius = d3.randomNormal(0.5, 0.05)()\n    return {position, noseLength, noseballRadius}\n  }, [iteration])\n\n  const anim = useSpring({\n    noseLength,\n    noseballRadius,\n  })\n\n  return (\n    <Shape translate={position} stroke={0}>\n      <AnimShape\n        stroke={anim.noseLength}\n        path={[{ z: 0 }, { z: 0.1 }]}\n        color={color.interpolate(color => {\n          return d3.color(color) ? d3.color(color).brighter(0.5).toString() : color\n        })}\n      />\n      <AnimShape\n        stroke={anim.noseballRadius}\n        path={[{ y: -0.15, z: noseLength * 0.6 }]}\n        color=\"#2f3640\"\n      />\n\n      <AnimEllipse\n        diameter={0.44}\n        quarters={1}\n        translate={{ y: 0.3, z: noseLength * 0.5 }}\n        rotate={{ x: -TAU / 10, z: TAU / 2.7 }}\n        color=\"#2f3640\"\n        stroke={0.07}\n      />\n    </Shape>\n  )\n}\n\nconst DogEyes = ({ color, iteration }) => {\n  const [isBlinking, setIsBlinking] = useState(false)\n  useEffect(() => void setInterval(() => {\n    setIsBlinking(true)\n    const timeout = setTimeout(() => {\n      setIsBlinking(false)\n    }, 1000)\n\n    return () => clearTimeout(timeout)\n  }, 1500), [])\n\n  const {\n    eyeRadius, eyeBallRadius, eyeSpeckRadius, eyebrowRadius, eyebrowRotation, offset, eyeballX, eyeballY, groupY, groupZ\n  } = useMemo(() => {\n    const eyeRadius = d3.randomNormal(0.5, 0.05)()\n    const eyeBallRadius = eyeRadius * d3.randomNormal(0.6, 0.1)()\n    const eyeSpeckRadius = d3.randomNormal(0.02, 0.005)()\n    const eyebrowRadius = d3.randomNormal(0.3, 0.03)()\n    const eyebrowRotation = d3.randomNormal(0, 0.6)()\n    const offset = d3.randomNormal(0.55, 0.05)()\n    const eyeballX = d3.randomNormal(0, 0.05)()\n    const eyeballY = -d3.randomNormal(0, 0.05)()\n\n    const groupY = -d3.randomNormal(0.3, 0.1)()\n    const groupZ = d3.randomNormal(0.6, 0.05)()\n    return {\n      eyeRadius, eyeBallRadius, eyeSpeckRadius, eyebrowRadius, eyebrowRotation, offset, eyeballX, eyeballY, groupY, groupZ, groupY, groupZ\n    }\n  }, [iteration])\n\n  const anim = useSpring({\n    eyeRadius, eyeBallRadius, eyeSpeckRadius, eyebrowRadius, eyebrowRotation, offset, eyeballX, eyeballY, groupY, groupZ,\n    eyeLidQuarters: isBlinking ? 1 : 0.1,\n  })\n  return (\n    <AnimShape translate={{ y: groupY, z: groupZ }} stroke={0}>\n      {_.times(2, i => (\n        <AnimShape key={i} translate={{ x: offset * (i ? 1 : -1) }} stroke={0}>\n          <AnimShape stroke={anim.eyeRadius} color=\"#fff\" />\n          <AnimShape stroke={anim.eyeBallRadius} translate={{\n            x: eyeballX,\n            y: eyeballY,\n            z: (eyeRadius / 2) - (\n                  Math.abs(eyeballX) + Math.abs(eyeballY)\n              ) * 0.96\n            }}\n            color=\"#353b48\"\n          />\n          <AnimShape stroke={anim.eyeSpeckRadius} translate={{\n            x: eyeballX,\n            y: eyeballY,\n            z: (eyeRadius / 2) - (\n                  Math.abs(eyeballX) + Math.abs(eyeballY)\n              ) * 0.9\n            }}\n            color=\"#fff\"\n          />\n          {/* <AnimShape stroke={anim.eyebrowRadius}\n            path={[{ x: -0.1, z: -0.1 }, { x: 0.1, z: 0.1 }]}\n            translate={{\n              x: (eyebrowRotation > 0 ? 0.3 : -0.3) * (i ? 1 : -1),\n              y: -0.2,\n              z: eyebrowRotation > 0 ? -0.4 : -0.2\n            }} color={color}\n          /> */}\n          <AnimHemisphere\n            // stroke={0.7}\n            stroke={0.1}\n            // diameter={anim.eyeRadius}\n            // diameter={(anim.eyeRadius * 2.5)}\n            translate={{ y: -0.1, z: 0 }}\n            quarters={anim.eyeLidQuarters}\n            scale={{x: 0.8, y: 0.8}}\n            // rotate={{ x: TAU * 0, z: TAU * 0.875 }}\n            rotate={\n              anim.eyebrowRotation.interpolate(eyebrowRotation => ({\n                z: TAU * (eyebrowRotation * (i ? -1 : 1)),\n              }))\n            }\n            fill={false}\n            color={color.interpolate(color => {\n              return d3.color(color) ? d3.color(color).brighter(2.5).toString() : color\n            })}\n            // color={\"green\"}\n          />\n        </AnimShape>\n      ))}\n    </AnimShape>\n  )\n}\n\nconst DogEars = ({ color, iteration }) => {\n  const {\n    areDown, earRadius, earRotation, offset, groupY, groupZ\n   } = useMemo(() => {\n    const areDown = !!Math.round(Math.random())\n    const earRadius = d3.randomNormal(areDown ? 0.5 : 0.5, 0.1)()\n    const earRotation = d3.randomNormal(0, 2)()\n    const offset = d3.randomNormal(areDown ? 1.1 : 0.9, 0.1)()\n    const groupY = d3.randomNormal(0.5, 0.1)()\n    const groupZ = d3.randomNormal(-0.4, 0.05)()\n\n    return {\n      areDown, earRadius, earRotation, offset, groupY, groupZ\n    }\n  }, [iteration])\n\n  const anim = useSpring({\n    earRadius, earRotation, offset, groupY, groupZ\n  })\n\n  return (\n    <Shape translate={{ y: groupY, z: groupZ }} stroke={0}>\n      {_.times(2, i => (\n          <AnimShape\n            key={i}\n            stroke={anim.earRadius}\n            path={[\n              { x: -0.05, y: areDown ? -0.05 : 0, z: -0.03 },\n              { x:  0.05, y: areDown ?  0.05 : 0, z:  0.03 },\n            ]}\n            translate={\n              anim.offset.interpolate(offset => ({\n                x: offset * (i ? -1 : 1),\n                y: areDown ? -0.8 : 0,\n              }))\n            }\n            rotate={\n              anim.earRotation.interpolate(earRotation => ({\n                z: areDown\n                  ? anim.earRotation * i ?  1 : -1\n                  : anim.earRotation * i ? -1 :  1\n              }))\n            }\n            color={color.interpolate(color => {\n              return d3.color(color) ? d3.color(color).darker(0.5).toString() : color\n            })}\n          />\n      ))}\n    </Shape>\n  )\n}\n\nfunction getPointFromAngleAndDistance(angle, distance) {\n  return {\n    x: Math.round(Math.cos(angle * Math.PI / 180) * distance),\n    y: Math.round(Math.sin(angle * Math.PI / 180) * distance),\n  }\n}"],"sourceRoot":""}