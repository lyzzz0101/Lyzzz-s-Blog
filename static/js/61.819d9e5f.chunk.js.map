{"version":3,"sources":["components/Articles/Movies/movies.csv","components/Articles/Movies/credits.csv","components/Articles/Movies/Movies.jsx","../node_modules/numeral/numeral.js"],"names":["module","exports","__webpack_require__","p","Movies","_useState","useState","_useState2","Object","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","movies","setMovies","fetchMovies","_ref","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","basicMovies","credits","parsedCredits","creditsObect","parsedMovies","wrap","_context","prev","next","csv","moviesUrl","sent","creditsUrl","parseRawArray","forEach","credit","movie_id","map","d","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread2__WEBPACK_IMPORTED_MODULE_1__","id","release_date","Date","filter","cast","sort","b","console","log","stop","apply","this","arguments","useEffect","react__WEBPACK_IMPORTED_MODULE_4___default","createElement","className","_ref2","_ref3","color","label","key","style","movie","index","Movie","assign","lastYear","getYear","genderColors","timeFormat","date","_ref4","title","_ref4$cast","year","_ref5","length","undefined","gender","character","name","background","alt","concat","array","parsedD","keys","startsWith","JSON","parse","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","_numeral","_","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","leadingCount","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","abbr","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","_isNaN","_x","search","insert","subString","start","reduce","callback","TypeError","t","len","k","multiplier","x","parts","correctionFactor","Array","prototype","call","accum","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","toLowerCase","localeData","Error","reset","property","register","type","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","_format","space","splice","join","base","suffixes","binary","unformatRegex","item","_format2","bytes","suffix","bytesMultiplier","_format3","symbols","before","after","_format4","toExponential","_format5","_format6","_format7","hours","floor","minutes","seconds","timeArray"],"mappings":"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","file":"static/js/61.819d9e5f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"64346a71897b5741d553d34b86088603.csv\";","module.exports = __webpack_public_path__ + \"6c5e0e12bfbc527697d7977d86b97ed4.csv\";","import { useState, useMemo, usePrevious, useEffect } from 'react';\nimport React, {Component} from \"react\"\nimport PropTypes from \"prop-types\"\nimport numeral from \"numeral\"\nimport { csv, json, timeFormat } from \"d3\"\n\nimport classNames from \"classnames\"\nimport { uniq, uniqueId } from \"lodash\"\nimport { useInterval } from 'utils/utils.js';\nimport moviesUrl from \"./movies.csv\"\nimport creditsUrl from \"./credits.csv\"\n// import moviesUrl from \"./movies2.csv\"\nimport moviesShortUrl from \"./movies-short.json\"\n\nimport Link from \"components/_ui/Link/Link\"\nimport Icon from \"components/_ui/Icon/Icon\"\nimport Button from \"components/_ui/Button/Button\"\n\nimport './Movies.scss';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([])\n  // const [creditsById, setCreditsById] = useState({})\n\n  const fetchMovies = async () => {\n    const basicMovies = await csv(moviesUrl)\n    const credits = await csv(creditsUrl)\n    const parsedCredits = parseRawArray(credits)\n    let creditsObect = {}\n    parsedCredits.forEach(credit => {\n      creditsObect[credit.movie_id] = credit\n    })\n    const parsedMovies = parseRawArray(basicMovies)\n      // .sort((a,b) => (\n      //   +a.popularity - +b.popularity\n      // ))\n      // .slice(0, 300)\n      .map(d => ({\n        ...d,\n        ...parsedCredits[d.id],\n        release_date: new Date(d.release_date),\n      }))\n      .filter(d => d.cast)\n      .sort((a,b) => (\n        a.release_date - b.release_date\n      ))\n      // .slice(0, 500)\n    // const res = await json(moviesShortUrl)\n    console.log({\n      parsedMovies,\nparsedCredits\n    })\n    setMovies(parsedMovies)\n    // setCreditsById(creditsObect)\n  }\n\n  useEffect(() => {\n    fetchMovies()\n  }, [])\n\n  return (\n    <div className=\"Movies\">\n    <div className=\"Movies__title\">\n      <h1>\n        Gender in Movies\n      </h1>\n      <div className=\"Movies__key\">\n        {[\n          [\"#9980FA\", \"Female\"],\n          [\"#2c3e50\", \"Male\"],\n        ].map(([color, label]) => (\n          <div className=\"Movies__key__item\" key={label} style={{color}}>\n            { label }\n          </div>\n        ))}\n\n      </div>\n      </div>\n\n      <div className=\"Movies__list\">\n        {movies.map((movie, index) => (\n          <Movie\n            key={movie.id}\n            {...movie}\n            lastYear={getYear((movies[index - 1] || {}).release_date)}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Movies\n\n        // {\n        //   \"cast_id\": 242,\n        //   \"character\": \"Jake Sully\",\n        //   \"credit_id\": \"5602a8a7c3a3685532001c9a\",\n        //   \"gender\": 2,\n        //   \"id\": 65731,\n        //   \"name\": \"Sam Worthington\",\n        //   \"order\": 0\n        // },\n\nconst genderColors = [\n  \"#dbdbe7\",\n  \"#9980FA\",\n  \"#2c3e50\",\n]\nconst formatDate = timeFormat(\"%M/%Y\")\nconst getYear = date => date ? +timeFormat(\"%Y\")(date) : 0\nconst Movie = ({ id, title, cast=[], release_date, lastYear }) => {\n  const year = getYear(release_date)\n  return (\n    <div className=\"Movie\" key={id}>\n      <div className=\"Movie__year\">\n        { year != lastYear && year }\n        {/* ({ formatDate(release_date) }) */}\n      </div>\n      <div className=\"Movie__title\">\n        { title }\n        {/* ({ formatDate(release_date) }) */}\n      </div>\n      <div className=\"Movie__cast\">\n        {cast && cast.map && cast.map(({ id, character, gender, name }={}) => (\n          <div className=\"Movie__cast__item\" key={id} style={{\n            background: genderColors[gender] || \"#fff\"\n          }} alt={`${ name } - ${ gender }`}>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nconst parseRawArray = array => (\n  array.map(d => {\n    let parsedD = {}\n    Object.keys(d).forEach(key => {\n      if (d[key].startsWith(\"[{\" || d[key] == \"[]\")) {\n        parsedD[key] = JSON.parse(d[key])\n      } else {\n        parsedD[key] = d[key]\n      }\n    })\n    return parsedD\n  })\n)\n","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    global.numeral = factory();\n  }\n})(this, function () {\n  /************************************\n      Variables\n  ************************************/\n  var _numeral,\n      _,\n      VERSION = '2.0.6',\n      formats = {},\n      locales = {},\n      defaults = {\n    currentLocale: 'en',\n    zeroFormat: null,\n    nullFormat: null,\n    defaultFormat: '0,0',\n    scalePercentBy100: true\n  },\n      options = {\n    currentLocale: defaults.currentLocale,\n    zeroFormat: defaults.zeroFormat,\n    nullFormat: defaults.nullFormat,\n    defaultFormat: defaults.defaultFormat,\n    scalePercentBy100: defaults.scalePercentBy100\n  };\n  /************************************\n      Constructors\n  ************************************/\n  // Numeral prototype object\n\n\n  function Numeral(input, number) {\n    this._input = input;\n    this._value = number;\n  }\n\n  _numeral = function numeral(input) {\n    var value, kind, unformatFunction, regexp;\n\n    if (_numeral.isNumeral(input)) {\n      value = input.value();\n    } else if (input === 0 || typeof input === 'undefined') {\n      value = 0;\n    } else if (input === null || _.isNaN(input)) {\n      value = null;\n    } else if (typeof input === 'string') {\n      if (options.zeroFormat && input === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        for (kind in formats) {\n          regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n          if (regexp && input.match(regexp)) {\n            unformatFunction = formats[kind].unformat;\n            break;\n          }\n        }\n\n        unformatFunction = unformatFunction || _numeral._.stringToNumber;\n        value = unformatFunction(input);\n      }\n    } else {\n      value = Number(input) || null;\n    }\n\n    return new Numeral(input, value);\n  }; // version number\n\n\n  _numeral.version = VERSION; // compare numeral object\n\n  _numeral.isNumeral = function (obj) {\n    return obj instanceof Numeral;\n  }; // helper functions\n\n\n  _numeral._ = _ = {\n    // formats numbers separators, decimals places, signs, abbreviations\n    numberToFormat: function numberToFormat(value, format, roundingFunction) {\n      var locale = locales[_numeral.options.currentLocale],\n          negP = false,\n          optDec = false,\n          leadingCount = 0,\n          abbr = '',\n          trillion = 1000000000000,\n          billion = 1000000000,\n          million = 1000000,\n          thousand = 1000,\n          decimal = '',\n          neg = false,\n          abbrForce,\n          // force abbreviation\n      abs,\n          min,\n          max,\n          power,\n          int,\n          precision,\n          signed,\n          thousands,\n          output; // make sure we never format a null value\n\n      value = value || 0;\n      abs = Math.abs(value); // see if we should use parentheses for negative number or if we should prefix with a sign\n      // if both are present we default to parentheses\n\n      if (_numeral._.includes(format, '(')) {\n        negP = true;\n        format = format.replace(/[\\(|\\)]/g, '');\n      } else if (_numeral._.includes(format, '+') || _numeral._.includes(format, '-')) {\n        signed = _numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n        format = format.replace(/[\\+|\\-]/g, '');\n      } // see if abbreviation is wanted\n\n\n      if (_numeral._.includes(format, 'a')) {\n        abbrForce = format.match(/a(k|m|b|t)?/);\n        abbrForce = abbrForce ? abbrForce[1] : false; // check for space before abbreviation\n\n        if (_numeral._.includes(format, ' a')) {\n          abbr = ' ';\n        }\n\n        format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n        if (abs >= trillion && !abbrForce || abbrForce === 't') {\n          // trillion\n          abbr += locale.abbreviations.trillion;\n          value = value / trillion;\n        } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n          // billion\n          abbr += locale.abbreviations.billion;\n          value = value / billion;\n        } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n          // million\n          abbr += locale.abbreviations.million;\n          value = value / million;\n        } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n          // thousand\n          abbr += locale.abbreviations.thousand;\n          value = value / thousand;\n        }\n      } // check for optional decimals\n\n\n      if (_numeral._.includes(format, '[.]')) {\n        optDec = true;\n        format = format.replace('[.]', '.');\n      } // break number and format\n\n\n      int = value.toString().split('.')[0];\n      precision = format.split('.')[1];\n      thousands = format.indexOf(',');\n      leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n      if (precision) {\n        if (_numeral._.includes(precision, '[')) {\n          precision = precision.replace(']', '');\n          precision = precision.split('[');\n          decimal = _numeral._.toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n        } else {\n          decimal = _numeral._.toFixed(value, precision.length, roundingFunction);\n        }\n\n        int = decimal.split('.')[0];\n\n        if (_numeral._.includes(decimal, '.')) {\n          decimal = locale.delimiters.decimal + decimal.split('.')[1];\n        } else {\n          decimal = '';\n        }\n\n        if (optDec && Number(decimal.slice(1)) === 0) {\n          decimal = '';\n        }\n      } else {\n        int = _numeral._.toFixed(value, 0, roundingFunction);\n      } // check abbreviation again after rounding\n\n\n      if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n        int = String(Number(int) / 1000);\n\n        switch (abbr) {\n          case locale.abbreviations.thousand:\n            abbr = locale.abbreviations.million;\n            break;\n\n          case locale.abbreviations.million:\n            abbr = locale.abbreviations.billion;\n            break;\n\n          case locale.abbreviations.billion:\n            abbr = locale.abbreviations.trillion;\n            break;\n        }\n      } // format number\n\n\n      if (_numeral._.includes(int, '-')) {\n        int = int.slice(1);\n        neg = true;\n      }\n\n      if (int.length < leadingCount) {\n        for (var i = leadingCount - int.length; i > 0; i--) {\n          int = '0' + int;\n        }\n      }\n\n      if (thousands > -1) {\n        int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n      }\n\n      if (format.indexOf('.') === 0) {\n        int = '';\n      }\n\n      output = int + decimal + (abbr ? abbr : '');\n\n      if (negP) {\n        output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n      } else {\n        if (signed >= 0) {\n          output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n        } else if (neg) {\n          output = '-' + output;\n        }\n      }\n\n      return output;\n    },\n    // unformats numbers separators, decimals places, signs, abbreviations\n    stringToNumber: function stringToNumber(string) {\n      var locale = locales[options.currentLocale],\n          stringOriginal = string,\n          abbreviations = {\n        thousand: 3,\n        million: 6,\n        billion: 9,\n        trillion: 12\n      },\n          abbreviation,\n          value,\n          i,\n          regexp;\n\n      if (options.zeroFormat && string === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        value = 1;\n\n        if (locale.delimiters.decimal !== '.') {\n          string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n        }\n\n        for (abbreviation in abbreviations) {\n          regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n          if (stringOriginal.match(regexp)) {\n            value *= Math.pow(10, abbreviations[abbreviation]);\n            break;\n          }\n        } // check for negative number\n\n\n        value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1; // remove non numbers\n\n        string = string.replace(/[^0-9\\.]+/g, '');\n        value *= Number(string);\n      }\n\n      return value;\n    },\n    isNaN: function (_isNaN) {\n      function isNaN(_x) {\n        return _isNaN.apply(this, arguments);\n      }\n\n      isNaN.toString = function () {\n        return _isNaN.toString();\n      };\n\n      return isNaN;\n    }(function (value) {\n      return typeof value === 'number' && isNaN(value);\n    }),\n    includes: function includes(string, search) {\n      return string.indexOf(search) !== -1;\n    },\n    insert: function insert(string, subString, start) {\n      return string.slice(0, start) + subString + string.slice(start);\n    },\n    reduce: function reduce(array, callback\n    /*, initialValue*/\n    ) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.reduce called on null or undefined');\n      }\n\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n\n      var t = Object(array),\n          len = t.length >>> 0,\n          k = 0,\n          value;\n\n      if (arguments.length === 3) {\n        value = arguments[2];\n      } else {\n        while (k < len && !(k in t)) {\n          k++;\n        }\n\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n\n        value = t[k++];\n      }\n\n      for (; k < len; k++) {\n        if (k in t) {\n          value = callback(value, t[k], k, t);\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    multiplier: function multiplier(x) {\n      var parts = x.toString().split('.');\n      return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n    },\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    correctionFactor: function correctionFactor() {\n      var args = Array.prototype.slice.call(arguments);\n      return args.reduce(function (accum, next) {\n        var mn = _.multiplier(next);\n\n        return accum > mn ? accum : mn;\n      }, 1);\n    },\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    toFixed: function toFixed(value, maxDecimals, roundingFunction, optionals) {\n      var splitValue = value.toString().split('.'),\n          minDecimals = maxDecimals - (optionals || 0),\n          boundedPrecision,\n          optionalsRegExp,\n          power,\n          output; // Use the smallest precision value possible to avoid errors from floating point representation\n\n      if (splitValue.length === 2) {\n        boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n      } else {\n        boundedPrecision = minDecimals;\n      }\n\n      power = Math.pow(10, boundedPrecision); // Multiply up by precision, round accurately, then divide and use native toFixed():\n\n      output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n      if (optionals > maxDecimals - boundedPrecision) {\n        optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n        output = output.replace(optionalsRegExp, '');\n      }\n\n      return output;\n    }\n  }; // avaliable options\n\n  _numeral.options = options; // avaliable formats\n\n  _numeral.formats = formats; // avaliable formats\n\n  _numeral.locales = locales; // This function sets the current locale.  If\n  // no arguments are passed in, it will simply return the current global\n  // locale key.\n\n  _numeral.locale = function (key) {\n    if (key) {\n      options.currentLocale = key.toLowerCase();\n    }\n\n    return options.currentLocale;\n  }; // This function provides access to the loaded locale data.  If\n  // no arguments are passed in, it will simply return the current\n  // global locale object.\n\n\n  _numeral.localeData = function (key) {\n    if (!key) {\n      return locales[options.currentLocale];\n    }\n\n    key = key.toLowerCase();\n\n    if (!locales[key]) {\n      throw new Error('Unknown locale : ' + key);\n    }\n\n    return locales[key];\n  };\n\n  _numeral.reset = function () {\n    for (var property in defaults) {\n      options[property] = defaults[property];\n    }\n  };\n\n  _numeral.zeroFormat = function (format) {\n    options.zeroFormat = typeof format === 'string' ? format : null;\n  };\n\n  _numeral.nullFormat = function (format) {\n    options.nullFormat = typeof format === 'string' ? format : null;\n  };\n\n  _numeral.defaultFormat = function (format) {\n    options.defaultFormat = typeof format === 'string' ? format : '0.0';\n  };\n\n  _numeral.register = function (type, name, format) {\n    name = name.toLowerCase();\n\n    if (this[type + 's'][name]) {\n      throw new TypeError(name + ' ' + type + ' already registered.');\n    }\n\n    this[type + 's'][name] = format;\n    return format;\n  };\n\n  _numeral.validate = function (val, culture) {\n    var _decimalSep, _thousandSep, _currSymbol, _valArray, _abbrObj, _thousandRegEx, localeData, temp; //coerce val to string\n\n\n    if (typeof val !== 'string') {\n      val += '';\n\n      if (console.warn) {\n        console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n      }\n    } //trim whitespaces from either sides\n\n\n    val = val.trim(); //if val is just digits return true\n\n    if (!!val.match(/^\\d+$/)) {\n      return true;\n    } //if val is empty return false\n\n\n    if (val === '') {\n      return false;\n    } //get the decimal and thousands separator from numeral.localeData\n\n\n    try {\n      //check if the culture is understood by numeral. if not, default it to current locale\n      localeData = _numeral.localeData(culture);\n    } catch (e) {\n      localeData = _numeral.localeData(_numeral.locale());\n    } //setup the delimiters and currency symbol based on culture/locale\n\n\n    _currSymbol = localeData.currency.symbol;\n    _abbrObj = localeData.abbreviations;\n    _decimalSep = localeData.delimiters.decimal;\n\n    if (localeData.delimiters.thousands === '.') {\n      _thousandSep = '\\\\.';\n    } else {\n      _thousandSep = localeData.delimiters.thousands;\n    } // validating currency symbol\n\n\n    temp = val.match(/^[^\\d]+/);\n\n    if (temp !== null) {\n      val = val.substr(1);\n\n      if (temp[0] !== _currSymbol) {\n        return false;\n      }\n    } //validating abbreviation symbol\n\n\n    temp = val.match(/[^\\d]+$/);\n\n    if (temp !== null) {\n      val = val.slice(0, -1);\n\n      if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n        return false;\n      }\n    }\n\n    _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n    if (!val.match(/[^\\d.,]/g)) {\n      _valArray = val.split(_decimalSep);\n\n      if (_valArray.length > 2) {\n        return false;\n      } else {\n        if (_valArray.length < 2) {\n          return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx);\n        } else {\n          if (_valArray[0].length === 1) {\n            return !!_valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          } else {\n            return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /************************************\n      Numeral Prototype\n  ************************************/\n\n\n  _numeral.fn = Numeral.prototype = {\n    clone: function clone() {\n      return _numeral(this);\n    },\n    format: function format(inputString, roundingFunction) {\n      var value = this._value,\n          format = inputString || options.defaultFormat,\n          kind,\n          output,\n          formatFunction; // make sure we have a roundingFunction\n\n      roundingFunction = roundingFunction || Math.round; // format based on value\n\n      if (value === 0 && options.zeroFormat !== null) {\n        output = options.zeroFormat;\n      } else if (value === null && options.nullFormat !== null) {\n        output = options.nullFormat;\n      } else {\n        for (kind in formats) {\n          if (format.match(formats[kind].regexps.format)) {\n            formatFunction = formats[kind].format;\n            break;\n          }\n        }\n\n        formatFunction = formatFunction || _numeral._.numberToFormat;\n        output = formatFunction(value, format, roundingFunction);\n      }\n\n      return output;\n    },\n    value: function value() {\n      return this._value;\n    },\n    input: function input() {\n      return this._input;\n    },\n    set: function set(value) {\n      this._value = Number(value);\n      return this;\n    },\n    add: function add(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum + Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n      return this;\n    },\n    subtract: function subtract(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum - Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n      return this;\n    },\n    multiply: function multiply(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 1);\n      return this;\n    },\n    divide: function divide(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback);\n      return this;\n    },\n    difference: function difference(value) {\n      return Math.abs(_numeral(this._value).subtract(value).value());\n    }\n  };\n  /************************************\n      Default Locale && Format\n  ************************************/\n\n  _numeral.register('locale', 'en', {\n    delimiters: {\n      thousands: ',',\n      decimal: '.'\n    },\n    abbreviations: {\n      thousand: 'k',\n      million: 'm',\n      billion: 'b',\n      trillion: 't'\n    },\n    ordinal: function ordinal(number) {\n      var b = number % 10;\n      return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n    },\n    currency: {\n      symbol: '$'\n    }\n  });\n\n  (function () {\n    _numeral.register('format', 'bps', {\n      regexps: {\n        format: /(BPS)/,\n        unformat: /(BPS)/\n      },\n      format: function format(value, _format, roundingFunction) {\n        var space = _numeral._.includes(_format, ' BPS') ? ' ' : '',\n            output;\n        value = value * 10000; // check for space before BPS\n\n        _format = _format.replace(/\\s?BPS/, '');\n        output = _numeral._.numberToFormat(value, _format, roundingFunction);\n\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + 'BPS');\n          output = output.join('');\n        } else {\n          output = output + space + 'BPS';\n        }\n\n        return output;\n      },\n      unformat: function unformat(string) {\n        return +(_numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n      }\n    });\n  })();\n\n  (function () {\n    var decimal = {\n      base: 1000,\n      suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    },\n        binary = {\n      base: 1024,\n      suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n    };\n    var allSuffixes = decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n      return decimal.suffixes.indexOf(item) < 0;\n    }));\n    var unformatRegex = allSuffixes.join('|'); // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n\n    unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    _numeral.register('format', 'bytes', {\n      regexps: {\n        format: /([0\\s]i?b)/,\n        unformat: new RegExp(unformatRegex)\n      },\n      format: function format(value, _format2, roundingFunction) {\n        var output,\n            bytes = _numeral._.includes(_format2, 'ib') ? binary : decimal,\n            suffix = _numeral._.includes(_format2, ' b') || _numeral._.includes(_format2, ' ib') ? ' ' : '',\n            power,\n            min,\n            max; // check for space before\n\n        _format2 = _format2.replace(/\\s?i?b/, '');\n\n        for (power = 0; power <= bytes.suffixes.length; power++) {\n          min = Math.pow(bytes.base, power);\n          max = Math.pow(bytes.base, power + 1);\n\n          if (value === null || value === 0 || value >= min && value < max) {\n            suffix += bytes.suffixes[power];\n\n            if (min > 0) {\n              value = value / min;\n            }\n\n            break;\n          }\n        }\n\n        output = _numeral._.numberToFormat(value, _format2, roundingFunction);\n        return output + suffix;\n      },\n      unformat: function unformat(string) {\n        var value = _numeral._.stringToNumber(string),\n            power,\n            bytesMultiplier;\n\n        if (value) {\n          for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n            if (_numeral._.includes(string, decimal.suffixes[power])) {\n              bytesMultiplier = Math.pow(decimal.base, power);\n              break;\n            }\n\n            if (_numeral._.includes(string, binary.suffixes[power])) {\n              bytesMultiplier = Math.pow(binary.base, power);\n              break;\n            }\n          }\n\n          value *= bytesMultiplier || 1;\n        }\n\n        return value;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'currency', {\n      regexps: {\n        format: /(\\$)/\n      },\n      format: function format(value, _format3, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n            symbols = {\n          before: _format3.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n          after: _format3.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n        },\n            output,\n            symbol,\n            i; // strip format of spaces and $\n\n        _format3 = _format3.replace(/\\s?\\$\\s?/, ''); // format the number\n\n        output = _numeral._.numberToFormat(value, _format3, roundingFunction); // update the before and after based on value\n\n        if (value >= 0) {\n          symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n          symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n        } else if (value < 0 && !_numeral._.includes(symbols.before, '-') && !_numeral._.includes(symbols.before, '(')) {\n          symbols.before = '-' + symbols.before;\n        } // loop through each before symbol\n\n\n        for (i = 0; i < symbols.before.length; i++) {\n          symbol = symbols.before[i];\n\n          switch (symbol) {\n            case '$':\n              output = _numeral._.insert(output, locale.currency.symbol, i);\n              break;\n\n            case ' ':\n              output = _numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n              break;\n          }\n        } // loop through each after symbol\n\n\n        for (i = symbols.after.length - 1; i >= 0; i--) {\n          symbol = symbols.after[i];\n\n          switch (symbol) {\n            case '$':\n              output = i === symbols.after.length - 1 ? output + locale.currency.symbol : _numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n              break;\n\n            case ' ':\n              output = i === symbols.after.length - 1 ? output + ' ' : _numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n              break;\n          }\n        }\n\n        return output;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'exponential', {\n      regexps: {\n        format: /(e\\+|e-)/,\n        unformat: /(e\\+|e-)/\n      },\n      format: function format(value, _format4, roundingFunction) {\n        var output,\n            exponential = typeof value === 'number' && !_numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n            parts = exponential.split('e');\n        _format4 = _format4.replace(/e[\\+|\\-]{1}0/, '');\n        output = _numeral._.numberToFormat(Number(parts[0]), _format4, roundingFunction);\n        return output + 'e' + parts[1];\n      },\n      unformat: function unformat(string) {\n        var parts = _numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n            value = Number(parts[0]),\n            power = Number(parts[1]);\n        power = _numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n        function cback(accum, curr, currI, O) {\n          var corrFactor = _numeral._.correctionFactor(accum, curr),\n              num = accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);\n\n          return num;\n        }\n\n        return _numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'ordinal', {\n      regexps: {\n        format: /(o)/\n      },\n      format: function format(value, _format5, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n            output,\n            ordinal = _numeral._.includes(_format5, ' o') ? ' ' : ''; // check for space before\n\n        _format5 = _format5.replace(/\\s?o/, '');\n        ordinal += locale.ordinal(value);\n        output = _numeral._.numberToFormat(value, _format5, roundingFunction);\n        return output + ordinal;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'percentage', {\n      regexps: {\n        format: /(%)/,\n        unformat: /(%)/\n      },\n      format: function format(value, _format6, roundingFunction) {\n        var space = _numeral._.includes(_format6, ' %') ? ' ' : '',\n            output;\n\n        if (_numeral.options.scalePercentBy100) {\n          value = value * 100;\n        } // check for space before %\n\n\n        _format6 = _format6.replace(/\\s?\\%/, '');\n        output = _numeral._.numberToFormat(value, _format6, roundingFunction);\n\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + '%');\n          output = output.join('');\n        } else {\n          output = output + space + '%';\n        }\n\n        return output;\n      },\n      unformat: function unformat(string) {\n        var number = _numeral._.stringToNumber(string);\n\n        if (_numeral.options.scalePercentBy100) {\n          return number * 0.01;\n        }\n\n        return number;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'time', {\n      regexps: {\n        format: /(:)/,\n        unformat: /(:)/\n      },\n      format: function format(value, _format7, roundingFunction) {\n        var hours = Math.floor(value / 60 / 60),\n            minutes = Math.floor((value - hours * 60 * 60) / 60),\n            seconds = Math.round(value - hours * 60 * 60 - minutes * 60);\n        return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n      },\n      unformat: function unformat(string) {\n        var timeArray = string.split(':'),\n            seconds = 0; // turn hours and minutes into seconds and add them all up\n\n        if (timeArray.length === 3) {\n          // hours\n          seconds = seconds + Number(timeArray[0]) * 60 * 60; // minutes\n\n          seconds = seconds + Number(timeArray[1]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n          // minutes\n          seconds = seconds + Number(timeArray[0]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[1]);\n        }\n\n        return Number(seconds);\n      }\n    });\n  })();\n\n  return _numeral;\n});"],"sourceRoot":""}