{"version":3,"sources":["components/Articles/WDVP/WDVPMap.jsx"],"names":["countriesByName","_","fromPairs","map","rawData","country","Country","blackAndWhiteColorScale","createScale","domain","range","defaultMetrics","sortBy","without","metricRankedCorrelationData","toLower","percentileMetrics","d","concat","countryOptions","value","label","color","valueToNumber","m","isFinite","WDVPMap","props","_this","Object","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_super","call","container","React","createRef","chart","createScales","_this$state","state","selectedCountry","sort","metricsByImportance","isAscending","isShowingPercentile","orderBy","metric","selectedCountryDifferences","getDifferences","values","pick","countryCorrelations","metricDifferences","numerator","mean","i","squaredDiffsForCountry","squaredDiffsForSelectedCountry","denominator","Math","sqrt","sortedCountries","toPairs","setState","arr","removeTooltip","_isMounted","hoveredCountry","tooltipPosition","onCountryHover","timeout","clearTimeout","countryElement","d3","current","select","_groups","containerBounds","getBoundingClientRect","bounds","x","min","left","width","window","innerWidth","y","top","height","e","setTimeout","onIsShowingPercentileSelect","newVal","onMetricChange","selectedMetric","onCountrySelectFromSelect","onCountrySelect","onCountrySelectLocal","onCountrySelectByNameLocal","onCountrySelectExternal","selectedCountryName","getCountryColor","countryName","metricScales","classNames","className","prevProps","_this2","_this$state2","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","getClassName","react_select__WEBPACK_IMPORTED_MODULE_6__","name","options","classNamePrefix","styles","selectStyles","onChange","slice","index","Fragment","key","style","onClick","components_ui_Icon_Icon__WEBPACK_IMPORTED_MODULE_12__","size","direction","viewBox","preserveAspectRatio","ref","WDVPMapCountry","id","path","countryPaths","onMouseEnter","onMouseLeave","isHovered","WDVPMapTooltip","correlation","transform","Component","formatCorrelation","memo","_ref","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","assign","title","fill","_ref2"],"mappings":"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","file":"static/js/14.0a578253.chunk.js","sourcesContent":["import React, {Component, PureComponent} from \"react\"\nimport Select from 'react-select';\nimport selectStyles from \"./selectStyles\"\nimport * as d3 from \"d3\"\nimport classNames from \"classnames\"\nimport _ from \"lodash\"\nimport { createScale } from 'components/_ui/Chart/utils/scale';\nimport Icon from 'components/_ui/Icon/Icon';\n\nimport rawData from \"./Wdvp_gov_score.json\"\nimport countryPaths from \"./country-paths.json\"\nimport metricsInfo from \"./metric-info.json\"\nimport metricRankedCorrelationData from \"./Wdvp_corr.json\"\n\nimport './WDVPMap.scss'\n\nconst countriesByName = _.fromPairs(\n  _.map(rawData, country => [country.Country, country])\n)\n\n// const blackAndWhiteColorScale = d3.scaleSequential(interpolateRdBu)\nconst blackAndWhiteColorScale = createScale({\n  domain: [-0.9, 0, 0.9],\n  // range: [\"#fafafa\", \"#45aeb1\"],\n  range: [\"#F97F51\", \"#eaeaea\", \"#3B3B98\"],\n})\nconst percentileOrRawOptions = [{\n  value: false,\n  label: \"Value\",\n},{\n  value: true,\n  label: \"Percentile\",\n}]\nconst defaultMetrics = _.sortBy(\n  _.without(_.map(metricRankedCorrelationData, \"fieldname\"), \"Area in km²\"),\n  _.toLower,\n)\nconst percentileMetrics = _.map(defaultMetrics, d => `${d}__percentile`)\nconst countryOptions = _.map(rawData, country => ({\n  value: country.Country,\n  label: country.Country,\n  color: \"#114D4D\",\n}))\nconst metricOptionsVerbose = _.map(defaultMetrics, m => ({\n  value: m,\n  label: m,\n  color: \"#114D4D\",\n}))\nconst valueToNumber = d => _.isFinite(d) ? d : 0\n\nclass WDVPMap extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedMetric: defaultMetrics[0],\n      selectedCountry: countriesByName[\"United States\"],\n      metricScales: {},\n      sortedCountries: [],\n      metricsByImportance: [],\n      hoveredCountry: null,\n      tooltipPosition: null,\n      countryCorrelations: null,\n      isShowingPercentile: false,\n    }\n  }\n  container = React.createRef()\n\n  getClassName() {\n    return classNames(\"WDVPMap\", \"WDVP__full-width\", this.props.className)\n  }\n\n  componentDidMount() {\n    this._isMounted = true\n    this.createScales()\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.selectedCountryName != this.props.selectedCountryName) this.onCountrySelectExternal()\n  }\n  componentWillUnmount() {\n    this._isMounted = false\n  }\n  chart = React.createRef()\n\n  createScales = () => {\n    const { sort, selectedCountry, isAscending, isShowingPercentile } = this.state\n\n    const metricsByImportance = _.orderBy(\n      _.map(defaultMetrics, metric => [\n        metric,\n        selectedCountry[`${metric}__percentile`] > 50 ? 100 - selectedCountry[`${metric}__percentile`] : selectedCountry[`${metric}__percentile`],\n        selectedCountry[`${metric}__percentile`],\n      ]),\n      1,\n      \"asc\",\n    )\n    const selectedCountryDifferences = this.getDifferences(_.values(_.pick(selectedCountry, percentileMetrics)))\n\n    const countryCorrelations = _.fromPairs(\n      _.map(rawData, country => {\n        const metricDifferences = this.getDifferences(_.values(_.pick(country, percentileMetrics)))\n        const numerator = _.mean(_.map(metricDifferences, (d,i) => d * selectedCountryDifferences[i]))\n        const squaredDiffsForCountry = _.mean(_.map(metricDifferences, (d,i) => d * d))\n        const squaredDiffsForSelectedCountry = _.mean(_.map(selectedCountryDifferences, (d,i) => d * d))\n        const denominator = Math.sqrt(squaredDiffsForCountry) * Math.sqrt(squaredDiffsForSelectedCountry)\n        return [country.Country, numerator / denominator]\n      })\n    )\n\n    const sortedCountries = _.map(\n      _.orderBy(\n        _.toPairs(countryCorrelations),\n        1,\n        \"desc\"\n      ),\n      0,\n    )\n\n    this.setState({ countryCorrelations, sortedCountries, metricsByImportance })\n  }\n\n  getDifferences = arr => {\n    const values = _.map(arr, valueToNumber)\n    const mean = _.mean(arr)\n    const differences = _.map(values, (d, i) => d - mean)\n    return differences\n  }\n\n  removeTooltip = () => {\n    if (!this._isMounted) return\n\n    this.setState({ hoveredCountry: null, tooltipPosition: null })\n  }\n\n  onCountryHover = country => () => {\n    if (!country) {\n      this.timeout = setTimeout(this.removeTooltip, 100)\n      return\n    }\n\n    if (this.timeout) clearTimeout(this.timeout)\n\n    try {\n      const countryElement = d3.select(this.container.current).select(`#country--${country[\"ISO-3166 alpha2\"]}`)._groups[0][0]\n      if (!countryElement) return;\n\n      const containerBounds = this.container.current.getBoundingClientRect()\n      const bounds = countryElement.getBoundingClientRect()\n      const tooltipPosition = {\n        x: Math.min(bounds.left - containerBounds.left + bounds.width / 2, window.innerWidth - 300),\n        y: bounds.top - containerBounds.top + bounds.height / 2,\n      }\n      this.setState({ tooltipPosition })\n    } catch(e) {\n\n    }\n\n    this.setState({ hoveredCountry: country })\n  }\n  onIsShowingPercentileSelect = newVal => this.setState({ isShowingPercentile: newVal.value }, this.createScales)\n  onMetricChange = metric => () => this.setState({ selectedMetric: metric })\n  onCountrySelectFromSelect = country => this.onCountrySelect(countriesByName[country.value])\n  onCountrySelectLocal = country => () => this.onCountrySelect(country)\n  onCountrySelectByNameLocal = country => () => this.onCountrySelect(countriesByName[country])\n  onCountrySelect = country => this.setState({ selectedCountry: country }, this.createScales)\n  onCountrySelectExternal = () => !!this.props.selectedCountryName && this.setState({ selectedCountry: countriesByName[this.props.selectedCountryName] }, this.createScales)\n\n  getCountryColor = countryName => countryName == this.state.selectedCountry.Country ? \"#1d1d27\" :\n    this.state.countryCorrelations &&\n    _.isFinite(this.state.countryCorrelations[countryName]) &&\n    blackAndWhiteColorScale(this.state.countryCorrelations[countryName])\n\n  render() {\n    const { metricScales, selectedMetric, selectedCountry, countryCorrelations, sortedCountries, metricsByImportance, hoveredCountry, tooltipPosition, isShowingPercentile } = this.state\n    const valueMetric = isShowingPercentile ? `${selectedMetric}__percentile` : selectedMetric\n\n    return (\n      <div className={this.getClassName()}>\n\n      <div className=\"WDVPMap__header\">\n        <div className=\"WDVPMap__header__contents\">\n          <div className=\"WDVPMap__header__title\">\n            <div className=\"WDVPMap__header__title__text\">\n              Countries similar to\n            </div>\n            <Select\n              name=\"countries\"\n              options={countryOptions}\n              value={{value: selectedCountry.Country, label: selectedCountry.Country}}\n              className=\"WDVPMap__select\"\n              classNamePrefix=\"WDVPMap__select\"\n              styles={selectStyles}\n              onChange={this.onCountrySelectFromSelect}\n            />\n          </div>\n\n          <div className=\"WDVPMap__header__scale\">\n            <h6 className=\"WDVPMap__header__scale__label\">Most Similar</h6>\n            {_.map(sortedCountries.slice(1, 4), (country, index) => (\n              <React.Fragment key={country}>\n                {!!index && \",\"}\n                <span style={{color: this.getCountryColor(country)}} className=\"WDVPMap__header__country\" onClick={this.onCountrySelectByNameLocal(country)}>\n                  { country }\n                </span>\n              </React.Fragment>\n            ))}\n            ...\n            {_.map(sortedCountries.slice(-3), (country, index) => (\n              <React.Fragment key={country}>\n                {!!index && \",\"}\n                <span style={{color: this.getCountryColor(country)}} className=\"WDVPMap__header__country\" onClick={this.onCountrySelectByNameLocal(country)}>\n                  { country }\n                </span>\n              </React.Fragment>\n            ))}\n            <h6 className=\"WDVPMap__header__scale__label\">Least Similar</h6>\n          </div>\n\n          <div className=\"WDVPMap__header__scale WDVPMap__header__metrics\">\n            <h6 className=\"WDVPMap__header__scale__label\">Distinctive metrics</h6>\n            {_.map(metricsByImportance.slice(0, 5), (metric, index) => (\n              <React.Fragment key={metric[0]}>\n                {!!index && \",\"}\n                <span className=\"WDVPMap__header__metrics__item\">\n                  { metric[0] }\n                  <span className={`WDVPMap__header__metrics__item__arrow WDVPMap__header__metrics__item__arrow--${metric[2] > 50 ? \"up\" : \"down\"}`}>\n                    <Icon name=\"arrow\" size=\"s\" direction=\"n\" />\n                  </span>\n                </span>\n              </React.Fragment>\n            ))}\n          </div>\n        </div>\n      </div>\n\n        <div className=\"WDVPMap__chart\">\n          <svg className=\"WDVPMap__svg\" viewBox=\"0 0 962 502\" preserveAspectRatio=\"xMidYMid meet\" ref={this.container}>\n            {_.map(rawData, country => (\n              <WDVPMapCountry\n                key={country.Country}\n                name={country.Country}\n                id={country[\"ISO-3166 alpha2\"]}\n                path={countryPaths[country.Country]}\n                onMouseEnter={this.onCountryHover(country)}\n                onMouseLeave={this.onCountryHover(null)}\n                onClick={this.onCountrySelectLocal(country)}\n                color={this.getCountryColor(country.Country)}\n              />\n            ))}\n\n            {hoveredCountry && (\n              <WDVPMapCountry\n                name={hoveredCountry.Country}\n                path={countryPaths[hoveredCountry.Country]}\n                color={this.getCountryColor(hoveredCountry.Country)}\n                isHovered\n              />\n            )}\n          </svg>\n\n          {tooltipPosition && (\n            <WDVPMapTooltip\n              country={hoveredCountry}\n              correlation={countryCorrelations && countryCorrelations[hoveredCountry.Country]}\n              sortedCountries={sortedCountries}\n              selectedCountry={selectedCountry}\n              selectedMetric={selectedMetric}\n              style={{\n                transform: `translate(${tooltipPosition.x}px, ${tooltipPosition.y}px)`\n              }}\n            />\n          )}\n        </div>\n\n      </div>\n    )\n  }\n}\n\nexport default WDVPMap\n\n\nconst formatNumber = d3.format(\",\")\nconst formatCorrelation = d3.format(\".2f\")\nconst WDVPMapCountry = React.memo(({ id, name, path, color, isHovered, ...props }) => (\n  <path {...props}\n    className={isHovered ? \"WDVPMapCountry WDVPMapCountry--is-hovered\" : \"WDVPMapCountry\"}\n    id={`country--${id}`}\n    d={path}\n    title={name}\n    fill={color}\n  />\n))\n\nconst WDVPMapTooltip = React.memo(({ country, selectedCountry, selectedMetric, correlation, ...props }) => (\n  <div className=\"WDVPMapTooltip\" {...props}>\n    <h6>\n      { country.Country }\n    </h6>\n    <div className=\"WDVPMapTooltip__metric\">\n      <div className=\"WDVPMapTooltip__metric__label\">\n        Correlation with { selectedCountry.Country }:\n      </div>\n      <div className=\"WDVPMapTooltip__metric__number\">\n        { formatCorrelation(correlation) }\n      </div>\n    </div>\n  </div>\n))\n"],"sourceRoot":""}