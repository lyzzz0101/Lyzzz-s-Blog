(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{1316:function(e,a,t){"use strict";t.r(a);var n=t(6),l=t(0),r=t.n(l),c=(t(651),t(4)),i=t(46),o=(t(617),t(641),t(95)),s=t(12),m=t(33),u=t(51),d=t(24),h=t(655),E=t(258),p=t.n(E),g=["rainy","sunny","cloudy","stormy","balmy","clear"];a.default=function(e){e.onScrollToSectionLocal;var a=Object(l.useState)(0),t=Object(n.a)(a,2),E=t[0],f=t[1],v=Object(l.useMemo)(function(){var e=new Date;return new Array(4).fill(0).map(function(a,t){return{date:c.timeFormat("%Y-%m-%d")(c.timeDay.offset(e,-(4-t-1))),conditions:g[Math.floor(Math.random()*(g.length-1))],chanceOfPrecipitation:Number(c.format("0.1f")(Math.random())),humidity:Number(c.format("0.1f")(Math.random()))}})},[E]);return r.a.createElement("div",{className:"LearnD3Scales"},r.a.createElement("p",null,"A ",r.a.createElement("b",null,"scale")," is an essential concept when visualizing data. To physicalize a dataset, you must turn each metric into a ",r.a.createElement("b",null,"visual feature"),". For example, say we have this weather dataset:"),r.a.createElement(o.a,{className:"RefreshButton RefreshButton--iteration-".concat(E%2),onClick:function(){return f(E+1)},style:b},r.a.createElement(m.a,{name:"refresh"}),"Re-generate data"),r.a.createElement(d.a,{size:"s",fileName:"data.json"},JSON.stringify(v,null,2)),r.a.createElement("p",null,"Each item in our dataset has three metrics:"),r.a.createElement(u.a,{items:[r.a.createElement(r.a.Fragment,null,r.a.createElement(h.P,null,"date"),r.a.createElement("p",null,"An ",r.a.createElement("b",null,"ordinal")," variable ",r.a.createElement("br",null)," between ",r.a.createElement(h.P,null,v[0].date)," and ",r.a.createElement(h.P,null,v[v.length-1].date))),r.a.createElement(r.a.Fragment,null,r.a.createElement(h.P,null,"conditions"),r.a.createElement("p",null,"A ",r.a.createElement("b",null,"nominal")," variable ",r.a.createElement("br",null)," ",g.map(function(e,a){return r.a.createElement(r.a.Fragment,null,a==g.length-1?", or ":a?", ":"",r.a.createElement(h.P,null,e))}))),r.a.createElement(r.a.Fragment,null,r.a.createElement(h.P,null,"chanceOfPrecipitation"),r.a.createElement("p",null,"A ",r.a.createElement("b",null,"continuous")," variable ",r.a.createElement("br",null)," between ",r.a.createElement(h.P,null,"0")," and ",r.a.createElement(h.P,null,"1"))),r.a.createElement(r.a.Fragment,null,r.a.createElement(h.P,null,"humidity"),r.a.createElement("p",null,"A ",r.a.createElement("b",null,"continuous")," variable ",r.a.createElement("br",null)," between ",r.a.createElement(h.P,null,"0")," and ",r.a.createElement(h.P,null,"1")))]}),r.a.createElement(i.a,{className:"LearnD3__promo"},r.a.createElement("img",{src:p.a,alt:"book",className:"LearnD3__promo__img"}),r.a.createElement("div",{className:"LearnD3__promo__text"},r.a.createElement("p",null,"Not sure about the difference between ",r.a.createElement("b",null,"ordinal")," and ",r.a.createElement("b",null,"continuous")," variables?"),"Learn more about ",r.a.createElement("i",null,"types of data")," in the ",r.a.createElement(s.a,{href:"http://fullstack.io/fullstack-d3"},r.a.createElement("b",null,"Fullstack D3 and Data Visualization"))," book.")),r.a.createElement("p",null,"Now that we know what variables we\u2019re dealing with, we can decide ",r.a.createElement("b",null,"how to visually represent each metric"),". For example, we could create:"),r.a.createElement(u.a,{items:[r.a.createElement(r.a.Fragment,null,r.a.createElement("b",null,"a timeline"),", with a line\u2019s ",r.a.createElement(h.P,null,"date")," represented as horizontal position, and ",r.a.createElement(h.P,null,"chanceOfPrecipitation")," represented as vertical position"),r.a.createElement(r.a.Fragment,null,r.a.createElement("b",null,"a scatter plot")," with each day\u2019s ",r.a.createElement(h.P,null,"chanceOfPrecipitation")," represented as horizontal position, and ",r.a.createElement(h.P,null,"humidity")," represented as vertical position"),r.a.createElement(r.a.Fragment,null,"we could even ",r.a.createElement("b",null,"calculate a derivative metric"),", bucketing days with similar ",r.a.createElement(h.P,null,"conditions"),", and creating a bar chart representing frequency of each ",r.a.createElement(h.P,null,"condition"))]}),r.a.createElement("p",null,"Great! But converting between the ",r.a.createElement("b",null,"data domain")," and the ",r.a.createElement("b",null,"physical domain")," can be complicated."),r.a.createElement("h3",null,"d3-scale"),r.a.createElement("p",null,"To help with these calculations, we can create ",r.a.createElement(h.DocsLink,{repo:"scale"},"d3 scales"),". A ",r.a.createElement("b",null,"scale")," will convert a metric\u2019s value into the physical value we need to create our charts."),r.a.createElement("p",null,"For example, to convert ",r.a.createElement(h.P,null,"chanceOfPrecipitation")," as horizontal position within our 500px wide chart, we could create an ",r.a.createElement("b",null,"x scale")," like so:"),r.a.createElement(d.a,{fileName:"our-chart.js"},"const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([0, 500]) // possible x values"),r.a.createElement("p",null,"Now we can use our ",r.a.createElement(h.P,null,"xScale")," convert values between the data ",r.a.createElement("b",null,"domain")," and the physical ",r.a.createElement("b",null,"range"),". For example, we can find ",r.a.createElement("b",null,"how far to the right a ",r.a.createElement(h.P,null,"0.5")," chanceOfPrecipitation will be"),":"),r.a.createElement(d.a,{canEval:!0,highlightedLines:[5,6],fileName:"our-chart.js",doOnlyShowHighlightedLines:!0},"const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([0, 500]) // possible x values\n\nconst pixelsToTheRight = xScale(0.5)\nalert(pixelsToTheRight)"),r.a.createElement("p",null,"Exactly! A ",r.a.createElement(h.P,null,"chanceOfPrecipitation")," would be 250px to the right: centered horizontally in our chart since ",r.a.createElement(h.P,null,"0.5")," is halfway between the bounds of possible values (",r.a.createElement(h.P,null,"0")," and ",r.a.createElement(h.P,null,"1"),")."),r.a.createElement("p",null,"There are many types of ",r.a.createElement(h.DocsLink,{repo:"scale"},"d3 scales")," for handling different kinds of metrics. For example, ",r.a.createElement(h.DocsLink,{repo:"scale",id:"scaleTime"})," for handling datetimes, and ",r.a.createElement(h.DocsLink,{repo:"scale",id:"scaleBand"})," for handling discrete metrics."),r.a.createElement("p",null,r.a.createElement(h.DocsLink,{repo:"scale"},"d3 scales")," have many useful methods, here are a few:"),r.a.createElement(u.a,{items:[r.a.createElement(r.a.Fragment,null,r.a.createElement(h.DocsLink,{repo:"scale",id:"continuous_ticks"},".ticks()"),r.a.createElement("p",null,"returns an array of equally-spaced values in the output ",r.a.createElement("b",null,"range"),". It defaults to 10 values, but you can pass a different ",r.a.createElement("i",null,"count")," for it to aim for."),r.a.createElement(d.a,{canEval:!0,highlightedLines:[5,6],fileName:"our-chart.js",doOnlyShowHighlightedLines:!0},"const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([0, 500]) // possible x values\n\nconst ticks = xScale.ticks()\nalert(ticks)")),r.a.createElement(r.a.Fragment,null,r.a.createElement(h.DocsLink,{repo:"scale",id:"continuous_nice"},".nice()"),r.a.createElement("p",null,"extends the data ",r.a.createElement("b",null,"domain")," so that it starts and ends on round values. This can make your chart friendlier to readers, since ",r.a.createElement(h.P,null,"250")," is an easier number to process than ",r.a.createElement(h.P,null,"249.5"),".")),r.a.createElement(r.a.Fragment,null,r.a.createElement(h.DocsLink,{repo:"scale",id:"continuous_clamp"},".clamp()"),r.a.createElement("p",null,"ensures that the scale will return a value within the ",r.a.createElement("b",null,"range"),", even if the input is outside of the ",r.a.createElement("b",null,"domain"),". For example, our ",r.a.createElement(h.P,null,"xScale")," will, by default, return ",r.a.createElement(h.P,null,"1000")," for an input of ",r.a.createElement(h.P,null,"2"),"."),r.a.createElement(d.a,{canEval:!0,highlightedLines:[5,6],fileName:"our-chart.js",doOnlyShowHighlightedLines:!0},"const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([0, 500]) // possible x values\n\nconst output = xScale(2)\nalert(output)")),r.a.createElement(r.a.Fragment,null,r.a.createElement(h.DocsLink,{repo:"scale",id:"continuous_invert"},".invert()"),r.a.createElement("p",null,"converts a value backwards, from the output ",r.a.createElement("b",null,"range")," to the data ",r.a.createElement("b",null,"domain"),". This comes in handy for things like surfacing a tooltip where a user\u2019s mouse is hovering."),r.a.createElement(d.a,{canEval:!0,highlightedLines:[5,6],fileName:"our-chart.js",doOnlyShowHighlightedLines:!0},"const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([0, 500]) // possible x values\n\nconst chanceOfPrecipitationAt250 = xScale.invert(250)\nalert(chanceOfPrecipitationAt250)")),r.a.createElement(r.a.Fragment,null,r.a.createElement(h.DocsLink,{repo:"scale",id:"continuous_domain"},".domain()")," and ",r.a.createElement(h.DocsLink,{repo:"scale",id:"continuous_range"},".range()"),r.a.createElement("p",null,"if we created our scale programatically, we can query what its ",r.a.createElement("b",null,"domain")," and ",r.a.createElement("b",null,"range")," are"),r.a.createElement(d.a,{canEval:!0,highlightedLines:[5,6,7],fileName:"our-chart.js",doOnlyShowHighlightedLines:!0},"const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range([0, 500]) // possible x values\n\nconst range = xScale.range()\nconst domain = xScale.domain()\nalert(`range: ${range}, \\ndomain: ${domain}`)")),r.a.createElement(r.a.Fragment,null,r.a.createElement(h.DocsLink,{repo:"scale",id:"continuous_interpolate"},".interpolate()"),r.a.createElement("p",null,"something that might not be immediately obvious is that we can create a scale that converts a value into a ",r.a.createElement("b",null,"color"),". We can use ",r.a.createElement(h.DocsLink,{repo:"scale",id:"continuous_interpolate"},".interpolate()")," to specity the ",r.a.createElement("b",null,"color space")," that we want our scale to function within:"),r.a.createElement(d.a,{canEval:!0,highlightedLines:[6],fileName:"our-chart.js"},'const xScale = d3.scaleLinear()\n  .domain([0, 1]) // possible chanceOfPrecipitation values\n  .range(["white", "green"]) // possible colors\n\nconst halfwayPointRgb = xScale(0.5)\nxScale.interpolate(d3.interpolateHcl)\nconst halfwayPointHcl = xScale(0.5)\nalert(`rgb: ${halfwayPointRgb}, \\nhcl: ${halfwayPointHcl}`)'))]}),r.a.createElement("p",null,r.a.createElement(h.DocsLink,{repo:"scale"},"d3 scales")," are a one of the most important concepts for visualizing data with d3 - make sure to familiarize yourself with them so you can convert between any data domain and the output range with ease."),r.a.createElement(h.ReadMore,{id:"scale"}))};var b={position:"absolute",marginTop:"3em",right:"0.5em",paddingBottom:"0.8em",zIndex:"10"}},617:function(e,a,t){"use strict";var n=t(6),l=t(34),r=t(0),c=t.n(r),i=t(33),o=t(147);t(129),t(619);a.a=function(e){var a=e.trigger,t=e.triggerExpandText,s=(e.doHideIfCollapsed,e.className),m=e.children,u=Object(l.a)(e,["trigger","triggerExpandText","doHideIfCollapsed","className","children"]),d=Object(r.useState)(!1),h=Object(n.a)(d,2),E=h[0],p=h[1],g=Object(r.useRef)();return c.a.createElement("details",Object.assign({className:"Expandy Expandy--is-".concat(E?"expanded":"collapsed"," ").concat(s)},u,{ref:g,onToggle:function(e){var a=e.target.open;p(a)}}),c.a.createElement("summary",null,c.a.createElement("div",{className:"Expandy__trigger button-no-appearance"},c.a.createElement("div",{className:"Expandy__trigger__text"},c.a.createElement("b",null,a),c.a.createElement("div",{className:"Expandy__trigger__info"},t||"tap me ".concat(E?"to hide":"for more"," details"))),c.a.createElement("div",{className:"Expandy__trigger__mark"},"\u1f30")),c.a.createElement(o.a,{className:"Expandy__toggle",contents:c.a.createElement("button",{className:"button-no-appearance"},E?"Collapse me":"Expand me")},c.a.createElement("div",{className:"Expandy__toggle__arrow Expandy__toggle__arrow--up"},c.a.createElement(i.a,{name:"arrow",direction:"n",size:"s"})),c.a.createElement("div",{className:"Expandy__toggle__arrow Expandy__toggle__arrow--down"},c.a.createElement(i.a,{name:"arrow",direction:"s",size:"s"})))),c.a.createElement("div",{className:"Expandy__contents"},m))}},619:function(e,a,t){},641:function(e,a,t){"use strict";var n=t(6),l=t(34),r=t(0),c=t.n(r);t(33),t(642);a.a=function(e){var a=e.description,t=e.className,i=e.children,o=Object(l.a)(e,["description","className","children"]),s=Object(r.useState)(!1),m=Object(n.a)(s,2),u=m[0],d=m[1];return c.a.createElement("div",Object.assign({className:"InlineExpandy InlineExpandy--is-".concat(u?"expanded":"collapsed"," ").concat(t)},o),c.a.createElement("div",{className:"InlineExpandy__trigger",onClick:function(){d(!u)}},u?"Hide":"Show"," ",a,"..."),u&&c.a.createElement("div",{className:"InlineExpandy__contents"},i))}},642:function(e,a,t){}}]);
//# sourceMappingURL=64.046c9380.chunk.js.map