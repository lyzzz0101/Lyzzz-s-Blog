{"version":3,"sources":["../node_modules/delaunator/index.js","../node_modules/d3-delaunay/src/path.js","../node_modules/d3-delaunay/src/polygon.js","../node_modules/d3-delaunay/src/voronoi.js","../node_modules/d3-delaunay/src/delaunay.js","../node_modules/d3-delaunay/src/index.js"],"names":["EPSILON","Math","pow","delaunator_Delaunator","Delaunator","coords","Object","classCallCheck","this","minX","Infinity","minY","maxX","maxY","n","length","ids","Uint32Array","Error","i","x","y","i0","i1","i2","cx","cy","minDist","_i","d","dist","i0x","i0y","_i2","_d","i1x","i1y","minRadius","_i3","r","circumradius","i2x","i2y","orient","_i4","_x","_y","center","ax","ay","bx","by","dx","dy","ex","ey","bl","cl","circumcenter","_cx","_cy","quicksort","left","right","j","temp","compare","median","swap","_hashSize","ceil","sqrt","_hash","Array","e","hull","insertNode","_hashEdge","t","maxTriangles","triangles","halfedges","Int32Array","trianglesLen","_addTriangle","xp","yp","k","_i5","_x2","_y2","abs","startKey","_hashKey","key","start","removed","prev","next","walkBack","_legalize","q","removeNode","subarray","createClass","value","points","getX","getY","defaultGetX","defaultGetY","Float64Array","p","floor","pseudoAngle","a","b","a0","b0","al","ar","p0","pr","pl","p1","px","py","fx","fy","bp","cp","inCircle","hbl","_e","_link","br","c","qx","qy","rx","ry","node","arr","tmp","path_Path","Path","_x0","_y0","_x1","_y1","_","concat","x0","y0","w","h","polygon_Polygon","Polygon","push","slice","voronoi_Voronoi","Voronoi","delaunay","_ref","arguments","undefined","_ref2","slicedToArray","xmin","ymin","xmax","ymax","_this$delaunay","circumcenters","vectors","t1","t2","t3","x2","y2","x3","y3","a2","a3","b2","b3","d1","d2","d3","ab","x1","y1","context","buffer","_this$delaunay2","ti","tj","xi","yi","xj","yj","_renderSegment","v","_project","rect","_clip","moveTo","lineTo","closePath","regenerator_default","mark","cellPolygons","cell","wrap","_context","cellPolygon","stop","polygon","renderCell","S","c0","_regioncode","c1","_clipSegment","_step","_this$delaunay3","inedges","e0","_cell","V","_clipInfinite","_clipFinite","e1","P","sx0","sy0","sx1","sy1","_S","_S2","_S3","_S4","_edgecode","_edge","contains","vx0","vy0","vxn","vyn","from","unshift","splice","vx","vy","_marked","flatIterable","tau","PI","pointX","pointY","delaunay_Delaunay","Delaunay","_Delaunator","fill","outedges","node0","node1","bounds","neighbors","abrupt","sent","_step2","dc","_iterator","createForOfIteratorHelper","s","done","dt","err","f","renderHull","arc","t0","trianglePolygons","_context2","trianglePolygon","renderTriangle","that","_iterator2","_step3","_context3","call","finish","array","flatArray","__webpack_require__","__webpack_exports__"],"mappings":"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","file":"static/js/86.31d016c4.chunk.js","sourcesContent":["import _classCallCheck from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar EPSILON = Math.pow(2, -52);\n\nvar Delaunator = /*#__PURE__*/function () {\n  _createClass(Delaunator, null, [{\n    key: \"from\",\n    value: function from(points, getX, getY) {\n      if (!getX) getX = defaultGetX;\n      if (!getY) getY = defaultGetY;\n      var n = points.length;\n      var coords = new Float64Array(n * 2);\n\n      for (var i = 0; i < n; i++) {\n        var p = points[i];\n        coords[2 * i] = getX(p);\n        coords[2 * i + 1] = getY(p);\n      }\n\n      return new Delaunator(coords);\n    }\n  }]);\n\n  function Delaunator(coords) {\n    _classCallCheck(this, Delaunator);\n\n    var minX = Infinity;\n    var minY = Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    var n = coords.length >> 1;\n    var ids = this.ids = new Uint32Array(n);\n    if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n    this.coords = coords;\n\n    for (var i = 0; i < n; i++) {\n      var x = coords[2 * i];\n      var y = coords[2 * i + 1];\n      if (x < minX) minX = x;\n      if (y < minY) minY = y;\n      if (x > maxX) maxX = x;\n      if (y > maxY) maxY = y;\n      ids[i] = i;\n    }\n\n    var cx = (minX + maxX) / 2;\n    var cy = (minY + maxY) / 2;\n    var minDist = Infinity;\n    var i0, i1, i2; // pick a seed point close to the centroid\n\n    for (var _i = 0; _i < n; _i++) {\n      var d = dist(cx, cy, coords[2 * _i], coords[2 * _i + 1]);\n\n      if (d < minDist) {\n        i0 = _i;\n        minDist = d;\n      }\n    }\n\n    var i0x = coords[2 * i0];\n    var i0y = coords[2 * i0 + 1];\n    minDist = Infinity; // find the point closest to the seed\n\n    for (var _i2 = 0; _i2 < n; _i2++) {\n      if (_i2 === i0) continue;\n\n      var _d = dist(i0x, i0y, coords[2 * _i2], coords[2 * _i2 + 1]);\n\n      if (_d < minDist && _d > 0) {\n        i1 = _i2;\n        minDist = _d;\n      }\n    }\n\n    var i1x = coords[2 * i1];\n    var i1y = coords[2 * i1 + 1];\n    var minRadius = Infinity; // find the third point which forms the smallest circumcircle with the first two\n\n    for (var _i3 = 0; _i3 < n; _i3++) {\n      if (_i3 === i0 || _i3 === i1) continue;\n      var r = circumradius(i0x, i0y, i1x, i1y, coords[2 * _i3], coords[2 * _i3 + 1]);\n\n      if (r < minRadius) {\n        i2 = _i3;\n        minRadius = r;\n      }\n    }\n\n    var i2x = coords[2 * i2];\n    var i2y = coords[2 * i2 + 1];\n\n    if (minRadius === Infinity) {\n      throw new Error('No Delaunay triangulation exists for this input.');\n    } // swap the order of the seed points for counter-clockwise orientation\n\n\n    if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n      var _i4 = i1;\n      var _x = i1x;\n      var _y = i1y;\n      i1 = i2;\n      i1x = i2x;\n      i1y = i2y;\n      i2 = _i4;\n      i2x = _x;\n      i2y = _y;\n    }\n\n    var center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n    this._cx = center.x;\n    this._cy = center.y; // sort the points by distance from the seed triangle circumcenter\n\n    quicksort(ids, coords, 0, ids.length - 1, center.x, center.y); // initialize a hash table for storing edges of the advancing convex hull\n\n    this._hashSize = Math.ceil(Math.sqrt(n));\n    this._hash = new Array(this._hashSize); // initialize a circular doubly-linked list that will hold an advancing convex hull\n\n    var e = this.hull = insertNode(coords, i0);\n\n    this._hashEdge(e);\n\n    e.t = 0;\n    e = insertNode(coords, i1, e);\n\n    this._hashEdge(e);\n\n    e.t = 1;\n    e = insertNode(coords, i2, e);\n\n    this._hashEdge(e);\n\n    e.t = 2;\n    var maxTriangles = 2 * n - 5;\n    var triangles = this.triangles = new Uint32Array(maxTriangles * 3);\n    var halfedges = this.halfedges = new Int32Array(maxTriangles * 3);\n    this.trianglesLen = 0;\n\n    this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n    for (var k = 0, xp, yp; k < ids.length; k++) {\n      var _i5 = ids[k];\n      var _x2 = coords[2 * _i5];\n      var _y2 = coords[2 * _i5 + 1]; // skip near-duplicate points\n\n      if (k > 0 && Math.abs(_x2 - xp) <= EPSILON && Math.abs(_y2 - yp) <= EPSILON) continue;\n      xp = _x2;\n      yp = _y2; // skip seed triangle points\n\n      if (_i5 === i0 || _i5 === i1 || _i5 === i2) continue; // find a visible edge on the convex hull using edge hash\n\n      var startKey = this._hashKey(_x2, _y2);\n\n      var key = startKey;\n      var start = void 0;\n\n      do {\n        start = this._hash[key];\n        key = (key + 1) % this._hashSize;\n      } while ((!start || start.removed) && key !== startKey);\n\n      start = start.prev;\n      e = start;\n\n      while (!orient(_x2, _y2, e.x, e.y, e.next.x, e.next.y)) {\n        e = e.next;\n\n        if (e === start) {\n          e = null;\n          break;\n        }\n      } // likely a near-duplicate point; skip it\n\n\n      if (!e) continue;\n      var walkBack = e === start; // add the first triangle from the point\n\n      var t = this._addTriangle(e.i, _i5, e.next.i, -1, -1, e.t);\n\n      e.t = t; // keep track of boundary triangles on the hull\n\n      e = insertNode(coords, _i5, e); // recursively flip triangles from the point until they satisfy the Delaunay condition\n\n      e.t = this._legalize(t + 2); // walk forward through the hull, adding more triangles and flipping recursively\n\n      var q = e.next;\n\n      while (orient(_x2, _y2, q.x, q.y, q.next.x, q.next.y)) {\n        t = this._addTriangle(q.i, _i5, q.next.i, q.prev.t, -1, q.t);\n        q.prev.t = this._legalize(t + 2);\n        this.hull = removeNode(q);\n        q = q.next;\n      }\n\n      if (walkBack) {\n        // walk backward from the other side, adding more triangles and flipping\n        q = e.prev;\n\n        while (orient(_x2, _y2, q.prev.x, q.prev.y, q.x, q.y)) {\n          t = this._addTriangle(q.prev.i, _i5, q.i, -1, q.t, q.prev.t);\n\n          this._legalize(t + 2);\n\n          q.prev.t = t;\n          this.hull = removeNode(q);\n          q = q.prev;\n        }\n      } // save the two new edges in the hash table\n\n\n      this._hashEdge(e);\n\n      this._hashEdge(e.prev);\n    } // trim typed triangle mesh arrays\n\n\n    this.triangles = triangles.subarray(0, this.trianglesLen);\n    this.halfedges = halfedges.subarray(0, this.trianglesLen);\n  }\n\n  _createClass(Delaunator, [{\n    key: \"_hashEdge\",\n    value: function _hashEdge(e) {\n      this._hash[this._hashKey(e.x, e.y)] = e;\n    }\n  }, {\n    key: \"_hashKey\",\n    value: function _hashKey(x, y) {\n      return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n  }, {\n    key: \"_legalize\",\n    value: function _legalize(a) {\n      var triangles = this.triangles,\n          coords = this.coords,\n          halfedges = this.halfedges;\n      var b = halfedges[a];\n      /* if the pair of triangles doesn't satisfy the Delaunay condition\n       * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n       * then do the same check/flip recursively for the new pair of triangles\n       *\n       *           pl                    pl\n       *          /||\\                  /  \\\n       *       al/ || \\bl            al/    \\a\n       *        /  ||  \\              /      \\\n       *       /  a||b  \\    flip    /___ar___\\\n       *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n       *        \\  ||  /              \\      /\n       *       ar\\ || /br             b\\    /br\n       *          \\||/                  \\  /\n       *           pr                    pr\n       */\n\n      var a0 = a - a % 3;\n      var b0 = b - b % 3;\n      var al = a0 + (a + 1) % 3;\n      var ar = a0 + (a + 2) % 3;\n      var bl = b0 + (b + 2) % 3;\n      if (b === -1) return ar;\n      var p0 = triangles[ar];\n      var pr = triangles[a];\n      var pl = triangles[al];\n      var p1 = triangles[bl];\n      var illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n\n      if (illegal) {\n        triangles[a] = p1;\n        triangles[b] = p0;\n        var hbl = halfedges[bl]; // edge swapped on the other side of the hull (rare); fix the halfedge reference\n\n        if (hbl === -1) {\n          var _e = this.hull;\n\n          do {\n            if (_e.t === bl) {\n              _e.t = a;\n              break;\n            }\n\n            _e = _e.next;\n          } while (_e !== this.hull);\n        }\n\n        this._link(a, hbl);\n\n        this._link(b, halfedges[ar]);\n\n        this._link(ar, bl);\n\n        var br = b0 + (b + 1) % 3;\n\n        this._legalize(a);\n\n        return this._legalize(br);\n      }\n\n      return ar;\n    }\n  }, {\n    key: \"_link\",\n    value: function _link(a, b) {\n      this.halfedges[a] = b;\n      if (b !== -1) this.halfedges[b] = a;\n    } // add a new triangle given vertex indices and adjacent half-edge ids\n\n  }, {\n    key: \"_addTriangle\",\n    value: function _addTriangle(i0, i1, i2, a, b, c) {\n      var t = this.trianglesLen;\n      this.triangles[t] = i0;\n      this.triangles[t + 1] = i1;\n      this.triangles[t + 2] = i2;\n\n      this._link(t, a);\n\n      this._link(t + 1, b);\n\n      this._link(t + 2, c);\n\n      this.trianglesLen += 3;\n      return t;\n    }\n  }]);\n\n  return Delaunator;\n}(); // monotonically increases with real angle, but doesn't need expensive trigonometry\n\n\nexport { Delaunator as default };\n\nfunction pseudoAngle(dx, dy) {\n  var p = dx / (Math.abs(dx) + Math.abs(dy));\n  return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n  var dx = ax - bx;\n  var dy = ay - by;\n  return dx * dx + dy * dy;\n}\n\nfunction orient(px, py, qx, qy, rx, ry) {\n  return (qy - py) * (rx - qx) - (qx - px) * (ry - qy) < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n  var dx = ax - px;\n  var dy = ay - py;\n  var ex = bx - px;\n  var ey = by - py;\n  var fx = cx - px;\n  var fy = cy - py;\n  var ap = dx * dx + dy * dy;\n  var bp = ex * ex + ey * ey;\n  var cp = fx * fx + fy * fy;\n  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n  var dx = bx - ax;\n  var dy = by - ay;\n  var ex = cx - ax;\n  var ey = cy - ay;\n  var bl = dx * dx + dy * dy;\n  var cl = ex * ex + ey * ey;\n  var d = dx * ey - dy * ex;\n  var x = (ey * bl - dy * cl) * 0.5 / d;\n  var y = (dx * cl - ex * bl) * 0.5 / d;\n  return bl && cl && d && x * x + y * y || Infinity;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n  var dx = bx - ax;\n  var dy = by - ay;\n  var ex = cx - ax;\n  var ey = cy - ay;\n  var bl = dx * dx + dy * dy;\n  var cl = ex * ex + ey * ey;\n  var d = dx * ey - dy * ex;\n  var x = ax + (ey * bl - dy * cl) * 0.5 / d;\n  var y = ay + (dx * cl - ex * bl) * 0.5 / d;\n  return {\n    x: x,\n    y: y\n  };\n} // create a new node in a doubly linked list\n\n\nfunction insertNode(coords, i, prev) {\n  var node = {\n    i: i,\n    x: coords[2 * i],\n    y: coords[2 * i + 1],\n    t: 0,\n    prev: null,\n    next: null,\n    removed: false\n  };\n\n  if (!prev) {\n    node.prev = node;\n    node.next = node;\n  } else {\n    node.next = prev.next;\n    node.prev = prev;\n    prev.next.prev = node;\n    prev.next = node;\n  }\n\n  return node;\n}\n\nfunction removeNode(node) {\n  node.prev.next = node.next;\n  node.next.prev = node.prev;\n  node.removed = true;\n  return node.prev;\n}\n\nfunction quicksort(ids, coords, left, right, cx, cy) {\n  var i, j, temp;\n\n  if (right - left <= 20) {\n    for (i = left + 1; i <= right; i++) {\n      temp = ids[i];\n      j = i - 1;\n\n      while (j >= left && compare(coords, ids[j], temp, cx, cy) > 0) {\n        ids[j + 1] = ids[j--];\n      }\n\n      ids[j + 1] = temp;\n    }\n  } else {\n    var median = left + right >> 1;\n    i = left + 1;\n    j = right;\n    swap(ids, median, i);\n    if (compare(coords, ids[left], ids[right], cx, cy) > 0) swap(ids, left, right);\n    if (compare(coords, ids[i], ids[right], cx, cy) > 0) swap(ids, i, right);\n    if (compare(coords, ids[left], ids[i], cx, cy) > 0) swap(ids, left, i);\n    temp = ids[i];\n\n    while (true) {\n      do {\n        i++;\n      } while (compare(coords, ids[i], temp, cx, cy) < 0);\n\n      do {\n        j--;\n      } while (compare(coords, ids[j], temp, cx, cy) > 0);\n\n      if (j < i) break;\n      swap(ids, i, j);\n    }\n\n    ids[left + 1] = ids[j];\n    ids[j] = temp;\n\n    if (right - i + 1 >= j - left) {\n      quicksort(ids, coords, i, right, cx, cy);\n      quicksort(ids, coords, left, j - 1, cx, cy);\n    } else {\n      quicksort(ids, coords, left, j - 1, cx, cy);\n      quicksort(ids, coords, i, right, cx, cy);\n    }\n  }\n}\n\nfunction compare(coords, i, j, cx, cy) {\n  var d1 = dist(coords[2 * i], coords[2 * i + 1], cx, cy);\n  var d2 = dist(coords[2 * j], coords[2 * j + 1], cx, cy);\n  return d1 - d2 || coords[2 * i] - coords[2 * j] || coords[2 * i + 1] - coords[2 * j + 1];\n}\n\nfunction swap(arr, i, j) {\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n  return p[0];\n}\n\nfunction defaultGetY(p) {\n  return p[1];\n}","import _classCallCheck from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar epsilon = 1e-6;\n\nvar Path = /*#__PURE__*/function () {\n  function Path() {\n    _classCallCheck(this, Path);\n\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n\n    this._ = \"\";\n  }\n\n  _createClass(Path, [{\n    key: \"moveTo\",\n    value: function moveTo(x, y) {\n      this._ += \"M\".concat(this._x0 = this._x1 = +x, \",\").concat(this._y0 = this._y1 = +y);\n    }\n  }, {\n    key: \"closePath\",\n    value: function closePath() {\n      if (this._x1 !== null) {\n        this._x1 = this._x0, this._y1 = this._y0;\n        this._ += \"Z\";\n      }\n    }\n  }, {\n    key: \"lineTo\",\n    value: function lineTo(x, y) {\n      this._ += \"L\".concat(this._x1 = +x, \",\").concat(this._y1 = +y);\n    }\n  }, {\n    key: \"arc\",\n    value: function arc(x, y, r) {\n      x = +x, y = +y, r = +r;\n      var x0 = x + r;\n      var y0 = y;\n      if (r < 0) throw new Error(\"negative radius\");\n      if (this._x1 === null) this._ += \"M\".concat(x0, \",\").concat(y0);else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n      if (!r) return;\n      this._ += \"A\".concat(r, \",\").concat(r, \",0,1,1,\").concat(x - r, \",\").concat(y, \"A\").concat(r, \",\").concat(r, \",0,1,1,\").concat(this._x1 = x0, \",\").concat(this._y1 = y0);\n    }\n  }, {\n    key: \"rect\",\n    value: function rect(x, y, w, h) {\n      this._ += \"M\".concat(this._x0 = this._x1 = +x, \",\").concat(this._y0 = this._y1 = +y, \"h\").concat(+w, \"v\").concat(+h, \"h\").concat(-w, \"Z\");\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      return this._ || null;\n    }\n  }]);\n\n  return Path;\n}();\n\nexport { Path as default };","import _classCallCheck from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar Polygon = /*#__PURE__*/function () {\n  function Polygon() {\n    _classCallCheck(this, Polygon);\n\n    this._ = [];\n  }\n\n  _createClass(Polygon, [{\n    key: \"moveTo\",\n    value: function moveTo(x, y) {\n      this._.push([x, y]);\n    }\n  }, {\n    key: \"closePath\",\n    value: function closePath() {\n      this._.push(this._[0].slice());\n    }\n  }, {\n    key: \"lineTo\",\n    value: function lineTo(x, y) {\n      this._.push([x, y]);\n    }\n  }, {\n    key: \"value\",\n    value: function value() {\n      return this._.length ? this._ : null;\n    }\n  }]);\n\n  return Polygon;\n}();\n\nexport { Polygon as default };","import _regeneratorRuntime from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nvar Voronoi = /*#__PURE__*/function () {\n  function Voronoi(delaunay) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 960, 500],\n        _ref2 = _slicedToArray(_ref, 4),\n        xmin = _ref2[0],\n        ymin = _ref2[1],\n        xmax = _ref2[2],\n        ymax = _ref2[3];\n\n    _classCallCheck(this, Voronoi);\n\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n\n    var _this$delaunay = this.delaunay = delaunay,\n        points = _this$delaunay.points,\n        hull = _this$delaunay.hull,\n        triangles = _this$delaunay.triangles;\n\n    var circumcenters = this.circumcenters = new Float64Array(triangles.length / 3 * 2);\n    var vectors = this.vectors = new Float64Array(points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin; // Compute circumcenters.\n\n    for (var i = 0, j = 0, n = triangles.length; i < n; i += 3, j += 2) {\n      var t1 = triangles[i] * 2;\n      var t2 = triangles[i + 1] * 2;\n      var t3 = triangles[i + 2] * 2;\n      var _x = points[t1];\n      var _y = points[t1 + 1];\n      var x2 = points[t2];\n      var y2 = points[t2 + 1];\n      var x3 = points[t3];\n      var y3 = points[t3 + 1];\n      var a2 = _x - x2;\n      var a3 = _x - x3;\n      var b2 = _y - y2;\n      var b3 = _y - y3;\n      var d1 = _x * _x + _y * _y;\n      var d2 = d1 - x2 * x2 - y2 * y2;\n      var d3 = d1 - x3 * x3 - y3 * y3;\n      var ab = (a3 * b2 - a2 * b3) * 2;\n      circumcenters[j] = (b2 * d3 - b3 * d2) / ab;\n      circumcenters[j + 1] = (a3 * d2 - a2 * d3) / ab;\n    } // Compute exterior cell rays.\n\n\n    var node = hull;\n    var p0,\n        p1 = node.i * 4;\n    var x0,\n        x1 = node.x;\n    var y0,\n        y1 = node.y;\n\n    do {\n      node = node.next, p0 = p1, x0 = x1, y0 = y1, p1 = node.i * 4, x1 = node.x, y1 = node.y;\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    } while (node !== hull);\n  }\n\n  _createClass(Voronoi, [{\n    key: \"render\",\n    value: function render(context) {\n      var buffer = context == null ? context = new Path() : undefined;\n      var _this$delaunay2 = this.delaunay,\n          halfedges = _this$delaunay2.halfedges,\n          hull = _this$delaunay2.hull,\n          circumcenters = this.circumcenters,\n          vectors = this.vectors;\n\n      for (var i = 0, n = halfedges.length; i < n; ++i) {\n        var j = halfedges[i];\n        if (j < i) continue;\n        var ti = Math.floor(i / 3) * 2;\n        var tj = Math.floor(j / 3) * 2;\n        var xi = circumcenters[ti];\n        var yi = circumcenters[ti + 1];\n        var xj = circumcenters[tj];\n        var yj = circumcenters[tj + 1];\n\n        this._renderSegment(xi, yi, xj, yj, context);\n      }\n\n      var node = hull;\n\n      do {\n        node = node.next;\n        var t = Math.floor(node.t / 3) * 2;\n        var x = circumcenters[t];\n        var y = circumcenters[t + 1];\n        var v = node.i * 4;\n\n        var p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n\n        if (p) this._renderSegment(x, y, p[0], p[1], context);\n      } while (node !== hull);\n\n      return buffer && buffer.value();\n    }\n  }, {\n    key: \"renderBounds\",\n    value: function renderBounds(context) {\n      var buffer = context == null ? context = new Path() : undefined;\n      context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n      return buffer && buffer.value();\n    }\n  }, {\n    key: \"renderCell\",\n    value: function renderCell(i, context) {\n      var buffer = context == null ? context = new Path() : undefined;\n\n      var points = this._clip(i);\n\n      if (points === null) return;\n      context.moveTo(points[0], points[1]);\n\n      for (var _i = 2, n = points.length; _i < n; _i += 2) {\n        context.lineTo(points[_i], points[_i + 1]);\n      }\n\n      context.closePath();\n      return buffer && buffer.value();\n    }\n  }, {\n    key: \"cellPolygons\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function cellPolygons() {\n      var points, i, n, cell;\n      return _regeneratorRuntime.wrap(function cellPolygons$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              points = this.delaunay.points;\n              i = 0, n = points.length / 2;\n\n            case 2:\n              if (!(i < n)) {\n                _context.next = 10;\n                break;\n              }\n\n              cell = this.cellPolygon(i);\n\n              if (!cell) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 7;\n              return cell;\n\n            case 7:\n              ++i;\n              _context.next = 2;\n              break;\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, cellPolygons, this);\n    })\n  }, {\n    key: \"cellPolygon\",\n    value: function cellPolygon(i) {\n      var polygon = new Polygon();\n      this.renderCell(i, polygon);\n      return polygon.value();\n    }\n  }, {\n    key: \"_renderSegment\",\n    value: function _renderSegment(x0, y0, x1, y1, context) {\n      var S;\n\n      var c0 = this._regioncode(x0, y0);\n\n      var c1 = this._regioncode(x1, y1);\n\n      if (c0 === 0 && c1 === 0) {\n        context.moveTo(x0, y0);\n        context.lineTo(x1, y1);\n      } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n        context.moveTo(S[0], S[1]);\n        context.lineTo(S[2], S[3]);\n      }\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(i, x, y) {\n      if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n      return this.delaunay._step(i, x, y) === i;\n    }\n  }, {\n    key: \"_cell\",\n    value: function _cell(i) {\n      var circumcenters = this.circumcenters,\n          _this$delaunay3 = this.delaunay,\n          inedges = _this$delaunay3.inedges,\n          halfedges = _this$delaunay3.halfedges,\n          triangles = _this$delaunay3.triangles;\n      var e0 = inedges[i];\n      if (e0 === -1) return null; // coincident point\n\n      var points = [];\n      var e = e0;\n\n      do {\n        var t = Math.floor(e / 3);\n        points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n        e = e % 3 === 2 ? e - 2 : e + 1;\n        if (triangles[e] !== i) break; // bad triangulation\n\n        e = halfedges[e];\n      } while (e !== e0 && e !== -1);\n\n      return points;\n    }\n  }, {\n    key: \"_clip\",\n    value: function _clip(i) {\n      var points = this._cell(i);\n\n      if (points === null) return null;\n      var V = this.vectors;\n      var v = i * 4;\n      return V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points);\n    }\n  }, {\n    key: \"_clipFinite\",\n    value: function _clipFinite(i, points) {\n      var n = points.length;\n      var P = null;\n      var x0,\n          y0,\n          x1 = points[n - 2],\n          y1 = points[n - 1];\n\n      var c0,\n          c1 = this._regioncode(x1, y1);\n\n      var e0, e1;\n\n      for (var j = 0; j < n; j += 2) {\n        x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n        c0 = c1, c1 = this._regioncode(x1, y1);\n\n        if (c0 === 0 && c1 === 0) {\n          e0 = e1, e1 = 0;\n          if (P) P.push(x1, y1);else P = [x1, y1];\n        } else {\n          var S = void 0,\n              sx0 = void 0,\n              sy0 = void 0,\n              sx1 = void 0,\n              sy1 = void 0;\n\n          if (c0 === 0) {\n            if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n            var _S = S;\n\n            var _S2 = _slicedToArray(_S, 4);\n\n            sx0 = _S2[0];\n            sy0 = _S2[1];\n            sx1 = _S2[2];\n            sy1 = _S2[3];\n          } else {\n            if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n            var _S3 = S;\n\n            var _S4 = _slicedToArray(_S3, 4);\n\n            sx1 = _S4[0];\n            sy1 = _S4[1];\n            sx0 = _S4[2];\n            sy0 = _S4[3];\n            e0 = e1, e1 = this._edgecode(sx0, sy0);\n            if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n            if (P) P.push(sx0, sy0);else P = [sx0, sy0];\n          }\n\n          e0 = e1, e1 = this._edgecode(sx1, sy1);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx1, sy1);else P = [sx1, sy1];\n        }\n      }\n\n      if (P) {\n        e0 = e1, e1 = this._edgecode(P[0], P[1]);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n      }\n\n      return P;\n    }\n  }, {\n    key: \"_clipSegment\",\n    value: function _clipSegment(x0, y0, x1, y1, c0, c1) {\n      while (true) {\n        if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n        if (c0 & c1) return null;\n        var x = void 0,\n            y = void 0,\n            c = c0 || c1;\n        if (c & 8) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;else if (c & 4) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;else if (c & 2) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n        if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n      }\n    }\n  }, {\n    key: \"_clipInfinite\",\n    value: function _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n      var P = Array.from(points),\n          p;\n      if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n      if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n\n      if (P = this._clipFinite(i, P)) {\n        for (var j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n          c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n          if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n        }\n      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n        P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n      }\n\n      return P;\n    }\n  }, {\n    key: \"_edge\",\n    value: function _edge(i, e0, e1, P, j) {\n      while (e0 !== e1) {\n        var x = void 0,\n            y = void 0;\n\n        switch (e0) {\n          case 5:\n            e0 = 4;\n            continue;\n          // top-left\n\n          case 4:\n            e0 = 6, x = this.xmax, y = this.ymin;\n            break;\n          // top\n\n          case 6:\n            e0 = 2;\n            continue;\n          // top-right\n\n          case 2:\n            e0 = 10, x = this.xmax, y = this.ymax;\n            break;\n          // right\n\n          case 10:\n            e0 = 8;\n            continue;\n          // bottom-right\n\n          case 8:\n            e0 = 9, x = this.xmin, y = this.ymax;\n            break;\n          // bottom\n\n          case 9:\n            e0 = 1;\n            continue;\n          // bottom-left\n\n          case 1:\n            e0 = 5, x = this.xmin, y = this.ymin;\n            break;\n          // left\n        }\n\n        if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n          P.splice(j, 0, x, y), j += 2;\n        }\n      }\n\n      return j;\n    }\n  }, {\n    key: \"_project\",\n    value: function _project(x0, y0, vx, vy) {\n      var t = Infinity,\n          c,\n          x,\n          y;\n\n      if (vy < 0) {\n        // top\n        if (y0 <= this.ymin) return null;\n        if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n      } else if (vy > 0) {\n        // bottom\n        if (y0 >= this.ymax) return null;\n        if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n      }\n\n      if (vx > 0) {\n        // right\n        if (x0 >= this.xmax) return null;\n        if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n      } else if (vx < 0) {\n        // left\n        if (x0 <= this.xmin) return null;\n        if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n      }\n\n      return [x, y];\n    }\n  }, {\n    key: \"_edgecode\",\n    value: function _edgecode(x, y) {\n      return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);\n    }\n  }, {\n    key: \"_regioncode\",\n    value: function _regioncode(x, y) {\n      return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);\n    }\n  }]);\n\n  return Voronoi;\n}();\n\nexport { Voronoi as default };","import _createForOfIteratorHelper from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/linying/codespace/Lyzzz-s-Blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(flatIterable);\n\nimport Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\nvar tau = 2 * Math.PI;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\nvar Delaunay = /*#__PURE__*/function () {\n  function Delaunay(points) {\n    _classCallCheck(this, Delaunay);\n\n    var _Delaunator = new Delaunator(points),\n        halfedges = _Delaunator.halfedges,\n        hull = _Delaunator.hull,\n        triangles = _Delaunator.triangles;\n\n    this.points = points;\n    this.halfedges = halfedges;\n    this.hull = hull;\n    this.triangles = triangles;\n    var inedges = this.inedges = new Int32Array(points.length / 2).fill(-1);\n    var outedges = this.outedges = new Int32Array(points.length / 2).fill(-1); // Compute an index from each point to an (arbitrary) incoming halfedge.\n\n    for (var e = 0, n = halfedges.length; e < n; ++e) {\n      inedges[triangles[e % 3 === 2 ? e - 2 : e + 1]] = e;\n    } // For points on the hull, index both the incoming and outgoing halfedges.\n\n\n    var node0,\n        node1 = hull;\n\n    do {\n      node0 = node1, node1 = node1.next;\n      inedges[node1.i] = node0.t;\n      outedges[node0.i] = node1.t;\n    } while (node1 !== hull);\n  }\n\n  _createClass(Delaunay, [{\n    key: \"voronoi\",\n    value: function voronoi(bounds) {\n      return new Voronoi(this, bounds);\n    }\n  }, {\n    key: \"neighbors\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function neighbors(i) {\n      var inedges, outedges, halfedges, triangles, e0, e;\n      return _regeneratorRuntime.wrap(function neighbors$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              inedges = this.inedges, outedges = this.outedges, halfedges = this.halfedges, triangles = this.triangles;\n              e0 = inedges[i];\n\n              if (!(e0 === -1)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 4:\n              // coincident point\n              e = e0;\n\n            case 5:\n              _context.next = 7;\n              return triangles[e];\n\n            case 7:\n              e = e % 3 === 2 ? e - 2 : e + 1;\n\n              if (!(triangles[e] !== i)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 10:\n              // bad triangulation\n              e = halfedges[e];\n\n              if (!(e === -1)) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.next = 14;\n              return triangles[outedges[i]];\n\n            case 14:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 15:\n              if (e !== e0) {\n                _context.next = 5;\n                break;\n              }\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, neighbors, this);\n    })\n  }, {\n    key: \"find\",\n    value: function find(x, y) {\n      var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n      var c;\n\n      while ((c = this._step(i, x, y)) >= 0 && c !== i) {\n        i = c;\n      }\n\n      return c;\n    }\n  }, {\n    key: \"_step\",\n    value: function _step(i, x, y) {\n      var inedges = this.inedges,\n          points = this.points;\n      if (inedges[i] === -1) return -1; // coincident point\n\n      var c = i;\n      var dc = Math.pow(x - points[i * 2], 2) + Math.pow(y - points[i * 2 + 1], 2);\n\n      var _iterator = _createForOfIteratorHelper(this.neighbors(i)),\n          _step2;\n\n      try {\n        for (_iterator.s(); !(_step2 = _iterator.n()).done;) {\n          var t = _step2.value;\n          var dt = Math.pow(x - points[t * 2], 2) + Math.pow(y - points[t * 2 + 1], 2);\n          if (dt < dc) dc = dt, c = t;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return c;\n    }\n  }, {\n    key: \"render\",\n    value: function render(context) {\n      var buffer = context == null ? context = new Path() : undefined;\n      var points = this.points,\n          halfedges = this.halfedges,\n          triangles = this.triangles;\n\n      for (var i = 0, n = halfedges.length; i < n; ++i) {\n        var j = halfedges[i];\n        if (j < i) continue;\n        var ti = triangles[i] * 2;\n        var tj = triangles[j] * 2;\n        context.moveTo(points[ti], points[ti + 1]);\n        context.lineTo(points[tj], points[tj + 1]);\n      }\n\n      this.renderHull(context);\n      return buffer && buffer.value();\n    }\n  }, {\n    key: \"renderPoints\",\n    value: function renderPoints(context) {\n      var r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      var buffer = context == null ? context = new Path() : undefined;\n      var points = this.points;\n\n      for (var i = 0, n = points.length; i < n; i += 2) {\n        var x = points[i],\n            y = points[i + 1];\n        context.moveTo(x + r, y);\n        context.arc(x, y, r, 0, tau);\n      }\n\n      return buffer && buffer.value();\n    }\n  }, {\n    key: \"renderHull\",\n    value: function renderHull(context) {\n      var buffer = context == null ? context = new Path() : undefined;\n      var hull = this.hull;\n      var node = hull;\n      context.moveTo(node.x, node.y);\n\n      while (node = node.next, node !== hull) {\n        context.lineTo(node.x, node.y);\n      }\n\n      context.closePath();\n      return buffer && buffer.value();\n    }\n  }, {\n    key: \"hullPolygon\",\n    value: function hullPolygon() {\n      var polygon = new Polygon();\n      this.renderHull(polygon);\n      return polygon.value();\n    }\n  }, {\n    key: \"renderTriangle\",\n    value: function renderTriangle(i, context) {\n      var buffer = context == null ? context = new Path() : undefined;\n      var points = this.points,\n          triangles = this.triangles;\n      var t0 = triangles[i *= 3] * 2;\n      var t1 = triangles[i + 1] * 2;\n      var t2 = triangles[i + 2] * 2;\n      context.moveTo(points[t0], points[t0 + 1]);\n      context.lineTo(points[t1], points[t1 + 1]);\n      context.lineTo(points[t2], points[t2 + 1]);\n      context.closePath();\n      return buffer && buffer.value();\n    }\n  }, {\n    key: \"trianglePolygons\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function trianglePolygons() {\n      var triangles, i, n;\n      return _regeneratorRuntime.wrap(function trianglePolygons$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              triangles = this.triangles;\n              i = 0, n = triangles.length / 3;\n\n            case 2:\n              if (!(i < n)) {\n                _context2.next = 8;\n                break;\n              }\n\n              _context2.next = 5;\n              return this.trianglePolygon(i);\n\n            case 5:\n              ++i;\n              _context2.next = 2;\n              break;\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, trianglePolygons, this);\n    })\n  }, {\n    key: \"trianglePolygon\",\n    value: function trianglePolygon(i) {\n      var polygon = new Polygon();\n      this.renderTriangle(i, polygon);\n      return polygon.value();\n    }\n  }]);\n\n  return Delaunay;\n}();\n\nexport { Delaunay as default };\n\nDelaunay.from = function (points) {\n  var fx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : pointX;\n  var fy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : pointY;\n  var that = arguments.length > 3 ? arguments[3] : undefined;\n  return new Delaunay(\"length\" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));\n};\n\nfunction flatArray(points, fx, fy, that) {\n  var n = points.length;\n  var array = new Float64Array(n * 2);\n\n  for (var i = 0; i < n; ++i) {\n    var p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n\n  return array;\n}\n\nfunction flatIterable(points, fx, fy, that) {\n  var i, _iterator2, _step3, p;\n\n  return _regeneratorRuntime.wrap(function flatIterable$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          i = 0;\n          _iterator2 = _createForOfIteratorHelper(points);\n          _context3.prev = 2;\n\n          _iterator2.s();\n\n        case 4:\n          if ((_step3 = _iterator2.n()).done) {\n            _context3.next = 13;\n            break;\n          }\n\n          p = _step3.value;\n          _context3.next = 8;\n          return fx.call(that, p, i, points);\n\n        case 8:\n          _context3.next = 10;\n          return fy.call(that, p, i, points);\n\n        case 10:\n          ++i;\n\n        case 11:\n          _context3.next = 4;\n          break;\n\n        case 13:\n          _context3.next = 18;\n          break;\n\n        case 15:\n          _context3.prev = 15;\n          _context3.t0 = _context3[\"catch\"](2);\n\n          _iterator2.e(_context3.t0);\n\n        case 18:\n          _context3.prev = 18;\n\n          _iterator2.f();\n\n          return _context3.finish(18);\n\n        case 21:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked, null, [[2, 15, 18, 21]]);\n}","export { default as Delaunay } from \"./delaunay.js\";\nexport { default as Voronoi } from \"./voronoi.js\";"],"sourceRoot":""}