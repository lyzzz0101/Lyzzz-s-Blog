{"version":3,"sources":["components/Articles/Diet/data.csv","components/Articles/Diet/Diet.jsx","../node_modules/numeral/numeral.js"],"names":["module","exports","__webpack_require__","p","yearOptions","d3","Diet","_useState","useState","_useState2","Object","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","allData","setAllData","_useState3","_useState4","isPlaying","setIsPlaying","_useState5","_useState6","selectedYear","setSelectedYear","_useState7","_useState8","food","setFood","useInterval","newSelectedYear","loadData","_ref","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","data","possibleFoods","wrap","_context","prev","next","dataFile","sent","uniq","map","d","Item","stop","apply","this","arguments","countryData","useMemo","filteredData","filter","countries","forEach","value","concat","Country","Number","isFinite","useEffect","console","log","foodOptions","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","className","defaultValue","onChange","e","target","key","foodEmoji","components_ui_Button_Button__WEBPACK_IMPORTED_MODULE_14__","onClick","Fragment","components_ui_Icon_Icon__WEBPACK_IMPORTED_MODULE_13__","name","size","style","marginRight","year","i","Map","components_ui_Link_Link__WEBPACK_IMPORTED_MODULE_12__","to","sphere","type","_ref2","_ref2$projectionName","projectionName","id","uniqueId","clipPathId","_useMemo","currentProjection","d3GeoProjection","projection","fitSize","pathGenerator","earthPath","graticulePath","_pathGenerator$bounds","bounds","_pathGenerator$bounds2","_pathGenerator$bounds3","_pathGenerator$bounds4","height","colorScale","domain","range","clamp","viewBox","clipPath","countryShapes","features","country","properties","su_a3","fill","name_long","geounit","Apples","Bananas & plantains","Barley","Beans","Beverages, alcoholic","Beverages, fermented","Cassava","Cereals, other","Citrus, other","Cloves","Cocoa beans","Coconuts","Coffee","Cottonseed oil","Dates","Fruits, other","Grapefruit","Grapes","Groundnut","Lemons & limes","Maize","Millets","Oats","Oilcrops, other","Olives","Onions","Oranges & mandarines","Palm oil","Peas","Pepper","Pimento","Pineapples","Potatoes","Pulses, other","Rape & mustard","Rice","Roots, other","Rye","Sesame ","Sorghum","Soybean","Spices, other","Sugar","Sunflower","Sweet potatoes","Sweeteners, other","Tea","Tomatoes","Vegetables, other","Wheat","Yams","Animal Products (Total)","Treenuts","Miscellaneous","Vegetal Products (Total)","keys","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","_numeral","_","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","version","obj","numberToFormat","format","roundingFunction","leadingCount","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","abbr","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","string","abbreviation","stringOriginal","currency","symbol","pow","min","_isNaN","_x","search","insert","subString","start","reduce","array","callback","TypeError","t","len","k","multiplier","x","parts","correctionFactor","Array","prototype","call","accum","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","toLowerCase","localeData","Error","reset","property","register","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","warn","trim","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","_format","space","splice","join","base","suffixes","binary","unformatRegex","item","_format2","bytes","suffix","bytesMultiplier","_format3","symbols","before","after","_format4","toExponential","_format5","_format6","_format7","hours","floor","minutes","seconds","timeArray"],"mappings":"6ohpHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qQCkBlCC,WAAcC,QAAS,KAAM,OA4FpBC,UA1FF,WAAM,IAAAC,EACaC,mBAAS,IADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACVK,EADUH,EAAA,GACDI,EADCJ,EAAA,GAAAK,EAEiBN,oBAAS,GAF1BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEVE,EAFUD,EAAA,GAECE,EAFDF,EAAA,GAAAG,EAGuBV,mBAAS,QAHhCW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGVE,EAHUD,EAAA,GAGIE,EAHJF,EAAA,GAAAG,EAIOd,qBAJPe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAIVE,EAJUD,EAAA,GAIJE,EAJIF,EAAA,GAMjBG,YAAY,WACV,IAAMC,EAAkBP,EAAe,EACnCO,EAAkB,KACpBV,GAAa,GAGfI,EAAgBM,IACfX,EAAY,IAAM,MAErB,IAAMY,EAAQ,eAAAC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAqB,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACInC,MAAOoC,KADX,OACTN,EADSG,EAAAI,KAETN,EAAgBO,eAAKR,EAAKS,IAAI,SAAAC,GAAC,OAAIA,EAAEC,QAC3CjC,EAAWsB,GACXV,EAAQW,EAAc,IAJP,wBAAAE,EAAAS,SAAAb,MAAH,yBAAAL,EAAAmB,MAAAC,KAAAC,YAAA,GAORC,EAAcC,kBAAQ,WAC1B,IAAMC,EAAezC,EAAQ0C,OAAO,SAAAT,GAAC,OAAIA,EAAEC,MAAQtB,IAC/C+B,EAAY,GAKhB,OAJAF,EAAaG,QAAQ,SAAAX,GACnB,IAAMY,GAASZ,EAAC,IAAAa,OAAKtC,KAAmB,EACxCmC,EAAUV,EAAEc,SAAWC,OAAOC,SAASJ,GAASA,EAAQ,IAEnDF,GACN,CAAC/B,EAAMJ,EAAcR,IAOxB,OALAkD,oBAAU,WACRlC,KACC,IACHmC,QAAQC,IAAIC,GAGVC,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,QACbF,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,iBACbF,EAAAlC,EAAAmC,cAAA,0DAEAD,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,wBACbF,EAAAlC,EAAAmC,cAAA,UACIC,UAAU,eACVC,aAAc,KACdC,SAAU,SAAAC,GAAC,OAAI9C,EAAQ8C,EAAEC,OAAOf,SAEjCQ,EAAYrB,IAAI,SAAAC,GAAC,OAChBqB,EAAAlC,EAAAmC,cAAA,UAAQM,IAAK5B,EAAGY,MAAOZ,GAAK6B,EAAU7B,GAAtC,IAA6CA,MAG/CqB,EAAAlC,EAAAmC,cAACQ,EAAA,EAAD,CAAQP,UAAU,aAAaQ,QAAS,WACjC5D,GAA6B,MAAhBI,GAAsBC,EAAgBjB,EAAY,IACpEa,GAAcD,KAEbA,EAAY,OACXkD,EAAAlC,EAAAmC,cAAAD,EAAAlC,EAAA6C,SAAA,KACEX,EAAAlC,EAAAmC,cAACW,EAAA,EAAD,CAAMC,KAAK,OAAOC,KAAK,KAAKC,MAAO,CAACC,YAAa,WADnD,UAQRhB,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,eACZhE,EAAYwC,IAAI,SAACuC,EAAMC,GAAP,OACflB,EAAAlC,EAAAmC,cAAA,OAAKC,UAAS,2CAAAV,OAA6CyB,GAAQ/D,EAAe,WAAa,cAAgBqD,IAAKU,EAAMP,QAAS,WACjIvD,EAAgB8D,GAChBlE,GAAa,KAEbiD,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,2BACXe,OAMVjB,EAAAlC,EAAAmC,cAACkB,EAAD,CAAKlD,KAAMgB,IAEXe,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,cAAf,oQAEEF,EAAAlC,EAAAmC,cAAA,WAFF,aAGYD,EAAAlC,EAAAmC,cAACmB,EAAA,EAAD,CAAMC,GAAG,mFAAT,mHAUpB,IAEMC,EAAU,CAACC,KAAM,UACjBJ,EAAM,SAAAK,GAAyD,IAAAC,EAAAD,EAAtDE,sBAAsD,IAAAD,EAAvC,2BAAuCA,EAAXxD,EAAWuD,EAAXvD,KAClD0D,EAAKC,qBACLC,EAAU,oBAAArC,OAAuBmC,GAF4BG,EAM/D5C,kBAAQ,WACV,IACE,IAAM6C,EAAoB5F,EAAGuF,IAC1BM,EAAgBN,GACnB,IAAKK,EAAmB,MAAO,GAE/B,IAAME,EAAaF,IAChBG,QAAQ,CAhBH,IACI,KAemBZ,GAEzBa,EAAgBhG,UAAW8F,GAC3BG,EAAYD,EAAcb,GAC1Be,EAAgBF,EAAchG,oBAVlCmG,EAW2BH,EAAcI,OAAOjB,GAXhDkB,EAAAhG,OAAAC,EAAA,EAAAD,CAAA8F,EAAA,GAAAG,EAAAjG,OAAAC,EAAA,EAAAD,CAAAgG,EAAA,MAAAE,GAAAD,EAAA,GAAAA,EAAA,GAAAjG,OAAAC,EAAA,EAAAD,CAAAgG,EAAA,OAAAE,EAAA,GAcF,MAAO,CACLC,OAfAD,EAAA,GAeQP,gBAAeC,YAAWC,iBAEpC,MAAOhC,GAEP,OADAR,QAAQC,IAAIO,GACL,KAER,CAACqB,IAvBMS,GALyDL,EAKjEa,OALiEb,EAKzDK,eAAeC,EAL0CN,EAK1CM,UAAWC,EAL+BP,EAK/BO,cAyB9BO,EAAa1D,kBAAQ,kBACxBjB,EAEG9B,gBACC0G,OAAO,CAAC,EAAG,MACXC,MAAM,CAAC,UAAW,YAClBC,OAAM,GAJP,MAKH,CAAC9E,IAEJ,OACE+B,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,OACbF,EAAAlC,EAAAmC,cAAA,OAAK+C,QAAO,OAAAxD,OA5CJ,IA4CI,KAAAA,OA3CA,MA6CRQ,EAAAlC,EAAAmC,cAAA,YAAU0B,GAAIE,GACZ7B,EAAAlC,EAAAmC,cAAA,QAAMtB,EAAGyD,KAEXpC,EAAAlC,EAAAmC,cAAA,QAAMC,UAAU,aAAavB,EAAGyD,IAChCpC,EAAAlC,EAAAmC,cAAA,QAAMC,UAAU,kBAAkBvB,EAAG0D,EAAeY,SAAQ,QAAAzD,OAAUqC,EAAV,OAE5D7B,EAAAlC,EAAAmC,cAAA,KAAGC,UAAU,kBACViC,GAAiBe,EAAcC,SAASzE,IAAI,SAAA0E,GAAO,OAClDpD,EAAAlC,EAAAmC,cAAA,QACEM,IAAK6C,EAAQC,WAAWC,MACxBpD,UAAU,eACVvB,EAAGwD,EAAciB,GACjBH,SAAQ,QAAAzD,OAAUqC,EAAV,KACR0B,KAAMX,GAAcA,EAClB3E,EAAKmF,EAAQC,WAAWG,YACrBvF,EAAKmF,EAAQC,WAAWI,UACxB,IACA,WAELzD,EAAAlC,EAAAmC,cAAA,aAASmD,EAAQC,WAAWG,UAA5B,KACEvF,EAAKmF,EAAQC,WAAWG,YACrBvF,EAAKmF,EAAQC,WAAWI,UACxB,EAHL,UAWVzD,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,eACbF,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,sBAAf,MACAF,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,sBACfF,EAAAlC,EAAAmC,cAAA,OAAKC,UAAU,sBAAf,WAOFM,EAAY,CAChBkD,OAAU,eACVC,sBAAuB,eACvBC,OAAU,eACVC,MAAS,eACTC,uBAAwB,eACxBC,uBAAwB,eACxBC,QAAW,eACXC,iBAAkB,eAClBC,gBAAiB,eACjBC,OAAU,eACVC,cAAe,eACfC,SAAY,eACZC,OAAU,SACVC,iBAAkB,eAClBC,MAAS,eACTC,gBAAiB,eACjBC,WAAc,eACdC,OAAU,eACVC,UAAa,eACbC,iBAAkB,eAClBC,MAAS,eACTC,QAAW,eACXC,KAAQ,eACRC,kBAAmB,eACnBC,OAAU,eACVC,OAAU,eACVC,uBAAwB,eACxBC,WAAY,eACZC,KAAQ,eACRC,OAAU,eACVC,QAAW,qBACXC,WAAc,eACdC,SAAY,eACZC,gBAAiB,eACjBC,iBAAkB,eAClBC,KAAQ,eACRC,eAAgB,eAChBC,IAAO,eACPC,UAAW,eACXC,QAAW,eACXC,QAAW,eACXC,gBAAiB,eACjBC,MAAS,eACTC,UAAa,eACbC,iBAAkB,eAClBC,oBAAqB,eACrBC,IAAO,eACPC,SAAY,eACZC,oBAAqB,eACrBC,MAAS,eACTC,KAAQ,eACRC,0BAA2B,eAC3BC,SAAY,eACZC,cAAiB,eACjBC,2BAA4B,gBAExBjH,EAAcvD,OAAOyK,KAAKzG,wBChQhC,IAAA0G,EAAAC,OASkBC,KAAAD,EAAA,oBAAdD,EAMH,WAID,IAAAG,EACAC,EAEAC,EAAA,GACAC,EAAA,GACAC,EAAA,CACAC,cAAA,KACAC,WAAA,KACAC,WAAA,KACAC,cAAA,MACAC,mBAAA,GAEAC,EAAA,CACAL,cAAAD,EAAAC,cACAC,WAAAF,EAAAE,WACAC,WAAAH,EAAAG,WACAC,cAAAJ,EAAAI,cACAC,kBAAAL,EAAAK,mBAQA,SAAAE,EAAAC,EAAAC,GACAnJ,KAAAoJ,OAAAF,EACAlJ,KAAAqJ,OAAAF,EAm5BA,OAh5BAb,EAAA,SAAAY,GACA,IAAA1I,EAAA8I,EAAAC,EAAAC,EAEA,GAAAlB,EAAAmB,UAAAP,GACA1I,EAAA0I,EAAA1I,aACK,OAAA0I,GAAA,qBAAAA,EACL1I,EAAA,OACK,UAAA0I,GAAAX,EAAAmB,MAAAR,GACL1I,EAAA,UACK,qBAAA0I,EACL,GAAAF,EAAAJ,YAAAM,IAAAF,EAAAJ,WACApI,EAAA,OACO,GAAAwI,EAAAH,YAAAK,IAAAF,EAAAH,aAAAK,EAAAS,QAAA,eAAAC,OACPpJ,EAAA,SACO,CACP,IAAA8I,KAAAd,EAGA,IAFAgB,EAAA,oBAAAhB,EAAAc,GAAAO,QAAAC,SAAAtB,EAAAc,GAAAO,QAAAC,WAAAtB,EAAAc,GAAAO,QAAAC,WAEAZ,EAAAa,MAAAP,GAAA,CACAD,EAAAf,EAAAc,GAAAQ,SACA,MAKAtJ,GADA+I,KAAAjB,EAAAC,EAAAyB,gBACAd,QAGA1I,EAAAG,OAAAuI,IAAA,KAGA,WAAAD,EAAAC,EAAA1I,KAIAyJ,QA/DA,QAiEA3B,EAAAmB,UAAA,SAAAS,GACA,OAAAA,aAAAjB,GAIAX,EAAAC,IAAA,CAEA4B,eAAA,SAAA3J,EAAA4J,EAAAC,GACA,IAGAC,EAQAC,EAEAC,EAIAC,EACAC,EACAC,EACAC,EACAC,EArBAC,EAAArC,EAAAH,EAAAU,QAAAL,eACAoC,GAAA,EACAC,GAAA,EAEAC,EAAA,GAKAC,EAAA,GACAC,GAAA,EA4FA,GA/EA3K,KAAA,EACAgK,EAAAY,KAAAZ,IAAAhK,GAGA8H,EAAAC,EAAA8C,SAAAjB,EAAA,MACAW,GAAA,EACAX,IAAAT,QAAA,iBACOrB,EAAAC,EAAA8C,SAAAjB,EAAA,MAAA9B,EAAAC,EAAA8C,SAAAjB,EAAA,QACPO,EAAArC,EAAAC,EAAA8C,SAAAjB,EAAA,KAAAA,EAAAkB,QAAA,KAAA9K,EAAA,EAAA4J,EAAAkB,QAAA,QACAlB,IAAAT,QAAA,gBAIArB,EAAAC,EAAA8C,SAAAjB,EAAA,OAEAG,KADAA,EAAAH,EAAAL,MAAA,iBACAQ,EAAA,GAEAjC,EAAAC,EAAA8C,SAAAjB,EAAA,QACAa,EAAA,KAGAb,IAAAT,QAAA,IAAA4B,OAAAN,EAAA,gBAEAT,GAzCA,OAyCAD,GAAA,MAAAA,GAEAU,GAAAH,EAAAU,cAAAC,SACAjL,GA5CA,MA6CSgK,EA7CT,MA6CSA,GA5CT,MA4CSD,GAAA,MAAAA,GAETU,GAAAH,EAAAU,cAAAE,QACAlL,GA/CA,KAgDSgK,EAhDT,KAgDSA,GA/CT,MA+CSD,GAAA,MAAAA,GAETU,GAAAH,EAAAU,cAAAG,QACAnL,GAlDA,MAmDSgK,EAnDT,KAmDSA,GAlDT,MAkDSD,GAAA,MAAAA,KAETU,GAAAH,EAAAU,cAAAI,SACApL,GArDA,MA0DA8H,EAAAC,EAAA8C,SAAAjB,EAAA,SACAY,GAAA,EACAZ,IAAAT,QAAA,YAIAc,EAAAjK,EAAAqL,WAAAC,MAAA,QACApB,EAAAN,EAAA0B,MAAA,QACAlB,EAAAR,EAAAkB,QAAA,KACAhB,GAAAF,EAAA0B,MAAA,QAAAA,MAAA,QAAA/B,MAAA,WAAAH,OAEAc,GACApC,EAAAC,EAAA8C,SAAAX,EAAA,MAEAA,GADAA,IAAAf,QAAA,SACAmC,MAAA,KACAZ,EAAA5C,EAAAC,EAAAwD,QAAAvL,EAAAkK,EAAA,GAAAd,OAAAc,EAAA,GAAAd,OAAAS,EAAAK,EAAA,GAAAd,SAEAsB,EAAA5C,EAAAC,EAAAwD,QAAAvL,EAAAkK,EAAAd,OAAAS,GAGAI,EAAAS,EAAAY,MAAA,QAGAZ,EADA5C,EAAAC,EAAA8C,SAAAH,EAAA,KACAJ,EAAAkB,WAAAd,UAAAY,MAAA,QAEA,GAGAd,GAAA,IAAArK,OAAAuK,EAAAe,MAAA,MACAf,EAAA,KAGAT,EAAAnC,EAAAC,EAAAwD,QAAAvL,EAAA,EAAA6J,GAIAY,IAAAV,GAAA5J,OAAA8J,IAAA,KAAAQ,IAAAH,EAAAU,cAAAC,SAGA,OAFAhB,EAAAyB,OAAAvL,OAAA8J,GAAA,KAEAQ,GACA,KAAAH,EAAAU,cAAAI,SACAX,EAAAH,EAAAU,cAAAG,QACA,MAEA,KAAAb,EAAAU,cAAAG,QACAV,EAAAH,EAAAU,cAAAE,QACA,MAEA,KAAAZ,EAAAU,cAAAE,QACAT,EAAAH,EAAAU,cAAAC,SAWA,GALAnD,EAAAC,EAAA8C,SAAAZ,EAAA,OACAA,IAAAwB,MAAA,GACAd,GAAA,GAGAV,EAAAb,OAAAU,EACA,QAAAnI,EAAAmI,EAAAG,EAAAb,OAA+CzH,EAAA,EAAOA,IACtDsI,EAAA,IAAAA,EAwBA,OApBAG,GAAA,IACAH,IAAAoB,WAAAlC,QAAA,0BAAmD,KAAAmB,EAAAkB,WAAApB,YAGnD,IAAAR,EAAAkB,QAAA,OACAb,EAAA,IAGAI,EAAAJ,EAAAS,GAAAD,GAAA,IAEAF,EACAF,GAAAE,GAAAI,EAAA,QAAAN,GAAAE,GAAAI,EAAA,QAEAR,GAAA,EACAE,EAAA,IAAAF,GAAAQ,EAAA,SAAAN,KAAAM,EAAA,SACSA,IACTN,EAAA,IAAAA,GAIAA,GAGAb,eAAA,SAAAmC,GACA,IAQAC,EACA5L,EAEAgJ,EAXAsB,EAAArC,EAAAO,EAAAL,eACA0D,EAAAF,EACAX,EAAA,CACAI,SAAA,EACAD,QAAA,EACAD,QAAA,EACAD,SAAA,IAOA,GAAAzC,EAAAJ,YAAAuD,IAAAnD,EAAAJ,WACApI,EAAA,OACO,GAAAwI,EAAAH,YAAAsD,IAAAnD,EAAAH,aAAAsD,EAAAxC,QAAA,eAAAC,OACPpJ,EAAA,SACO,CAOP,IAAA4L,KANA5L,EAAA,EAEA,MAAAsK,EAAAkB,WAAAd,UACAiB,IAAAxC,QAAA,UAAAA,QAAAmB,EAAAkB,WAAAd,QAAA,MAGAM,EAGA,GAFAhC,EAAA,IAAA+B,OAAA,YAAAT,EAAAU,cAAAY,GAAA,aAAAtB,EAAAwB,SAAAC,OAAA,iBAEAF,EAAAtC,MAAAP,GAAA,CACAhJ,GAAA4K,KAAAoB,IAAA,GAAAhB,EAAAY,IACA,MAKA5L,IAAA2L,EAAAL,MAAA,KAAAlC,OAAAwB,KAAAqB,IAAAN,EAAAL,MAAA,KAAAlC,OAAA,EAAAuC,EAAAL,MAAA,KAAAlC,OAAA,WAEAuC,IAAAxC,QAAA,iBACAnJ,GAAAG,OAAAwL,GAGA,OAAA3L,GAEAkJ,MAAA,SAAAgD,GACA,SAAAhD,EAAAiD,GACA,OAAAD,EAAA3M,MAAAC,KAAAC,WAOA,OAJAyJ,EAAAmC,SAAA,WACA,OAAAa,EAAAb,YAGAnC,EATA,CAUK,SAAAlJ,GACL,wBAAAA,GAAAkJ,MAAAlJ,KAEA6K,SAAA,SAAAc,EAAAS,GACA,WAAAT,EAAAb,QAAAsB,IAEAC,OAAA,SAAAV,EAAAW,EAAAC,GACA,OAAAZ,EAAAF,MAAA,EAAAc,GAAAD,EAAAX,EAAAF,MAAAc,IAEAC,OAAA,SAAAC,EAAAC,GAGA,UAAAlN,KACA,UAAAmN,UAAA,sDAGA,uBAAAD,EACA,UAAAC,UAAAD,EAAA,sBAGA,IAGA1M,EAHA4M,EAAA3P,OAAAwP,GACAI,EAAAD,EAAAxD,SAAA,EACA0D,EAAA,EAGA,OAAArN,UAAA2J,OACApJ,EAAAP,UAAA,OACO,CACP,KAAAqN,EAAAD,KAAAC,KAAAF,IACAE,IAGA,GAAAA,GAAAD,EACA,UAAAF,UAAA,+CAGA3M,EAAA4M,EAAAE,KAGA,KAAYA,EAAAD,EAASC,IACrBA,KAAAF,IACA5M,EAAA0M,EAAA1M,EAAA4M,EAAAE,KAAAF,IAIA,OAAA5M,GAQA+M,WAAA,SAAAC,GACA,IAAAC,EAAAD,EAAA3B,WAAAC,MAAA,KACA,OAAA2B,EAAA7D,OAAA,IAAAwB,KAAAoB,IAAA,GAAAiB,EAAA,GAAA7D,SAQA8D,iBAAA,WAEA,OADAC,MAAAC,UAAA3B,MAAA4B,KAAA5N,WACA+M,OAAA,SAAAc,EAAAvO,GACA,IAAAwO,EAAAxF,EAAAgF,WAAAhO,GAEA,OAAAuO,EAAAC,EAAAD,EAAAC,GACO,IASPhC,QAAA,SAAAvL,EAAAwN,EAAA3D,EAAA4D,GACA,IAEAC,EACAC,EACAC,EACAvD,EALAwD,EAAA7N,EAAAqL,WAAAC,MAAA,KACAwC,EAAAN,GAAAC,GAAA,GAqBA,OAdAC,EADA,IAAAG,EAAAzE,OACAwB,KAAAqB,IAAArB,KAAAmD,IAAAF,EAAA,GAAAzE,OAAA0E,GAAAN,GAEAM,EAGAF,EAAAhD,KAAAoB,IAAA,GAAA0B,GAEArD,GAAAR,EAAA7J,EAAA,KAAA0N,GAAAE,GAAArC,QAAAmC,GAEAD,EAAAD,EAAAE,IACAC,EAAA,IAAA5C,OAAA,YAA4C0C,GAAAD,EAAAE,IAAA,MAC5CrD,IAAAlB,QAAAwE,EAAA,KAGAtD,IAIAvC,EAAAU,UAEAV,EAAAE,UAEAF,EAAAG,UAIAH,EAAAwC,OAAA,SAAAtJ,GAKA,OAJAA,IACAwH,EAAAL,cAAAnH,EAAAgN,eAGAxF,EAAAL,eAMAL,EAAAmG,WAAA,SAAAjN,GACA,IAAAA,EACA,OAAAiH,EAAAO,EAAAL,eAKA,GAFAnH,IAAAgN,eAEA/F,EAAAjH,GACA,UAAAkN,MAAA,oBAAAlN,GAGA,OAAAiH,EAAAjH,IAGA8G,EAAAqG,MAAA,WACA,QAAAC,KAAAlG,EACAM,EAAA4F,GAAAlG,EAAAkG,IAIAtG,EAAAM,WAAA,SAAAwB,GACApB,EAAAJ,WAAA,kBAAAwB,IAAA,MAGA9B,EAAAO,WAAA,SAAAuB,GACApB,EAAAH,WAAA,kBAAAuB,IAAA,MAGA9B,EAAAQ,cAAA,SAAAsB,GACApB,EAAAF,cAAA,kBAAAsB,IAAA,OAGA9B,EAAAuG,SAAA,SAAArM,EAAAV,EAAAsI,GAGA,GAFAtI,IAAA0M,cAEAxO,KAAAwC,EAAA,KAAAV,GACA,UAAAqL,UAAArL,EAAA,IAAAU,EAAA,wBAIA,OADAxC,KAAAwC,EAAA,KAAAV,GAAAsI,EACAA,GAGA9B,EAAAwG,SAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAb,EAAAc,EAcA,GAXA,kBAAAR,IACAA,GAAA,GAEAjO,QAAA0O,MACA1O,QAAA0O,KAAA,6DAAAT,KAKAA,IAAAU,QAEA1F,MAAA,SACA,SAIA,QAAAgF,EACA,SAIA,IAEAN,EAAAnG,EAAAmG,WAAAO,GACK,MAAA1N,GACLmN,EAAAnG,EAAAmG,WAAAnG,EAAAwC,UAiBA,OAbAqE,EAAAV,EAAAnC,SAAAC,OACA8C,EAAAZ,EAAAjD,cACAyD,EAAAR,EAAAzC,WAAAd,QAGAgE,EADA,MAAAT,EAAAzC,WAAApB,UACA,MAEA6D,EAAAzC,WAAApB,WAMA,QAFA2E,EAAAR,EAAAhF,MAAA,cAGAgF,IAAAW,OAAA,GAEAH,EAAA,KAAAJ,MAQA,QAFAI,EAAAR,EAAAhF,MAAA,cAGAgF,IAAA9C,MAAA,MAEAsD,EAAA,KAAAF,EAAAzD,UAAA2D,EAAA,KAAAF,EAAA1D,SAAA4D,EAAA,KAAAF,EAAA3D,SAAA6D,EAAA,KAAAF,EAAA5D,aAKA6D,EAAA,IAAA/D,OAAA2D,EAAA,QAEAH,EAAAhF,MAAA,gBACAqF,EAAAL,EAAAjD,MAAAmD,IAEArF,OAAA,KAGAwF,EAAAxF,OAAA,IACAwF,EAAA,GAAArF,MAAA,eAAAqF,EAAA,GAAArF,MAAAuF,GAEA,IAAAF,EAAA,GAAAxF,SACAwF,EAAA,GAAArF,MAAA,WAAAqF,EAAA,GAAArF,MAAAuF,MAAAF,EAAA,GAAArF,MAAA,WAEAqF,EAAA,GAAArF,MAAA,eAAAqF,EAAA,GAAArF,MAAAuF,MAAAF,EAAA,GAAArF,MAAA,YAaAzB,EAAAqH,GAAA1G,EAAA2E,UAAA,CACAgC,MAAA,WACA,OAAAtH,EAAAtI,OAEAoK,OAAA,SAAAyF,EAAAxF,GACA,IAEAf,EACAuB,EACAiF,EAJAtP,EAAAR,KAAAqJ,OACAe,EAAAyF,GAAA7G,EAAAF,cAOA,GAFAuB,KAAAe,KAAA2E,MAEA,IAAAvP,GAAA,OAAAwI,EAAAJ,WACAiC,EAAA7B,EAAAJ,gBACO,UAAApI,GAAA,OAAAwI,EAAAH,WACPgC,EAAA7B,EAAAH,eACO,CACP,IAAAS,KAAAd,EACA,GAAA4B,EAAAL,MAAAvB,EAAAc,GAAAO,QAAAO,QAAA,CACA0F,EAAAtH,EAAAc,GAAAc,OACA,MAKAS,GADAiF,KAAAxH,EAAAC,EAAA4B,gBACA3J,EAAA4J,EAAAC,GAGA,OAAAQ,GAEArK,MAAA,WACA,OAAAR,KAAAqJ,QAEAH,MAAA,WACA,OAAAlJ,KAAAoJ,QAEA4G,IAAA,SAAAxP,GAEA,OADAR,KAAAqJ,OAAA1I,OAAAH,GACAR,MAEAiQ,IAAA,SAAAzP,GACA,IAAA0P,EAAA3H,EAAAmF,iBAAAG,KAAA,KAAA7N,KAAAqJ,OAAA7I,GAOA,OADAR,KAAAqJ,OAAAd,EAAAyE,OAAA,CAAAhN,KAAAqJ,OAAA7I,GAJA,SAAAsN,EAAAqC,EAAAC,EAAAC,GACA,OAAAvC,EAAA1C,KAAA2E,MAAAG,EAAAC,IAGA,GAAAD,EACAlQ,MAEAsQ,SAAA,SAAA9P,GACA,IAAA0P,EAAA3H,EAAAmF,iBAAAG,KAAA,KAAA7N,KAAAqJ,OAAA7I,GAOA,OADAR,KAAAqJ,OAAAd,EAAAyE,OAAA,CAAAxM,GAJA,SAAAsN,EAAAqC,EAAAC,EAAAC,GACA,OAAAvC,EAAA1C,KAAA2E,MAAAG,EAAAC,IAGA/E,KAAA2E,MAAA/P,KAAAqJ,OAAA6G,MACAlQ,MAEAuQ,SAAA,SAAA/P,GAQA,OADAR,KAAAqJ,OAAAd,EAAAyE,OAAA,CAAAhN,KAAAqJ,OAAA7I,GANA,SAAAsN,EAAAqC,EAAAC,EAAAC,GACA,IAAAH,EAAA3H,EAAAmF,iBAAAI,EAAAqC,GAEA,OAAA/E,KAAA2E,MAAAjC,EAAAoC,GAAA9E,KAAA2E,MAAAI,EAAAD,GAAA9E,KAAA2E,MAAAG,MAGA,GACAlQ,MAEAwQ,OAAA,SAAAhQ,GAQA,OADAR,KAAAqJ,OAAAd,EAAAyE,OAAA,CAAAhN,KAAAqJ,OAAA7I,GANA,SAAAsN,EAAAqC,EAAAC,EAAAC,GACA,IAAAH,EAAA3H,EAAAmF,iBAAAI,EAAAqC,GAEA,OAAA/E,KAAA2E,MAAAjC,EAAAoC,GAAA9E,KAAA2E,MAAAI,EAAAD,KAIAlQ,MAEAyQ,WAAA,SAAAjQ,GACA,OAAA4K,KAAAZ,IAAAlC,EAAAtI,KAAAqJ,QAAAiH,SAAA9P,cAOA8H,EAAAuG,SAAA,eACA7C,WAAA,CACApB,UAAA,IACAM,QAAA,KAEAM,cAAA,CACAI,SAAA,IACAD,QAAA,IACAD,QAAA,IACAD,SAAA,KAEAiF,QAAA,SAAAvH,GACA,IAAAwH,EAAAxH,EAAA,GACA,cAAAA,EAAA,iBAAAwH,EAAA,SAAAA,EAAA,SAAAA,EAAA,WAEArE,SAAA,CACAC,OAAA,OAKAjE,EAAAuG,SAAA,gBACAhF,QAAA,CACAO,OAAA,QACAN,SAAA,SAEAM,OAAA,SAAA5J,EAAAoQ,EAAAvG,GACA,IACAQ,EADAgG,EAAAvI,EAAAC,EAAA8C,SAAAuF,EAAA,eAeA,OAbApQ,GAAA,IAEAoQ,IAAAjH,QAAA,aACAkB,EAAAvC,EAAAC,EAAA4B,eAAA3J,EAAAoQ,EAAAvG,GAEA/B,EAAAC,EAAA8C,SAAAR,EAAA,OACAA,IAAAiB,MAAA,KACAgF,QAAA,IAAAD,EAAA,OACAhG,IAAAkG,KAAA,KAEAlG,IAAAgG,EAAA,MAGAhG,GAEAf,SAAA,SAAAqC,GACA,aAAA7D,EAAAC,EAAAyB,eAAAmC,IAAAJ,QAAA,OAKA,WACA,IAAAb,EAAA,CACA8F,KAAA,IACAC,SAAA,+CAEAC,EAAA,CACAF,KAAA,KACAC,SAAA,uDAKAE,EAHAjG,EAAA+F,SAAAxQ,OAAAyQ,EAAAD,SAAA5Q,OAAA,SAAA+Q,GACA,OAAAlG,EAAA+F,SAAA3F,QAAA8F,GAAA,KAEAL,KAAA,KAEAI,EAAA,IAAAA,EAAAxH,QAAA,mBAEArB,EAAAuG,SAAA,kBACAhF,QAAA,CACAO,OAAA,aACAN,SAAA,IAAAyB,OAAA4F,IAEA/G,OAAA,SAAA5J,EAAA6Q,EAAAhH,GACA,IAGA+D,EACA3B,EACA8B,EAJA+C,EAAAhJ,EAAAC,EAAA8C,SAAAgG,EAAA,MAAAH,EAAAhG,EACAqG,EAAAjJ,EAAAC,EAAA8C,SAAAgG,EAAA,OAAA/I,EAAAC,EAAA8C,SAAAgG,EAAA,cAOA,IAFAA,IAAA1H,QAAA,aAEAyE,EAAA,EAAuBA,GAAAkD,EAAAL,SAAArH,OAAgCwE,IAIvD,GAHA3B,EAAArB,KAAAoB,IAAA8E,EAAAN,KAAA5C,GACAG,EAAAnD,KAAAoB,IAAA8E,EAAAN,KAAA5C,EAAA,GAEA,OAAA5N,GAAA,IAAAA,MAAAiM,GAAAjM,EAAA+N,EAAA,CACAgD,GAAAD,EAAAL,SAAA7C,GAEA3B,EAAA,IACAjM,GAAAiM,GAGA,MAKA,OADAnE,EAAAC,EAAA4B,eAAA3J,EAAA6Q,EAAAhH,GACAkH,GAEAzH,SAAA,SAAAqC,GACA,IACAiC,EACAoD,EAFAhR,EAAA8H,EAAAC,EAAAyB,eAAAmC,GAIA,GAAA3L,EAAA,CACA,IAAA4N,EAAAlD,EAAA+F,SAAArH,OAAA,EAAmDwE,GAAA,EAAYA,IAAA,CAC/D,GAAA9F,EAAAC,EAAA8C,SAAAc,EAAAjB,EAAA+F,SAAA7C,IAAA,CACAoD,EAAApG,KAAAoB,IAAAtB,EAAA8F,KAAA5C,GACA,MAGA,GAAA9F,EAAAC,EAAA8C,SAAAc,EAAA+E,EAAAD,SAAA7C,IAAA,CACAoD,EAAApG,KAAAoB,IAAA0E,EAAAF,KAAA5C,GACA,OAIA5N,GAAAgR,GAAA,EAGA,OAAAhR,KAtEA,GA4EA8H,EAAAuG,SAAA,qBACAhF,QAAA,CACAO,OAAA,QAEAA,OAAA,SAAA5J,EAAAiR,EAAApH,GACA,IAKAQ,EAEA1I,EAPA2I,EAAAxC,EAAAG,QAAAH,EAAAU,QAAAL,eACA+I,EAAA,CACAC,OAAAF,EAAA1H,MAAA,2BACA6H,MAAAH,EAAA1H,MAAA,4BAkBA,IAZA0H,IAAA9H,QAAA,eAEAkB,EAAAvC,EAAAC,EAAA4B,eAAA3J,EAAAiR,EAAApH,GAEA7J,GAAA,GACAkR,EAAAC,OAAAD,EAAAC,OAAAhI,QAAA,aACA+H,EAAAE,MAAAF,EAAAE,MAAAjI,QAAA,cACSnJ,EAAA,IAAA8H,EAAAC,EAAA8C,SAAAqG,EAAAC,OAAA,OAAArJ,EAAAC,EAAA8C,SAAAqG,EAAAC,OAAA,OACTD,EAAAC,OAAA,IAAAD,EAAAC,QAIAxP,EAAA,EAAmBA,EAAAuP,EAAAC,OAAA/H,OAA2BzH,IAG9C,OAFAuP,EAAAC,OAAAxP,IAGA,QACA0I,EAAAvC,EAAAC,EAAAsE,OAAAhC,EAAAC,EAAAwB,SAAAC,OAAApK,GACA,MAEA,QACA0I,EAAAvC,EAAAC,EAAAsE,OAAAhC,EAAA,IAAA1I,EAAA2I,EAAAwB,SAAAC,OAAA3C,OAAA,GAMA,IAAAzH,EAAAuP,EAAAE,MAAAhI,OAAA,EAA0CzH,GAAA,EAAQA,IAGlD,OAFAuP,EAAAE,MAAAzP,IAGA,QACA0I,EAAA1I,IAAAuP,EAAAE,MAAAhI,OAAA,EAAAiB,EAAAC,EAAAwB,SAAAC,OAAAjE,EAAAC,EAAAsE,OAAAhC,EAAAC,EAAAwB,SAAAC,SAAAmF,EAAAE,MAAAhI,QAAA,EAAAzH,KACA,MAEA,QACA0I,EAAA1I,IAAAuP,EAAAE,MAAAhI,OAAA,EAAAiB,EAAA,IAAAvC,EAAAC,EAAAsE,OAAAhC,EAAA,MAAA6G,EAAAE,MAAAhI,QAAA,EAAAzH,GAAA2I,EAAAwB,SAAAC,OAAA3C,OAAA,IAKA,OAAAiB,KAMAvC,EAAAuG,SAAA,wBACAhF,QAAA,CACAO,OAAA,WACAN,SAAA,YAEAM,OAAA,SAAA5J,EAAAqR,EAAAxH,GACA,IAEAoD,GADA,kBAAAjN,GAAA8H,EAAAC,EAAAmB,MAAAlJ,GAAA,OAAAA,EAAAsR,iBACAhG,MAAA,KAGA,OAFA+F,IAAAlI,QAAA,eAAgD,IAChDrB,EAAAC,EAAA4B,eAAAxJ,OAAA8M,EAAA,IAAAoE,EAAAxH,GACA,IAAAoD,EAAA,IAEA3D,SAAA,SAAAqC,GACA,IAAAsB,EAAAnF,EAAAC,EAAA8C,SAAAc,EAAA,MAAAA,EAAAL,MAAA,MAAAK,EAAAL,MAAA,MACAtL,EAAAG,OAAA8M,EAAA,IACAW,EAAAzN,OAAA8M,EAAA,IAUA,OATAW,EAAA9F,EAAAC,EAAA8C,SAAAc,EAAA,MAAAiC,IAAA,EAAAA,EASA9F,EAAAC,EAAAyE,OAAA,CAAAxM,EAAA4K,KAAAoB,IAAA,GAAA4B,IAPA,SAAAN,EAAAqC,EAAAC,EAAAC,GACA,IAAAH,EAAA5H,EAAAC,EAAAmF,iBAAAI,EAAAqC,GAGA,OAFArC,EAAAoC,GAAAC,EAAAD,UAKA,MAMA5H,EAAAuG,SAAA,oBACAhF,QAAA,CACAO,OAAA,OAEAA,OAAA,SAAA5J,EAAAuR,EAAA1H,GACA,IAAAS,EAAAxC,EAAAG,QAAAH,EAAAU,QAAAL,eAEA+H,EAAApI,EAAAC,EAAA8C,SAAA0G,EAAA,aAKA,OAHAA,IAAApI,QAAA,WACA+G,GAAA5F,EAAA4F,QAAAlQ,GACA8H,EAAAC,EAAA4B,eAAA3J,EAAAuR,EAAA1H,GACAqG,KAMApI,EAAAuG,SAAA,uBACAhF,QAAA,CACAO,OAAA,MACAN,SAAA,OAEAM,OAAA,SAAA5J,EAAAwR,EAAA3H,GACA,IACAQ,EADAgG,EAAAvI,EAAAC,EAAA8C,SAAA2G,EAAA,aAmBA,OAhBA1J,EAAAU,QAAAD,oBACAvI,GAAA,KAIAwR,IAAArI,QAAA,YACAkB,EAAAvC,EAAAC,EAAA4B,eAAA3J,EAAAwR,EAAA3H,GAEA/B,EAAAC,EAAA8C,SAAAR,EAAA,OACAA,IAAAiB,MAAA,KACAgF,QAAA,IAAAD,EAAA,KACAhG,IAAAkG,KAAA,KAEAlG,IAAAgG,EAAA,IAGAhG,GAEAf,SAAA,SAAAqC,GACA,IAAAhD,EAAAb,EAAAC,EAAAyB,eAAAmC,GAEA,OAAA7D,EAAAU,QAAAD,kBACA,IAAAI,EAGAA,KAMAb,EAAAuG,SAAA,iBACAhF,QAAA,CACAO,OAAA,MACAN,SAAA,OAEAM,OAAA,SAAA5J,EAAAyR,EAAA5H,GACA,IAAA6H,EAAA9G,KAAA+G,MAAA3R,EAAA,OACA4R,EAAAhH,KAAA+G,OAAA3R,EAAA,GAAA0R,EAAA,QACAG,EAAAjH,KAAA2E,MAAAvP,EAAA,GAAA0R,EAAA,MAAAE,GACA,OAAAF,EAAA,KAAAE,EAAA,OAAAA,KAAA,KAAAC,EAAA,OAAAA,MAEAvI,SAAA,SAAAqC,GACA,IAAAmG,EAAAnG,EAAAL,MAAA,KACAuG,EAAA,EAgBA,OAdA,IAAAC,EAAA1I,QAEAyI,GAAA,GAAA1R,OAAA2R,EAAA,OAEAD,GAAA,GAAA1R,OAAA2R,EAAA,IAEAD,GAAA1R,OAAA2R,EAAA,KACS,IAAAA,EAAA1I,SAETyI,GAAA,GAAA1R,OAAA2R,EAAA,IAEAD,GAAA1R,OAAA2R,EAAA,KAGA3R,OAAA0R,MAKA/J,IAx7BkBH,EAAA0F,KAAA7Q,EAAAC,EAAAD,EAAAD,GAAAoL,KAAApL,EAAAC,QAAAoL","file":"static/js/67.01479a02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"c83de2cebaa8e6588614207a9117e408.csv\";","import { useState, useMemo, usePrevious, useEffect } from 'react';\nimport React, {Component} from \"react\"\nimport PropTypes from \"prop-types\"\nimport numeral from \"numeral\"\nimport * as d3 from \"d3\"\nimport * as d3GeoProjection from \"d3-geo-projection\"\nimport countryShapes from \"./countries.json\"\nimport classNames from \"classnames\"\nimport { uniq, uniqueId } from \"lodash\"\nimport dataFile from \"./data.csv\"\nimport { useInterval } from 'utils/utils.js';\n\nimport Link from \"components/_ui/Link/Link\"\nimport Icon from \"components/_ui/Icon/Icon\"\nimport Button from \"components/_ui/Button/Button\"\n\nimport './Diet.scss';\n\nconst yearOptions = d3.range(1961, 2010)\n\nconst Diet = () => {\n  const [allData, setAllData] = useState([])\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [selectedYear, setSelectedYear] = useState(\"2009\")\n  const [food, setFood] = useState()\n\n  useInterval(() => {\n    const newSelectedYear = selectedYear + 1\n    if (newSelectedYear > 2009) {\n      setIsPlaying(false)\n      return\n    }\n    setSelectedYear(newSelectedYear)\n  }, isPlaying ? 100 : null)\n\n  const loadData = async () => {\n    const data = await d3.csv(dataFile)\n    const possibleFoods = uniq(data.map(d => d.Item))\n    setAllData(data)\n    setFood(possibleFoods[0])\n  }\n\n  const countryData = useMemo(() => {\n    const filteredData = allData.filter(d => d.Item == food)\n    let countries = {}\n    filteredData.forEach(d => {\n      const value = +d[`Y${selectedYear}`] || 0\n      countries[d.Country] = Number.isFinite(value) ? value : 0\n    })\n    return countries\n  }, [food, selectedYear, allData])\n\n  useEffect(() => {\n    loadData()\n  }, [])\n  console.log(foodOptions)\n\n  return (\n    <div className=\"Diet\">\n      <div className=\"Diet__content\">\n        <h1>In which countries are most people eating...</h1>\n\n        <div className=\"Diet__select-wrapper\">\n          <select\n              className=\"Diet__select\"\n              defaultValue={null}\n              onChange={e => setFood(e.target.value)}\n          >\n            {foodOptions.map(d => (\n              <option key={d} value={d}>{ foodEmoji[d] } { d }</option>\n            ))}\n          </select>\n            <Button className=\"Diet__play\" onClick={() => {\n              if (!isPlaying && selectedYear == 2009) setSelectedYear(yearOptions[0])\n              setIsPlaying(!isPlaying)\n            }}>\n              {isPlaying ? \"Stop\" : (\n                <>\n                  <Icon name=\"play\" size=\"xs\" style={{marginRight: \"0.6em\"}} />\n                  Play\n                </>\n              )}\n            </Button>\n          </div>\n\n        <div className=\"Diet__years\">\n          {yearOptions.map((year, i) => (\n            <div className={`Diet__years__item Diet__years__item--is-${year == selectedYear ? \"selected\" : \"unselected\"}`} key={year} onClick={() => {\n              setSelectedYear(year)\n              setIsPlaying(false)\n            }}>\n              <div className=\"Diet__years__item__text\">\n                { year }\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <Map data={countryData} />\n\n        <div className=\"Diet__note\">\n          Food supply from plants represents national production plus imports plus or minus stock changes over the survey period; minus exports, quantities used for seed, animal feed, and in the manufacture of nonfood products, and losses during storage and transport\n          <br />\n          Data from <Link to=\"https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/HYOWIC\">Replication Data for: Increasing homogeneity in global food supplies and the implications for food security</Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Diet\n\n\nconst width = 900\nconst maxHeight = 500\nconst sphere = ({type: \"Sphere\"})\nconst Map = ({ projectionName=\"geoInterruptedHomolosine\", data }) => {\n  const id = uniqueId()\n  const clipPathId = `GeoExample__clip-${id}`\n\n  const {\n    height, pathGenerator, earthPath, graticulePath\n  } = useMemo(() => {\n    try {\n      const currentProjection = d3[projectionName]\n      || d3GeoProjection[projectionName]\n      if (!currentProjection) return {}\n\n      const projection = currentProjection()\n        .fitSize([width, maxHeight], sphere)\n\n      const pathGenerator = d3.geoPath(projection)\n      const earthPath = pathGenerator(sphere)\n      const graticulePath = pathGenerator(d3.geoGraticule10())\n      const [[x0, y0], [x1, y1]] = pathGenerator.bounds(sphere)\n      const height = y1\n\n      return {\n        height, pathGenerator, earthPath, graticulePath\n      }\n    } catch (e) {\n      console.log(e)\n      return {}\n    }\n  }, [projectionName])\n\n  const colorScale = useMemo(() => (\n    !data\n      ? null\n      : d3.scaleLinear()\n        .domain([0, 100])\n        .range([\"#dcdde1\", \"#5758BB\"])\n        .clamp(true)\n  ), [data])\n\n  return (\n    <div className=\"Map\">\n      <svg viewBox={`0 0 ${width} ${maxHeight}`}>\n        {/* <g transform={`translate(0, ${(maxHeight - height) / 2})`}> */}\n          <clipPath id={clipPathId}>\n            <path d={earthPath} />\n          </clipPath>\n          <path className=\"Map__earth\" d={earthPath} />\n          <path className=\"Map__graticules\" d={graticulePath} clipPath={`url(#${clipPathId})`} />\n\n          <g className=\"Map__countries\">\n            {pathGenerator && countryShapes.features.map(country => (\n              <path\n                key={country.properties.su_a3}\n                className=\"Map__country\"\n                d={pathGenerator(country)}\n                clipPath={`url(#${clipPathId})`}\n                fill={colorScale && colorScale(\n                  data[country.properties.name_long]\n                  || data[country.properties.geounit]\n                  || 0\n                ) || \"#dcdde1\"}\n              >\n                <title>{ country.properties.name_long }: {\n                  data[country.properties.name_long]\n                  || data[country.properties.geounit]\n                  || 0\n                }%</title>\n              </path>\n            ))}\n          </g>\n        {/* </g> */}\n      </svg>\n\n      <div className=\"Map__legend\">\n        <div className=\"Map__legend__value\">0%</div>\n        <div className=\"Map__legend__fill\"></div>\n        <div className=\"Map__legend__value\">100%</div>\n      </div>\n    </div>\n  )\n}\n\n\nconst foodEmoji = {\n  \"Apples\": \"🍎\",\n  \"Bananas & plantains\": \"🍌\",\n  \"Barley\": \"🌾\",\n  \"Beans\": \"🌯\",\n  \"Beverages, alcoholic\": \"🍷\",\n  \"Beverages, fermented\": \"🍶\",\n  \"Cassava\": \"🍠\",\n  \"Cereals, other\": \"🥣\",\n  \"Citrus, other\": \"🍈\",\n  \"Cloves\": \"🍀\",\n  \"Cocoa beans\": \"🍫\",\n  \"Coconuts\": \"🥥\",\n  \"Coffee\": \"☕\",\n  \"Cottonseed oil\": \"🧶\",\n  \"Dates\": \"📅\",\n  \"Fruits, other\": \"🥝\",\n  \"Grapefruit\": \"🍈\",\n  \"Grapes\": \"🍇\",\n  \"Groundnut\": \"🥜\",\n  \"Lemons & limes\": \"🍋\",\n  \"Maize\": \"🌾\",\n  \"Millets\": \"🌾\",\n  \"Oats\": \"🌾\",\n  \"Oilcrops, other\": \"🌾\",\n  \"Olives\": \"🍸\",\n  \"Onions\": \"🧅\",\n  \"Oranges & mandarines\": \"🍊\",\n  \"Palm oil\": \"🌾\",\n  \"Peas\": \"🥗\",\n  \"Pepper\": \"🌶\",\n  \"Pimento\": \"🌶️\",\n  \"Pineapples\": \"🍍\",\n  \"Potatoes\": \"🥔\",\n  \"Pulses, other\": \"🌯\",\n  \"Rape & mustard\": \"🥬\",\n  \"Rice\": \"🍚\",\n  \"Roots, other\": \"🥕\",\n  \"Rye\": \"🥃\",\n  \"Sesame \": \"🌾\",\n  \"Sorghum\": \"🌾\",\n  \"Soybean\": \"🌱\",\n  \"Spices, other\": \"🌿\",\n  \"Sugar\": \"🍬\",\n  \"Sunflower\": \"🌻\",\n  \"Sweet potatoes\": \"🍠\",\n  \"Sweeteners, other\": \"🍬\",\n  \"Tea\": \"🍵\",\n  \"Tomatoes\": \"🍅\",\n  \"Vegetables, other\": \"🍆\",\n  \"Wheat\": \"🌾\",\n  \"Yams\": \"🥔\",\n  \"Animal Products (Total)\": \"🐮\",\n  \"Treenuts\": \"🌰\",\n  \"Miscellaneous\": \"🌱\",\n  \"Vegetal Products (Total)\": \"🥗\",\n}\nconst foodOptions = Object.keys(foodEmoji)","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    global.numeral = factory();\n  }\n})(this, function () {\n  /************************************\n      Variables\n  ************************************/\n  var _numeral,\n      _,\n      VERSION = '2.0.6',\n      formats = {},\n      locales = {},\n      defaults = {\n    currentLocale: 'en',\n    zeroFormat: null,\n    nullFormat: null,\n    defaultFormat: '0,0',\n    scalePercentBy100: true\n  },\n      options = {\n    currentLocale: defaults.currentLocale,\n    zeroFormat: defaults.zeroFormat,\n    nullFormat: defaults.nullFormat,\n    defaultFormat: defaults.defaultFormat,\n    scalePercentBy100: defaults.scalePercentBy100\n  };\n  /************************************\n      Constructors\n  ************************************/\n  // Numeral prototype object\n\n\n  function Numeral(input, number) {\n    this._input = input;\n    this._value = number;\n  }\n\n  _numeral = function numeral(input) {\n    var value, kind, unformatFunction, regexp;\n\n    if (_numeral.isNumeral(input)) {\n      value = input.value();\n    } else if (input === 0 || typeof input === 'undefined') {\n      value = 0;\n    } else if (input === null || _.isNaN(input)) {\n      value = null;\n    } else if (typeof input === 'string') {\n      if (options.zeroFormat && input === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        for (kind in formats) {\n          regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n          if (regexp && input.match(regexp)) {\n            unformatFunction = formats[kind].unformat;\n            break;\n          }\n        }\n\n        unformatFunction = unformatFunction || _numeral._.stringToNumber;\n        value = unformatFunction(input);\n      }\n    } else {\n      value = Number(input) || null;\n    }\n\n    return new Numeral(input, value);\n  }; // version number\n\n\n  _numeral.version = VERSION; // compare numeral object\n\n  _numeral.isNumeral = function (obj) {\n    return obj instanceof Numeral;\n  }; // helper functions\n\n\n  _numeral._ = _ = {\n    // formats numbers separators, decimals places, signs, abbreviations\n    numberToFormat: function numberToFormat(value, format, roundingFunction) {\n      var locale = locales[_numeral.options.currentLocale],\n          negP = false,\n          optDec = false,\n          leadingCount = 0,\n          abbr = '',\n          trillion = 1000000000000,\n          billion = 1000000000,\n          million = 1000000,\n          thousand = 1000,\n          decimal = '',\n          neg = false,\n          abbrForce,\n          // force abbreviation\n      abs,\n          min,\n          max,\n          power,\n          int,\n          precision,\n          signed,\n          thousands,\n          output; // make sure we never format a null value\n\n      value = value || 0;\n      abs = Math.abs(value); // see if we should use parentheses for negative number or if we should prefix with a sign\n      // if both are present we default to parentheses\n\n      if (_numeral._.includes(format, '(')) {\n        negP = true;\n        format = format.replace(/[\\(|\\)]/g, '');\n      } else if (_numeral._.includes(format, '+') || _numeral._.includes(format, '-')) {\n        signed = _numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n        format = format.replace(/[\\+|\\-]/g, '');\n      } // see if abbreviation is wanted\n\n\n      if (_numeral._.includes(format, 'a')) {\n        abbrForce = format.match(/a(k|m|b|t)?/);\n        abbrForce = abbrForce ? abbrForce[1] : false; // check for space before abbreviation\n\n        if (_numeral._.includes(format, ' a')) {\n          abbr = ' ';\n        }\n\n        format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n        if (abs >= trillion && !abbrForce || abbrForce === 't') {\n          // trillion\n          abbr += locale.abbreviations.trillion;\n          value = value / trillion;\n        } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n          // billion\n          abbr += locale.abbreviations.billion;\n          value = value / billion;\n        } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n          // million\n          abbr += locale.abbreviations.million;\n          value = value / million;\n        } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n          // thousand\n          abbr += locale.abbreviations.thousand;\n          value = value / thousand;\n        }\n      } // check for optional decimals\n\n\n      if (_numeral._.includes(format, '[.]')) {\n        optDec = true;\n        format = format.replace('[.]', '.');\n      } // break number and format\n\n\n      int = value.toString().split('.')[0];\n      precision = format.split('.')[1];\n      thousands = format.indexOf(',');\n      leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n      if (precision) {\n        if (_numeral._.includes(precision, '[')) {\n          precision = precision.replace(']', '');\n          precision = precision.split('[');\n          decimal = _numeral._.toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n        } else {\n          decimal = _numeral._.toFixed(value, precision.length, roundingFunction);\n        }\n\n        int = decimal.split('.')[0];\n\n        if (_numeral._.includes(decimal, '.')) {\n          decimal = locale.delimiters.decimal + decimal.split('.')[1];\n        } else {\n          decimal = '';\n        }\n\n        if (optDec && Number(decimal.slice(1)) === 0) {\n          decimal = '';\n        }\n      } else {\n        int = _numeral._.toFixed(value, 0, roundingFunction);\n      } // check abbreviation again after rounding\n\n\n      if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n        int = String(Number(int) / 1000);\n\n        switch (abbr) {\n          case locale.abbreviations.thousand:\n            abbr = locale.abbreviations.million;\n            break;\n\n          case locale.abbreviations.million:\n            abbr = locale.abbreviations.billion;\n            break;\n\n          case locale.abbreviations.billion:\n            abbr = locale.abbreviations.trillion;\n            break;\n        }\n      } // format number\n\n\n      if (_numeral._.includes(int, '-')) {\n        int = int.slice(1);\n        neg = true;\n      }\n\n      if (int.length < leadingCount) {\n        for (var i = leadingCount - int.length; i > 0; i--) {\n          int = '0' + int;\n        }\n      }\n\n      if (thousands > -1) {\n        int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n      }\n\n      if (format.indexOf('.') === 0) {\n        int = '';\n      }\n\n      output = int + decimal + (abbr ? abbr : '');\n\n      if (negP) {\n        output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n      } else {\n        if (signed >= 0) {\n          output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n        } else if (neg) {\n          output = '-' + output;\n        }\n      }\n\n      return output;\n    },\n    // unformats numbers separators, decimals places, signs, abbreviations\n    stringToNumber: function stringToNumber(string) {\n      var locale = locales[options.currentLocale],\n          stringOriginal = string,\n          abbreviations = {\n        thousand: 3,\n        million: 6,\n        billion: 9,\n        trillion: 12\n      },\n          abbreviation,\n          value,\n          i,\n          regexp;\n\n      if (options.zeroFormat && string === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        value = 1;\n\n        if (locale.delimiters.decimal !== '.') {\n          string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n        }\n\n        for (abbreviation in abbreviations) {\n          regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n          if (stringOriginal.match(regexp)) {\n            value *= Math.pow(10, abbreviations[abbreviation]);\n            break;\n          }\n        } // check for negative number\n\n\n        value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1; // remove non numbers\n\n        string = string.replace(/[^0-9\\.]+/g, '');\n        value *= Number(string);\n      }\n\n      return value;\n    },\n    isNaN: function (_isNaN) {\n      function isNaN(_x) {\n        return _isNaN.apply(this, arguments);\n      }\n\n      isNaN.toString = function () {\n        return _isNaN.toString();\n      };\n\n      return isNaN;\n    }(function (value) {\n      return typeof value === 'number' && isNaN(value);\n    }),\n    includes: function includes(string, search) {\n      return string.indexOf(search) !== -1;\n    },\n    insert: function insert(string, subString, start) {\n      return string.slice(0, start) + subString + string.slice(start);\n    },\n    reduce: function reduce(array, callback\n    /*, initialValue*/\n    ) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.reduce called on null or undefined');\n      }\n\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n\n      var t = Object(array),\n          len = t.length >>> 0,\n          k = 0,\n          value;\n\n      if (arguments.length === 3) {\n        value = arguments[2];\n      } else {\n        while (k < len && !(k in t)) {\n          k++;\n        }\n\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n\n        value = t[k++];\n      }\n\n      for (; k < len; k++) {\n        if (k in t) {\n          value = callback(value, t[k], k, t);\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    multiplier: function multiplier(x) {\n      var parts = x.toString().split('.');\n      return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n    },\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    correctionFactor: function correctionFactor() {\n      var args = Array.prototype.slice.call(arguments);\n      return args.reduce(function (accum, next) {\n        var mn = _.multiplier(next);\n\n        return accum > mn ? accum : mn;\n      }, 1);\n    },\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    toFixed: function toFixed(value, maxDecimals, roundingFunction, optionals) {\n      var splitValue = value.toString().split('.'),\n          minDecimals = maxDecimals - (optionals || 0),\n          boundedPrecision,\n          optionalsRegExp,\n          power,\n          output; // Use the smallest precision value possible to avoid errors from floating point representation\n\n      if (splitValue.length === 2) {\n        boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n      } else {\n        boundedPrecision = minDecimals;\n      }\n\n      power = Math.pow(10, boundedPrecision); // Multiply up by precision, round accurately, then divide and use native toFixed():\n\n      output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n      if (optionals > maxDecimals - boundedPrecision) {\n        optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n        output = output.replace(optionalsRegExp, '');\n      }\n\n      return output;\n    }\n  }; // avaliable options\n\n  _numeral.options = options; // avaliable formats\n\n  _numeral.formats = formats; // avaliable formats\n\n  _numeral.locales = locales; // This function sets the current locale.  If\n  // no arguments are passed in, it will simply return the current global\n  // locale key.\n\n  _numeral.locale = function (key) {\n    if (key) {\n      options.currentLocale = key.toLowerCase();\n    }\n\n    return options.currentLocale;\n  }; // This function provides access to the loaded locale data.  If\n  // no arguments are passed in, it will simply return the current\n  // global locale object.\n\n\n  _numeral.localeData = function (key) {\n    if (!key) {\n      return locales[options.currentLocale];\n    }\n\n    key = key.toLowerCase();\n\n    if (!locales[key]) {\n      throw new Error('Unknown locale : ' + key);\n    }\n\n    return locales[key];\n  };\n\n  _numeral.reset = function () {\n    for (var property in defaults) {\n      options[property] = defaults[property];\n    }\n  };\n\n  _numeral.zeroFormat = function (format) {\n    options.zeroFormat = typeof format === 'string' ? format : null;\n  };\n\n  _numeral.nullFormat = function (format) {\n    options.nullFormat = typeof format === 'string' ? format : null;\n  };\n\n  _numeral.defaultFormat = function (format) {\n    options.defaultFormat = typeof format === 'string' ? format : '0.0';\n  };\n\n  _numeral.register = function (type, name, format) {\n    name = name.toLowerCase();\n\n    if (this[type + 's'][name]) {\n      throw new TypeError(name + ' ' + type + ' already registered.');\n    }\n\n    this[type + 's'][name] = format;\n    return format;\n  };\n\n  _numeral.validate = function (val, culture) {\n    var _decimalSep, _thousandSep, _currSymbol, _valArray, _abbrObj, _thousandRegEx, localeData, temp; //coerce val to string\n\n\n    if (typeof val !== 'string') {\n      val += '';\n\n      if (console.warn) {\n        console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n      }\n    } //trim whitespaces from either sides\n\n\n    val = val.trim(); //if val is just digits return true\n\n    if (!!val.match(/^\\d+$/)) {\n      return true;\n    } //if val is empty return false\n\n\n    if (val === '') {\n      return false;\n    } //get the decimal and thousands separator from numeral.localeData\n\n\n    try {\n      //check if the culture is understood by numeral. if not, default it to current locale\n      localeData = _numeral.localeData(culture);\n    } catch (e) {\n      localeData = _numeral.localeData(_numeral.locale());\n    } //setup the delimiters and currency symbol based on culture/locale\n\n\n    _currSymbol = localeData.currency.symbol;\n    _abbrObj = localeData.abbreviations;\n    _decimalSep = localeData.delimiters.decimal;\n\n    if (localeData.delimiters.thousands === '.') {\n      _thousandSep = '\\\\.';\n    } else {\n      _thousandSep = localeData.delimiters.thousands;\n    } // validating currency symbol\n\n\n    temp = val.match(/^[^\\d]+/);\n\n    if (temp !== null) {\n      val = val.substr(1);\n\n      if (temp[0] !== _currSymbol) {\n        return false;\n      }\n    } //validating abbreviation symbol\n\n\n    temp = val.match(/[^\\d]+$/);\n\n    if (temp !== null) {\n      val = val.slice(0, -1);\n\n      if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n        return false;\n      }\n    }\n\n    _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n    if (!val.match(/[^\\d.,]/g)) {\n      _valArray = val.split(_decimalSep);\n\n      if (_valArray.length > 2) {\n        return false;\n      } else {\n        if (_valArray.length < 2) {\n          return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx);\n        } else {\n          if (_valArray[0].length === 1) {\n            return !!_valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          } else {\n            return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /************************************\n      Numeral Prototype\n  ************************************/\n\n\n  _numeral.fn = Numeral.prototype = {\n    clone: function clone() {\n      return _numeral(this);\n    },\n    format: function format(inputString, roundingFunction) {\n      var value = this._value,\n          format = inputString || options.defaultFormat,\n          kind,\n          output,\n          formatFunction; // make sure we have a roundingFunction\n\n      roundingFunction = roundingFunction || Math.round; // format based on value\n\n      if (value === 0 && options.zeroFormat !== null) {\n        output = options.zeroFormat;\n      } else if (value === null && options.nullFormat !== null) {\n        output = options.nullFormat;\n      } else {\n        for (kind in formats) {\n          if (format.match(formats[kind].regexps.format)) {\n            formatFunction = formats[kind].format;\n            break;\n          }\n        }\n\n        formatFunction = formatFunction || _numeral._.numberToFormat;\n        output = formatFunction(value, format, roundingFunction);\n      }\n\n      return output;\n    },\n    value: function value() {\n      return this._value;\n    },\n    input: function input() {\n      return this._input;\n    },\n    set: function set(value) {\n      this._value = Number(value);\n      return this;\n    },\n    add: function add(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum + Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n      return this;\n    },\n    subtract: function subtract(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum - Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n      return this;\n    },\n    multiply: function multiply(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 1);\n      return this;\n    },\n    divide: function divide(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback);\n      return this;\n    },\n    difference: function difference(value) {\n      return Math.abs(_numeral(this._value).subtract(value).value());\n    }\n  };\n  /************************************\n      Default Locale && Format\n  ************************************/\n\n  _numeral.register('locale', 'en', {\n    delimiters: {\n      thousands: ',',\n      decimal: '.'\n    },\n    abbreviations: {\n      thousand: 'k',\n      million: 'm',\n      billion: 'b',\n      trillion: 't'\n    },\n    ordinal: function ordinal(number) {\n      var b = number % 10;\n      return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n    },\n    currency: {\n      symbol: '$'\n    }\n  });\n\n  (function () {\n    _numeral.register('format', 'bps', {\n      regexps: {\n        format: /(BPS)/,\n        unformat: /(BPS)/\n      },\n      format: function format(value, _format, roundingFunction) {\n        var space = _numeral._.includes(_format, ' BPS') ? ' ' : '',\n            output;\n        value = value * 10000; // check for space before BPS\n\n        _format = _format.replace(/\\s?BPS/, '');\n        output = _numeral._.numberToFormat(value, _format, roundingFunction);\n\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + 'BPS');\n          output = output.join('');\n        } else {\n          output = output + space + 'BPS';\n        }\n\n        return output;\n      },\n      unformat: function unformat(string) {\n        return +(_numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n      }\n    });\n  })();\n\n  (function () {\n    var decimal = {\n      base: 1000,\n      suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    },\n        binary = {\n      base: 1024,\n      suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n    };\n    var allSuffixes = decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n      return decimal.suffixes.indexOf(item) < 0;\n    }));\n    var unformatRegex = allSuffixes.join('|'); // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n\n    unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    _numeral.register('format', 'bytes', {\n      regexps: {\n        format: /([0\\s]i?b)/,\n        unformat: new RegExp(unformatRegex)\n      },\n      format: function format(value, _format2, roundingFunction) {\n        var output,\n            bytes = _numeral._.includes(_format2, 'ib') ? binary : decimal,\n            suffix = _numeral._.includes(_format2, ' b') || _numeral._.includes(_format2, ' ib') ? ' ' : '',\n            power,\n            min,\n            max; // check for space before\n\n        _format2 = _format2.replace(/\\s?i?b/, '');\n\n        for (power = 0; power <= bytes.suffixes.length; power++) {\n          min = Math.pow(bytes.base, power);\n          max = Math.pow(bytes.base, power + 1);\n\n          if (value === null || value === 0 || value >= min && value < max) {\n            suffix += bytes.suffixes[power];\n\n            if (min > 0) {\n              value = value / min;\n            }\n\n            break;\n          }\n        }\n\n        output = _numeral._.numberToFormat(value, _format2, roundingFunction);\n        return output + suffix;\n      },\n      unformat: function unformat(string) {\n        var value = _numeral._.stringToNumber(string),\n            power,\n            bytesMultiplier;\n\n        if (value) {\n          for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n            if (_numeral._.includes(string, decimal.suffixes[power])) {\n              bytesMultiplier = Math.pow(decimal.base, power);\n              break;\n            }\n\n            if (_numeral._.includes(string, binary.suffixes[power])) {\n              bytesMultiplier = Math.pow(binary.base, power);\n              break;\n            }\n          }\n\n          value *= bytesMultiplier || 1;\n        }\n\n        return value;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'currency', {\n      regexps: {\n        format: /(\\$)/\n      },\n      format: function format(value, _format3, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n            symbols = {\n          before: _format3.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n          after: _format3.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n        },\n            output,\n            symbol,\n            i; // strip format of spaces and $\n\n        _format3 = _format3.replace(/\\s?\\$\\s?/, ''); // format the number\n\n        output = _numeral._.numberToFormat(value, _format3, roundingFunction); // update the before and after based on value\n\n        if (value >= 0) {\n          symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n          symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n        } else if (value < 0 && !_numeral._.includes(symbols.before, '-') && !_numeral._.includes(symbols.before, '(')) {\n          symbols.before = '-' + symbols.before;\n        } // loop through each before symbol\n\n\n        for (i = 0; i < symbols.before.length; i++) {\n          symbol = symbols.before[i];\n\n          switch (symbol) {\n            case '$':\n              output = _numeral._.insert(output, locale.currency.symbol, i);\n              break;\n\n            case ' ':\n              output = _numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n              break;\n          }\n        } // loop through each after symbol\n\n\n        for (i = symbols.after.length - 1; i >= 0; i--) {\n          symbol = symbols.after[i];\n\n          switch (symbol) {\n            case '$':\n              output = i === symbols.after.length - 1 ? output + locale.currency.symbol : _numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n              break;\n\n            case ' ':\n              output = i === symbols.after.length - 1 ? output + ' ' : _numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n              break;\n          }\n        }\n\n        return output;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'exponential', {\n      regexps: {\n        format: /(e\\+|e-)/,\n        unformat: /(e\\+|e-)/\n      },\n      format: function format(value, _format4, roundingFunction) {\n        var output,\n            exponential = typeof value === 'number' && !_numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n            parts = exponential.split('e');\n        _format4 = _format4.replace(/e[\\+|\\-]{1}0/, '');\n        output = _numeral._.numberToFormat(Number(parts[0]), _format4, roundingFunction);\n        return output + 'e' + parts[1];\n      },\n      unformat: function unformat(string) {\n        var parts = _numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n            value = Number(parts[0]),\n            power = Number(parts[1]);\n        power = _numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n        function cback(accum, curr, currI, O) {\n          var corrFactor = _numeral._.correctionFactor(accum, curr),\n              num = accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);\n\n          return num;\n        }\n\n        return _numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'ordinal', {\n      regexps: {\n        format: /(o)/\n      },\n      format: function format(value, _format5, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n            output,\n            ordinal = _numeral._.includes(_format5, ' o') ? ' ' : ''; // check for space before\n\n        _format5 = _format5.replace(/\\s?o/, '');\n        ordinal += locale.ordinal(value);\n        output = _numeral._.numberToFormat(value, _format5, roundingFunction);\n        return output + ordinal;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'percentage', {\n      regexps: {\n        format: /(%)/,\n        unformat: /(%)/\n      },\n      format: function format(value, _format6, roundingFunction) {\n        var space = _numeral._.includes(_format6, ' %') ? ' ' : '',\n            output;\n\n        if (_numeral.options.scalePercentBy100) {\n          value = value * 100;\n        } // check for space before %\n\n\n        _format6 = _format6.replace(/\\s?\\%/, '');\n        output = _numeral._.numberToFormat(value, _format6, roundingFunction);\n\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + '%');\n          output = output.join('');\n        } else {\n          output = output + space + '%';\n        }\n\n        return output;\n      },\n      unformat: function unformat(string) {\n        var number = _numeral._.stringToNumber(string);\n\n        if (_numeral.options.scalePercentBy100) {\n          return number * 0.01;\n        }\n\n        return number;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'time', {\n      regexps: {\n        format: /(:)/,\n        unformat: /(:)/\n      },\n      format: function format(value, _format7, roundingFunction) {\n        var hours = Math.floor(value / 60 / 60),\n            minutes = Math.floor((value - hours * 60 * 60) / 60),\n            seconds = Math.round(value - hours * 60 * 60 - minutes * 60);\n        return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n      },\n      unformat: function unformat(string) {\n        var timeArray = string.split(':'),\n            seconds = 0; // turn hours and minutes into seconds and add them all up\n\n        if (timeArray.length === 3) {\n          // hours\n          seconds = seconds + Number(timeArray[0]) * 60 * 60; // minutes\n\n          seconds = seconds + Number(timeArray[1]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n          // minutes\n          seconds = seconds + Number(timeArray[0]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[1]);\n        }\n\n        return Number(seconds);\n      }\n    });\n  })();\n\n  return _numeral;\n});"],"sourceRoot":""}