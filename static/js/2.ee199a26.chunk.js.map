{"version":3,"sources":["../node_modules/numeral/numeral.js","../node_modules/dom-to-image/src/dom-to-image.js"],"names":["__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","_numeral","_","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","this","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","leadingCount","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","abbr","decimal","neg","Math","includes","indexOf","RegExp","abbreviations","trillion","billion","million","thousand","toString","split","toFixed","delimiters","slice","String","i","string","abbreviation","stringOriginal","currency","symbol","pow","min","_isNaN","_x","apply","arguments","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","multiplier","x","parts","correctionFactor","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","_format","space","splice","join","base","suffixes","binary","unformatRegex","concat","filter","item","_format2","bytes","suffix","bytesMultiplier","_format3","symbols","before","after","_format4","toExponential","_format5","_format6","_format7","hours","floor","minutes","seconds","timeArray","exports","__webpack_require__","module","global","util","escape","parseExtension","mimeType","url","extension","WOFF","woff","woff2","ttf","eot","png","jpg","jpeg","gif","tiff","svg","mimes","dataAsUrl","content","isDataUrl","canvasToBlob","canvas","toBlob","Promise","resolve","binaryString","window","atob","toDataURL","binaryArray","Uint8Array","charCodeAt","Blob","resolveUrl","baseUrl","doc","document","implementation","createHTMLDocument","createElement","head","appendChild","a","body","href","getAndEncode","TIMEOUT","domtoimage","impl","cacheBust","test","Date","getTime","placeholder","request","XMLHttpRequest","onreadystatechange","readyState","status","fail","encoder","FileReader","onloadend","result","readAsDataURL","response","ontimeout","responseType","timeout","open","send","imagePlaceholder","message","error","uid","index","random","delay","ms","arg","setTimeout","asArray","arrayLike","push","escapeXhtml","makeImage","uri","reject","image","Image","onload","onerror","src","width","node","leftBorder","px","rightBorder","scrollWidth","height","topBorder","bottomBorder","scrollHeight","exec","styleProperty","getComputedStyle","getPropertyValue","parseFloat","newUtil","inliner","URL_REGEX","inlineAll","get","shouldProcess","then","readUrls","urls","done","forEach","inline","data","dataUrl","urlAsRegex","newInliner","fontFaces","resolveAll","readAll","webFonts","all","map","webFont","cssStrings","styleSheets","cssRules","sheet","bind","log","rule","CSSRule","FONT_FACE_RULE","style","rules","newWebFont","webFontRule","parentStyleSheet","cssText","newFontFaces","images","Element","background","inlined","setProperty","getPropertyPriority","inlineBackground","HTMLImageElement","newImage","childNodes","child","element","newImages","defaultOptions","toSvg","toPng","draw","toJpeg","quality","toPixelData","getContext","getImageData","copyOptions","root","HTMLCanvasElement","cloneNode","original","children","parent","childClone","cloneChildrenInOrder","cloneChildren","source","target","copyProperties","className","styleElement","selector","formatCssText","formatCssProperties","createTextNode","formatPseudoElementStyle","clonePseudoElement","HTMLTextAreaElement","innerHTML","HTMLInputElement","setAttribute","SVGElement","SVGRectElement","attribute","getAttribute","processClone","embedFonts","inlineImages","bgcolor","backgroundColor","keys","XMLSerializer","serializeToString","xhtml","foreignObject","makeSvgDataUri","domNode","ctx","fillStyle","fillRect","newCanvas","drawImage","makeNodeCopy","copyStyle","cloneStyle","clonePseudoElements","formatProperty","copyUserInput","fixSvg","styleNode"],"mappings":"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","file":"static/js/2.ee199a26.chunk.js","sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n(function (global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    global.numeral = factory();\n  }\n})(this, function () {\n  /************************************\n      Variables\n  ************************************/\n  var _numeral,\n      _,\n      VERSION = '2.0.6',\n      formats = {},\n      locales = {},\n      defaults = {\n    currentLocale: 'en',\n    zeroFormat: null,\n    nullFormat: null,\n    defaultFormat: '0,0',\n    scalePercentBy100: true\n  },\n      options = {\n    currentLocale: defaults.currentLocale,\n    zeroFormat: defaults.zeroFormat,\n    nullFormat: defaults.nullFormat,\n    defaultFormat: defaults.defaultFormat,\n    scalePercentBy100: defaults.scalePercentBy100\n  };\n  /************************************\n      Constructors\n  ************************************/\n  // Numeral prototype object\n\n\n  function Numeral(input, number) {\n    this._input = input;\n    this._value = number;\n  }\n\n  _numeral = function numeral(input) {\n    var value, kind, unformatFunction, regexp;\n\n    if (_numeral.isNumeral(input)) {\n      value = input.value();\n    } else if (input === 0 || typeof input === 'undefined') {\n      value = 0;\n    } else if (input === null || _.isNaN(input)) {\n      value = null;\n    } else if (typeof input === 'string') {\n      if (options.zeroFormat && input === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        for (kind in formats) {\n          regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n          if (regexp && input.match(regexp)) {\n            unformatFunction = formats[kind].unformat;\n            break;\n          }\n        }\n\n        unformatFunction = unformatFunction || _numeral._.stringToNumber;\n        value = unformatFunction(input);\n      }\n    } else {\n      value = Number(input) || null;\n    }\n\n    return new Numeral(input, value);\n  }; // version number\n\n\n  _numeral.version = VERSION; // compare numeral object\n\n  _numeral.isNumeral = function (obj) {\n    return obj instanceof Numeral;\n  }; // helper functions\n\n\n  _numeral._ = _ = {\n    // formats numbers separators, decimals places, signs, abbreviations\n    numberToFormat: function numberToFormat(value, format, roundingFunction) {\n      var locale = locales[_numeral.options.currentLocale],\n          negP = false,\n          optDec = false,\n          leadingCount = 0,\n          abbr = '',\n          trillion = 1000000000000,\n          billion = 1000000000,\n          million = 1000000,\n          thousand = 1000,\n          decimal = '',\n          neg = false,\n          abbrForce,\n          // force abbreviation\n      abs,\n          min,\n          max,\n          power,\n          int,\n          precision,\n          signed,\n          thousands,\n          output; // make sure we never format a null value\n\n      value = value || 0;\n      abs = Math.abs(value); // see if we should use parentheses for negative number or if we should prefix with a sign\n      // if both are present we default to parentheses\n\n      if (_numeral._.includes(format, '(')) {\n        negP = true;\n        format = format.replace(/[\\(|\\)]/g, '');\n      } else if (_numeral._.includes(format, '+') || _numeral._.includes(format, '-')) {\n        signed = _numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n        format = format.replace(/[\\+|\\-]/g, '');\n      } // see if abbreviation is wanted\n\n\n      if (_numeral._.includes(format, 'a')) {\n        abbrForce = format.match(/a(k|m|b|t)?/);\n        abbrForce = abbrForce ? abbrForce[1] : false; // check for space before abbreviation\n\n        if (_numeral._.includes(format, ' a')) {\n          abbr = ' ';\n        }\n\n        format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n        if (abs >= trillion && !abbrForce || abbrForce === 't') {\n          // trillion\n          abbr += locale.abbreviations.trillion;\n          value = value / trillion;\n        } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n          // billion\n          abbr += locale.abbreviations.billion;\n          value = value / billion;\n        } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n          // million\n          abbr += locale.abbreviations.million;\n          value = value / million;\n        } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n          // thousand\n          abbr += locale.abbreviations.thousand;\n          value = value / thousand;\n        }\n      } // check for optional decimals\n\n\n      if (_numeral._.includes(format, '[.]')) {\n        optDec = true;\n        format = format.replace('[.]', '.');\n      } // break number and format\n\n\n      int = value.toString().split('.')[0];\n      precision = format.split('.')[1];\n      thousands = format.indexOf(',');\n      leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n      if (precision) {\n        if (_numeral._.includes(precision, '[')) {\n          precision = precision.replace(']', '');\n          precision = precision.split('[');\n          decimal = _numeral._.toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n        } else {\n          decimal = _numeral._.toFixed(value, precision.length, roundingFunction);\n        }\n\n        int = decimal.split('.')[0];\n\n        if (_numeral._.includes(decimal, '.')) {\n          decimal = locale.delimiters.decimal + decimal.split('.')[1];\n        } else {\n          decimal = '';\n        }\n\n        if (optDec && Number(decimal.slice(1)) === 0) {\n          decimal = '';\n        }\n      } else {\n        int = _numeral._.toFixed(value, 0, roundingFunction);\n      } // check abbreviation again after rounding\n\n\n      if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n        int = String(Number(int) / 1000);\n\n        switch (abbr) {\n          case locale.abbreviations.thousand:\n            abbr = locale.abbreviations.million;\n            break;\n\n          case locale.abbreviations.million:\n            abbr = locale.abbreviations.billion;\n            break;\n\n          case locale.abbreviations.billion:\n            abbr = locale.abbreviations.trillion;\n            break;\n        }\n      } // format number\n\n\n      if (_numeral._.includes(int, '-')) {\n        int = int.slice(1);\n        neg = true;\n      }\n\n      if (int.length < leadingCount) {\n        for (var i = leadingCount - int.length; i > 0; i--) {\n          int = '0' + int;\n        }\n      }\n\n      if (thousands > -1) {\n        int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n      }\n\n      if (format.indexOf('.') === 0) {\n        int = '';\n      }\n\n      output = int + decimal + (abbr ? abbr : '');\n\n      if (negP) {\n        output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n      } else {\n        if (signed >= 0) {\n          output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n        } else if (neg) {\n          output = '-' + output;\n        }\n      }\n\n      return output;\n    },\n    // unformats numbers separators, decimals places, signs, abbreviations\n    stringToNumber: function stringToNumber(string) {\n      var locale = locales[options.currentLocale],\n          stringOriginal = string,\n          abbreviations = {\n        thousand: 3,\n        million: 6,\n        billion: 9,\n        trillion: 12\n      },\n          abbreviation,\n          value,\n          i,\n          regexp;\n\n      if (options.zeroFormat && string === options.zeroFormat) {\n        value = 0;\n      } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n        value = null;\n      } else {\n        value = 1;\n\n        if (locale.delimiters.decimal !== '.') {\n          string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n        }\n\n        for (abbreviation in abbreviations) {\n          regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n          if (stringOriginal.match(regexp)) {\n            value *= Math.pow(10, abbreviations[abbreviation]);\n            break;\n          }\n        } // check for negative number\n\n\n        value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1; // remove non numbers\n\n        string = string.replace(/[^0-9\\.]+/g, '');\n        value *= Number(string);\n      }\n\n      return value;\n    },\n    isNaN: function (_isNaN) {\n      function isNaN(_x) {\n        return _isNaN.apply(this, arguments);\n      }\n\n      isNaN.toString = function () {\n        return _isNaN.toString();\n      };\n\n      return isNaN;\n    }(function (value) {\n      return typeof value === 'number' && isNaN(value);\n    }),\n    includes: function includes(string, search) {\n      return string.indexOf(search) !== -1;\n    },\n    insert: function insert(string, subString, start) {\n      return string.slice(0, start) + subString + string.slice(start);\n    },\n    reduce: function reduce(array, callback\n    /*, initialValue*/\n    ) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.reduce called on null or undefined');\n      }\n\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n\n      var t = Object(array),\n          len = t.length >>> 0,\n          k = 0,\n          value;\n\n      if (arguments.length === 3) {\n        value = arguments[2];\n      } else {\n        while (k < len && !(k in t)) {\n          k++;\n        }\n\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n\n        value = t[k++];\n      }\n\n      for (; k < len; k++) {\n        if (k in t) {\n          value = callback(value, t[k], k, t);\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    multiplier: function multiplier(x) {\n      var parts = x.toString().split('.');\n      return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n    },\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    correctionFactor: function correctionFactor() {\n      var args = Array.prototype.slice.call(arguments);\n      return args.reduce(function (accum, next) {\n        var mn = _.multiplier(next);\n\n        return accum > mn ? accum : mn;\n      }, 1);\n    },\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    toFixed: function toFixed(value, maxDecimals, roundingFunction, optionals) {\n      var splitValue = value.toString().split('.'),\n          minDecimals = maxDecimals - (optionals || 0),\n          boundedPrecision,\n          optionalsRegExp,\n          power,\n          output; // Use the smallest precision value possible to avoid errors from floating point representation\n\n      if (splitValue.length === 2) {\n        boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n      } else {\n        boundedPrecision = minDecimals;\n      }\n\n      power = Math.pow(10, boundedPrecision); // Multiply up by precision, round accurately, then divide and use native toFixed():\n\n      output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n      if (optionals > maxDecimals - boundedPrecision) {\n        optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n        output = output.replace(optionalsRegExp, '');\n      }\n\n      return output;\n    }\n  }; // avaliable options\n\n  _numeral.options = options; // avaliable formats\n\n  _numeral.formats = formats; // avaliable formats\n\n  _numeral.locales = locales; // This function sets the current locale.  If\n  // no arguments are passed in, it will simply return the current global\n  // locale key.\n\n  _numeral.locale = function (key) {\n    if (key) {\n      options.currentLocale = key.toLowerCase();\n    }\n\n    return options.currentLocale;\n  }; // This function provides access to the loaded locale data.  If\n  // no arguments are passed in, it will simply return the current\n  // global locale object.\n\n\n  _numeral.localeData = function (key) {\n    if (!key) {\n      return locales[options.currentLocale];\n    }\n\n    key = key.toLowerCase();\n\n    if (!locales[key]) {\n      throw new Error('Unknown locale : ' + key);\n    }\n\n    return locales[key];\n  };\n\n  _numeral.reset = function () {\n    for (var property in defaults) {\n      options[property] = defaults[property];\n    }\n  };\n\n  _numeral.zeroFormat = function (format) {\n    options.zeroFormat = typeof format === 'string' ? format : null;\n  };\n\n  _numeral.nullFormat = function (format) {\n    options.nullFormat = typeof format === 'string' ? format : null;\n  };\n\n  _numeral.defaultFormat = function (format) {\n    options.defaultFormat = typeof format === 'string' ? format : '0.0';\n  };\n\n  _numeral.register = function (type, name, format) {\n    name = name.toLowerCase();\n\n    if (this[type + 's'][name]) {\n      throw new TypeError(name + ' ' + type + ' already registered.');\n    }\n\n    this[type + 's'][name] = format;\n    return format;\n  };\n\n  _numeral.validate = function (val, culture) {\n    var _decimalSep, _thousandSep, _currSymbol, _valArray, _abbrObj, _thousandRegEx, localeData, temp; //coerce val to string\n\n\n    if (typeof val !== 'string') {\n      val += '';\n\n      if (console.warn) {\n        console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n      }\n    } //trim whitespaces from either sides\n\n\n    val = val.trim(); //if val is just digits return true\n\n    if (!!val.match(/^\\d+$/)) {\n      return true;\n    } //if val is empty return false\n\n\n    if (val === '') {\n      return false;\n    } //get the decimal and thousands separator from numeral.localeData\n\n\n    try {\n      //check if the culture is understood by numeral. if not, default it to current locale\n      localeData = _numeral.localeData(culture);\n    } catch (e) {\n      localeData = _numeral.localeData(_numeral.locale());\n    } //setup the delimiters and currency symbol based on culture/locale\n\n\n    _currSymbol = localeData.currency.symbol;\n    _abbrObj = localeData.abbreviations;\n    _decimalSep = localeData.delimiters.decimal;\n\n    if (localeData.delimiters.thousands === '.') {\n      _thousandSep = '\\\\.';\n    } else {\n      _thousandSep = localeData.delimiters.thousands;\n    } // validating currency symbol\n\n\n    temp = val.match(/^[^\\d]+/);\n\n    if (temp !== null) {\n      val = val.substr(1);\n\n      if (temp[0] !== _currSymbol) {\n        return false;\n      }\n    } //validating abbreviation symbol\n\n\n    temp = val.match(/[^\\d]+$/);\n\n    if (temp !== null) {\n      val = val.slice(0, -1);\n\n      if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n        return false;\n      }\n    }\n\n    _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n    if (!val.match(/[^\\d.,]/g)) {\n      _valArray = val.split(_decimalSep);\n\n      if (_valArray.length > 2) {\n        return false;\n      } else {\n        if (_valArray.length < 2) {\n          return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx);\n        } else {\n          if (_valArray[0].length === 1) {\n            return !!_valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          } else {\n            return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /************************************\n      Numeral Prototype\n  ************************************/\n\n\n  _numeral.fn = Numeral.prototype = {\n    clone: function clone() {\n      return _numeral(this);\n    },\n    format: function format(inputString, roundingFunction) {\n      var value = this._value,\n          format = inputString || options.defaultFormat,\n          kind,\n          output,\n          formatFunction; // make sure we have a roundingFunction\n\n      roundingFunction = roundingFunction || Math.round; // format based on value\n\n      if (value === 0 && options.zeroFormat !== null) {\n        output = options.zeroFormat;\n      } else if (value === null && options.nullFormat !== null) {\n        output = options.nullFormat;\n      } else {\n        for (kind in formats) {\n          if (format.match(formats[kind].regexps.format)) {\n            formatFunction = formats[kind].format;\n            break;\n          }\n        }\n\n        formatFunction = formatFunction || _numeral._.numberToFormat;\n        output = formatFunction(value, format, roundingFunction);\n      }\n\n      return output;\n    },\n    value: function value() {\n      return this._value;\n    },\n    input: function input() {\n      return this._input;\n    },\n    set: function set(value) {\n      this._value = Number(value);\n      return this;\n    },\n    add: function add(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum + Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n      return this;\n    },\n    subtract: function subtract(value) {\n      var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum - Math.round(corrFactor * curr);\n      }\n\n      this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n      return this;\n    },\n    multiply: function multiply(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback, 1);\n      return this;\n    },\n    divide: function divide(value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = _.correctionFactor(accum, curr);\n\n        return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n      }\n\n      this._value = _.reduce([this._value, value], cback);\n      return this;\n    },\n    difference: function difference(value) {\n      return Math.abs(_numeral(this._value).subtract(value).value());\n    }\n  };\n  /************************************\n      Default Locale && Format\n  ************************************/\n\n  _numeral.register('locale', 'en', {\n    delimiters: {\n      thousands: ',',\n      decimal: '.'\n    },\n    abbreviations: {\n      thousand: 'k',\n      million: 'm',\n      billion: 'b',\n      trillion: 't'\n    },\n    ordinal: function ordinal(number) {\n      var b = number % 10;\n      return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n    },\n    currency: {\n      symbol: '$'\n    }\n  });\n\n  (function () {\n    _numeral.register('format', 'bps', {\n      regexps: {\n        format: /(BPS)/,\n        unformat: /(BPS)/\n      },\n      format: function format(value, _format, roundingFunction) {\n        var space = _numeral._.includes(_format, ' BPS') ? ' ' : '',\n            output;\n        value = value * 10000; // check for space before BPS\n\n        _format = _format.replace(/\\s?BPS/, '');\n        output = _numeral._.numberToFormat(value, _format, roundingFunction);\n\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + 'BPS');\n          output = output.join('');\n        } else {\n          output = output + space + 'BPS';\n        }\n\n        return output;\n      },\n      unformat: function unformat(string) {\n        return +(_numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n      }\n    });\n  })();\n\n  (function () {\n    var decimal = {\n      base: 1000,\n      suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    },\n        binary = {\n      base: 1024,\n      suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n    };\n    var allSuffixes = decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n      return decimal.suffixes.indexOf(item) < 0;\n    }));\n    var unformatRegex = allSuffixes.join('|'); // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n\n    unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    _numeral.register('format', 'bytes', {\n      regexps: {\n        format: /([0\\s]i?b)/,\n        unformat: new RegExp(unformatRegex)\n      },\n      format: function format(value, _format2, roundingFunction) {\n        var output,\n            bytes = _numeral._.includes(_format2, 'ib') ? binary : decimal,\n            suffix = _numeral._.includes(_format2, ' b') || _numeral._.includes(_format2, ' ib') ? ' ' : '',\n            power,\n            min,\n            max; // check for space before\n\n        _format2 = _format2.replace(/\\s?i?b/, '');\n\n        for (power = 0; power <= bytes.suffixes.length; power++) {\n          min = Math.pow(bytes.base, power);\n          max = Math.pow(bytes.base, power + 1);\n\n          if (value === null || value === 0 || value >= min && value < max) {\n            suffix += bytes.suffixes[power];\n\n            if (min > 0) {\n              value = value / min;\n            }\n\n            break;\n          }\n        }\n\n        output = _numeral._.numberToFormat(value, _format2, roundingFunction);\n        return output + suffix;\n      },\n      unformat: function unformat(string) {\n        var value = _numeral._.stringToNumber(string),\n            power,\n            bytesMultiplier;\n\n        if (value) {\n          for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n            if (_numeral._.includes(string, decimal.suffixes[power])) {\n              bytesMultiplier = Math.pow(decimal.base, power);\n              break;\n            }\n\n            if (_numeral._.includes(string, binary.suffixes[power])) {\n              bytesMultiplier = Math.pow(binary.base, power);\n              break;\n            }\n          }\n\n          value *= bytesMultiplier || 1;\n        }\n\n        return value;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'currency', {\n      regexps: {\n        format: /(\\$)/\n      },\n      format: function format(value, _format3, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n            symbols = {\n          before: _format3.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n          after: _format3.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n        },\n            output,\n            symbol,\n            i; // strip format of spaces and $\n\n        _format3 = _format3.replace(/\\s?\\$\\s?/, ''); // format the number\n\n        output = _numeral._.numberToFormat(value, _format3, roundingFunction); // update the before and after based on value\n\n        if (value >= 0) {\n          symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n          symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n        } else if (value < 0 && !_numeral._.includes(symbols.before, '-') && !_numeral._.includes(symbols.before, '(')) {\n          symbols.before = '-' + symbols.before;\n        } // loop through each before symbol\n\n\n        for (i = 0; i < symbols.before.length; i++) {\n          symbol = symbols.before[i];\n\n          switch (symbol) {\n            case '$':\n              output = _numeral._.insert(output, locale.currency.symbol, i);\n              break;\n\n            case ' ':\n              output = _numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n              break;\n          }\n        } // loop through each after symbol\n\n\n        for (i = symbols.after.length - 1; i >= 0; i--) {\n          symbol = symbols.after[i];\n\n          switch (symbol) {\n            case '$':\n              output = i === symbols.after.length - 1 ? output + locale.currency.symbol : _numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n              break;\n\n            case ' ':\n              output = i === symbols.after.length - 1 ? output + ' ' : _numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n              break;\n          }\n        }\n\n        return output;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'exponential', {\n      regexps: {\n        format: /(e\\+|e-)/,\n        unformat: /(e\\+|e-)/\n      },\n      format: function format(value, _format4, roundingFunction) {\n        var output,\n            exponential = typeof value === 'number' && !_numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n            parts = exponential.split('e');\n        _format4 = _format4.replace(/e[\\+|\\-]{1}0/, '');\n        output = _numeral._.numberToFormat(Number(parts[0]), _format4, roundingFunction);\n        return output + 'e' + parts[1];\n      },\n      unformat: function unformat(string) {\n        var parts = _numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n            value = Number(parts[0]),\n            power = Number(parts[1]);\n        power = _numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n        function cback(accum, curr, currI, O) {\n          var corrFactor = _numeral._.correctionFactor(accum, curr),\n              num = accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);\n\n          return num;\n        }\n\n        return _numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'ordinal', {\n      regexps: {\n        format: /(o)/\n      },\n      format: function format(value, _format5, roundingFunction) {\n        var locale = _numeral.locales[_numeral.options.currentLocale],\n            output,\n            ordinal = _numeral._.includes(_format5, ' o') ? ' ' : ''; // check for space before\n\n        _format5 = _format5.replace(/\\s?o/, '');\n        ordinal += locale.ordinal(value);\n        output = _numeral._.numberToFormat(value, _format5, roundingFunction);\n        return output + ordinal;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'percentage', {\n      regexps: {\n        format: /(%)/,\n        unformat: /(%)/\n      },\n      format: function format(value, _format6, roundingFunction) {\n        var space = _numeral._.includes(_format6, ' %') ? ' ' : '',\n            output;\n\n        if (_numeral.options.scalePercentBy100) {\n          value = value * 100;\n        } // check for space before %\n\n\n        _format6 = _format6.replace(/\\s?\\%/, '');\n        output = _numeral._.numberToFormat(value, _format6, roundingFunction);\n\n        if (_numeral._.includes(output, ')')) {\n          output = output.split('');\n          output.splice(-1, 0, space + '%');\n          output = output.join('');\n        } else {\n          output = output + space + '%';\n        }\n\n        return output;\n      },\n      unformat: function unformat(string) {\n        var number = _numeral._.stringToNumber(string);\n\n        if (_numeral.options.scalePercentBy100) {\n          return number * 0.01;\n        }\n\n        return number;\n      }\n    });\n  })();\n\n  (function () {\n    _numeral.register('format', 'time', {\n      regexps: {\n        format: /(:)/,\n        unformat: /(:)/\n      },\n      format: function format(value, _format7, roundingFunction) {\n        var hours = Math.floor(value / 60 / 60),\n            minutes = Math.floor((value - hours * 60 * 60) / 60),\n            seconds = Math.round(value - hours * 60 * 60 - minutes * 60);\n        return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n      },\n      unformat: function unformat(string) {\n        var timeArray = string.split(':'),\n            seconds = 0; // turn hours and minutes into seconds and add them all up\n\n        if (timeArray.length === 3) {\n          // hours\n          seconds = seconds + Number(timeArray[0]) * 60 * 60; // minutes\n\n          seconds = seconds + Number(timeArray[1]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n          // minutes\n          seconds = seconds + Number(timeArray[0]) * 60; // seconds\n\n          seconds = seconds + Number(timeArray[1]);\n        }\n\n        return Number(seconds);\n      }\n    });\n  })();\n\n  return _numeral;\n});","(function (global) {\n  'use strict';\n\n  var util = newUtil();\n  var inliner = newInliner();\n  var fontFaces = newFontFaces();\n  var images = newImages(); // Default impl options\n\n  var defaultOptions = {\n    // Default is to fail on error, no placeholder\n    imagePlaceholder: undefined,\n    // Default cache bust is false, it will use the cache\n    cacheBust: false\n  };\n  var domtoimage = {\n    toSvg: toSvg,\n    toPng: toPng,\n    toJpeg: toJpeg,\n    toBlob: toBlob,\n    toPixelData: toPixelData,\n    impl: {\n      fontFaces: fontFaces,\n      images: images,\n      util: util,\n      inliner: inliner,\n      options: {}\n    }\n  };\n  if (typeof module !== 'undefined') module.exports = domtoimage;else global.domtoimage = domtoimage;\n  /**\n   * @param {Node} node - The DOM Node object to render\n   * @param {Object} options - Rendering options\n   * @param {Function} options.filter - Should return true if passed node should be included in the output\n   *          (excluding node means excluding it's children as well). Not called on the root node.\n   * @param {String} options.bgcolor - color for the background, any valid CSS color value.\n   * @param {Number} options.width - width to be applied to node before rendering.\n   * @param {Number} options.height - height to be applied to node before rendering.\n   * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.\n   * @param {Number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),\n              defaults to 1.0.\n   * @param {String} options.imagePlaceholder - dataURL to use as a placeholder for failed images, default behaviour is to fail fast on images we can't fetch\n   * @param {Boolean} options.cacheBust - set to true to cache bust by appending the time to the request url\n   * @return {Promise} - A promise that is fulfilled with a SVG image data URL\n   * */\n\n  function toSvg(node, options) {\n    options = options || {};\n    copyOptions(options);\n    return Promise.resolve(node).then(function (node) {\n      return cloneNode(node, options.filter, true);\n    }).then(embedFonts).then(inlineImages).then(applyOptions).then(function (clone) {\n      return makeSvgDataUri(clone, options.width || util.width(node), options.height || util.height(node));\n    });\n\n    function applyOptions(clone) {\n      if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;\n      if (options.width) clone.style.width = options.width + 'px';\n      if (options.height) clone.style.height = options.height + 'px';\n      if (options.style) Object.keys(options.style).forEach(function (property) {\n        clone.style[property] = options.style[property];\n      });\n      return clone;\n    }\n  }\n  /**\n   * @param {Node} node - The DOM Node object to render\n   * @param {Object} options - Rendering options, @see {@link toSvg}\n   * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.\n   * */\n\n\n  function toPixelData(node, options) {\n    return draw(node, options || {}).then(function (canvas) {\n      return canvas.getContext('2d').getImageData(0, 0, util.width(node), util.height(node)).data;\n    });\n  }\n  /**\n   * @param {Node} node - The DOM Node object to render\n   * @param {Object} options - Rendering options, @see {@link toSvg}\n   * @return {Promise} - A promise that is fulfilled with a PNG image data URL\n   * */\n\n\n  function toPng(node, options) {\n    return draw(node, options || {}).then(function (canvas) {\n      return canvas.toDataURL();\n    });\n  }\n  /**\n   * @param {Node} node - The DOM Node object to render\n   * @param {Object} options - Rendering options, @see {@link toSvg}\n   * @return {Promise} - A promise that is fulfilled with a JPEG image data URL\n   * */\n\n\n  function toJpeg(node, options) {\n    options = options || {};\n    return draw(node, options).then(function (canvas) {\n      return canvas.toDataURL('image/jpeg', options.quality || 1.0);\n    });\n  }\n  /**\n   * @param {Node} node - The DOM Node object to render\n   * @param {Object} options - Rendering options, @see {@link toSvg}\n   * @return {Promise} - A promise that is fulfilled with a PNG image blob\n   * */\n\n\n  function toBlob(node, options) {\n    return draw(node, options || {}).then(util.canvasToBlob);\n  }\n\n  function copyOptions(options) {\n    // Copy options to impl options for use in impl\n    if (typeof options.imagePlaceholder === 'undefined') {\n      domtoimage.impl.options.imagePlaceholder = defaultOptions.imagePlaceholder;\n    } else {\n      domtoimage.impl.options.imagePlaceholder = options.imagePlaceholder;\n    }\n\n    if (typeof options.cacheBust === 'undefined') {\n      domtoimage.impl.options.cacheBust = defaultOptions.cacheBust;\n    } else {\n      domtoimage.impl.options.cacheBust = options.cacheBust;\n    }\n  }\n\n  function draw(domNode, options) {\n    return toSvg(domNode, options).then(util.makeImage).then(util.delay(100)).then(function (image) {\n      var canvas = newCanvas(domNode);\n      canvas.getContext('2d').drawImage(image, 0, 0);\n      return canvas;\n    });\n\n    function newCanvas(domNode) {\n      var canvas = document.createElement('canvas');\n      canvas.width = options.width || util.width(domNode);\n      canvas.height = options.height || util.height(domNode);\n\n      if (options.bgcolor) {\n        var ctx = canvas.getContext('2d');\n        ctx.fillStyle = options.bgcolor;\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n\n      return canvas;\n    }\n  }\n\n  function cloneNode(node, filter, root) {\n    if (!root && filter && !filter(node)) return Promise.resolve();\n    return Promise.resolve(node).then(makeNodeCopy).then(function (clone) {\n      return cloneChildren(node, clone, filter);\n    }).then(function (clone) {\n      return processClone(node, clone);\n    });\n\n    function makeNodeCopy(node) {\n      if (node instanceof HTMLCanvasElement) return util.makeImage(node.toDataURL());\n      return node.cloneNode(false);\n    }\n\n    function cloneChildren(original, clone, filter) {\n      var children = original.childNodes;\n      if (children.length === 0) return Promise.resolve(clone);\n      return cloneChildrenInOrder(clone, util.asArray(children), filter).then(function () {\n        return clone;\n      });\n\n      function cloneChildrenInOrder(parent, children, filter) {\n        var done = Promise.resolve();\n        children.forEach(function (child) {\n          done = done.then(function () {\n            return cloneNode(child, filter);\n          }).then(function (childClone) {\n            if (childClone) parent.appendChild(childClone);\n          });\n        });\n        return done;\n      }\n    }\n\n    function processClone(original, clone) {\n      if (!(clone instanceof Element)) return clone;\n      return Promise.resolve().then(cloneStyle).then(clonePseudoElements).then(copyUserInput).then(fixSvg).then(function () {\n        return clone;\n      });\n\n      function cloneStyle() {\n        copyStyle(window.getComputedStyle(original), clone.style);\n\n        function copyStyle(source, target) {\n          if (source.cssText) target.cssText = source.cssText;else copyProperties(source, target);\n\n          function copyProperties(source, target) {\n            util.asArray(source).forEach(function (name) {\n              target.setProperty(name, source.getPropertyValue(name), source.getPropertyPriority(name));\n            });\n          }\n        }\n      }\n\n      function clonePseudoElements() {\n        [':before', ':after'].forEach(function (element) {\n          clonePseudoElement(element);\n        });\n\n        function clonePseudoElement(element) {\n          var style = window.getComputedStyle(original, element);\n          var content = style.getPropertyValue('content');\n          if (content === '' || content === 'none') return;\n          var className = util.uid();\n          clone.className = clone.className + ' ' + className;\n          var styleElement = document.createElement('style');\n          styleElement.appendChild(formatPseudoElementStyle(className, element, style));\n          clone.appendChild(styleElement);\n\n          function formatPseudoElementStyle(className, element, style) {\n            var selector = '.' + className + ':' + element;\n            var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);\n            return document.createTextNode(selector + '{' + cssText + '}');\n\n            function formatCssText(style) {\n              var content = style.getPropertyValue('content');\n              return style.cssText + ' content: ' + content + ';';\n            }\n\n            function formatCssProperties(style) {\n              return util.asArray(style).map(formatProperty).join('; ') + ';';\n\n              function formatProperty(name) {\n                return name + ': ' + style.getPropertyValue(name) + (style.getPropertyPriority(name) ? ' !important' : '');\n              }\n            }\n          }\n        }\n      }\n\n      function copyUserInput() {\n        if (original instanceof HTMLTextAreaElement) clone.innerHTML = original.value;\n        if (original instanceof HTMLInputElement) clone.setAttribute(\"value\", original.value);\n      }\n\n      function fixSvg() {\n        if (!(clone instanceof SVGElement)) return;\n        clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        if (!(clone instanceof SVGRectElement)) return;\n        ['width', 'height'].forEach(function (attribute) {\n          var value = clone.getAttribute(attribute);\n          if (!value) return;\n          clone.style.setProperty(attribute, value);\n        });\n      }\n    }\n  }\n\n  function embedFonts(node) {\n    return fontFaces.resolveAll().then(function (cssText) {\n      var styleNode = document.createElement('style');\n      node.appendChild(styleNode);\n      styleNode.appendChild(document.createTextNode(cssText));\n      return node;\n    });\n  }\n\n  function inlineImages(node) {\n    return images.inlineAll(node).then(function () {\n      return node;\n    });\n  }\n\n  function makeSvgDataUri(node, width, height) {\n    return Promise.resolve(node).then(function (node) {\n      node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n      return new XMLSerializer().serializeToString(node);\n    }).then(util.escapeXhtml).then(function (xhtml) {\n      return '<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">' + xhtml + '</foreignObject>';\n    }).then(function (foreignObject) {\n      return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + width + '\" height=\"' + height + '\">' + foreignObject + '</svg>';\n    }).then(function (svg) {\n      return 'data:image/svg+xml;charset=utf-8,' + svg;\n    });\n  }\n\n  function newUtil() {\n    return {\n      escape: escape,\n      parseExtension: parseExtension,\n      mimeType: mimeType,\n      dataAsUrl: dataAsUrl,\n      isDataUrl: isDataUrl,\n      canvasToBlob: canvasToBlob,\n      resolveUrl: resolveUrl,\n      getAndEncode: getAndEncode,\n      uid: uid(),\n      delay: delay,\n      asArray: asArray,\n      escapeXhtml: escapeXhtml,\n      makeImage: makeImage,\n      width: width,\n      height: height\n    };\n\n    function mimes() {\n      /*\n       * Only WOFF and EOT mime types for fonts are 'real'\n       * see http://www.iana.org/assignments/media-types/media-types.xhtml\n       */\n      var WOFF = 'application/font-woff';\n      var JPEG = 'image/jpeg';\n      return {\n        'woff': WOFF,\n        'woff2': WOFF,\n        'ttf': 'application/font-truetype',\n        'eot': 'application/vnd.ms-fontobject',\n        'png': 'image/png',\n        'jpg': JPEG,\n        'jpeg': JPEG,\n        'gif': 'image/gif',\n        'tiff': 'image/tiff',\n        'svg': 'image/svg+xml'\n      };\n    }\n\n    function parseExtension(url) {\n      var match = /\\.([^\\.\\/]*?)$/g.exec(url);\n      if (match) return match[1];else return '';\n    }\n\n    function mimeType(url) {\n      var extension = parseExtension(url).toLowerCase();\n      return mimes()[extension] || '';\n    }\n\n    function isDataUrl(url) {\n      return url.search(/^(data:)/) !== -1;\n    }\n\n    function toBlob(canvas) {\n      return new Promise(function (resolve) {\n        var binaryString = window.atob(canvas.toDataURL().split(',')[1]);\n        var length = binaryString.length;\n        var binaryArray = new Uint8Array(length);\n\n        for (var i = 0; i < length; i++) {\n          binaryArray[i] = binaryString.charCodeAt(i);\n        }\n\n        resolve(new Blob([binaryArray], {\n          type: 'image/png'\n        }));\n      });\n    }\n\n    function canvasToBlob(canvas) {\n      if (canvas.toBlob) return new Promise(function (resolve) {\n        canvas.toBlob(resolve);\n      });\n      return toBlob(canvas);\n    }\n\n    function resolveUrl(url, baseUrl) {\n      var doc = document.implementation.createHTMLDocument();\n      var base = doc.createElement('base');\n      doc.head.appendChild(base);\n      var a = doc.createElement('a');\n      doc.body.appendChild(a);\n      base.href = baseUrl;\n      a.href = url;\n      return a.href;\n    }\n\n    function uid() {\n      var index = 0;\n      return function () {\n        return 'u' + fourRandomChars() + index++;\n\n        function fourRandomChars() {\n          /* see http://stackoverflow.com/a/6248722/2519373 */\n          return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n        }\n      };\n    }\n\n    function makeImage(uri) {\n      return new Promise(function (resolve, reject) {\n        var image = new Image();\n\n        image.onload = function () {\n          resolve(image);\n        };\n\n        image.onerror = reject;\n        image.src = uri;\n      });\n    }\n\n    function getAndEncode(url) {\n      var TIMEOUT = 30000;\n\n      if (domtoimage.impl.options.cacheBust) {\n        // Cache bypass so we dont have CORS issues with cached images\n        // Source: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n        url += (/\\?/.test(url) ? \"&\" : \"?\") + new Date().getTime();\n      }\n\n      return new Promise(function (resolve) {\n        var request = new XMLHttpRequest();\n        request.onreadystatechange = done;\n        request.ontimeout = timeout;\n        request.responseType = 'blob';\n        request.timeout = TIMEOUT;\n        request.open('GET', url, true);\n        request.send();\n        var placeholder;\n\n        if (domtoimage.impl.options.imagePlaceholder) {\n          var split = domtoimage.impl.options.imagePlaceholder.split(/,/);\n\n          if (split && split[1]) {\n            placeholder = split[1];\n          }\n        }\n\n        function done() {\n          if (request.readyState !== 4) return;\n\n          if (request.status !== 200) {\n            if (placeholder) {\n              resolve(placeholder);\n            } else {\n              fail('cannot fetch resource: ' + url + ', status: ' + request.status);\n            }\n\n            return;\n          }\n\n          var encoder = new FileReader();\n\n          encoder.onloadend = function () {\n            var content = encoder.result.split(/,/)[1];\n            resolve(content);\n          };\n\n          encoder.readAsDataURL(request.response);\n        }\n\n        function timeout() {\n          if (placeholder) {\n            resolve(placeholder);\n          } else {\n            fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url);\n          }\n        }\n\n        function fail(message) {\n          console.error(message);\n          resolve('');\n        }\n      });\n    }\n\n    function dataAsUrl(content, type) {\n      return 'data:' + type + ';base64,' + content;\n    }\n\n    function escape(string) {\n      return string.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n    }\n\n    function delay(ms) {\n      return function (arg) {\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            resolve(arg);\n          }, ms);\n        });\n      };\n    }\n\n    function asArray(arrayLike) {\n      var array = [];\n      var length = arrayLike.length;\n\n      for (var i = 0; i < length; i++) {\n        array.push(arrayLike[i]);\n      }\n\n      return array;\n    }\n\n    function escapeXhtml(string) {\n      return string.replace(/#/g, '%23').replace(/\\n/g, '%0A');\n    }\n\n    function width(node) {\n      var leftBorder = px(node, 'border-left-width');\n      var rightBorder = px(node, 'border-right-width');\n      return node.scrollWidth + leftBorder + rightBorder;\n    }\n\n    function height(node) {\n      var topBorder = px(node, 'border-top-width');\n      var bottomBorder = px(node, 'border-bottom-width');\n      return node.scrollHeight + topBorder + bottomBorder;\n    }\n\n    function px(node, styleProperty) {\n      var value = window.getComputedStyle(node).getPropertyValue(styleProperty);\n      return parseFloat(value.replace('px', ''));\n    }\n  }\n\n  function newInliner() {\n    var URL_REGEX = /url\\(['\"]?([^'\"]+?)['\"]?\\)/g;\n    return {\n      inlineAll: inlineAll,\n      shouldProcess: shouldProcess,\n      impl: {\n        readUrls: readUrls,\n        inline: inline\n      }\n    };\n\n    function shouldProcess(string) {\n      return string.search(URL_REGEX) !== -1;\n    }\n\n    function readUrls(string) {\n      var result = [];\n      var match;\n\n      while ((match = URL_REGEX.exec(string)) !== null) {\n        result.push(match[1]);\n      }\n\n      return result.filter(function (url) {\n        return !util.isDataUrl(url);\n      });\n    }\n\n    function inline(string, url, baseUrl, get) {\n      return Promise.resolve(url).then(function (url) {\n        return baseUrl ? util.resolveUrl(url, baseUrl) : url;\n      }).then(get || util.getAndEncode).then(function (data) {\n        return util.dataAsUrl(data, util.mimeType(url));\n      }).then(function (dataUrl) {\n        return string.replace(urlAsRegex(url), '$1' + dataUrl + '$3');\n      });\n\n      function urlAsRegex(url) {\n        return new RegExp('(url\\\\([\\'\"]?)(' + util.escape(url) + ')([\\'\"]?\\\\))', 'g');\n      }\n    }\n\n    function inlineAll(string, baseUrl, get) {\n      if (nothingToInline()) return Promise.resolve(string);\n      return Promise.resolve(string).then(readUrls).then(function (urls) {\n        var done = Promise.resolve(string);\n        urls.forEach(function (url) {\n          done = done.then(function (string) {\n            return inline(string, url, baseUrl, get);\n          });\n        });\n        return done;\n      });\n\n      function nothingToInline() {\n        return !shouldProcess(string);\n      }\n    }\n  }\n\n  function newFontFaces() {\n    return {\n      resolveAll: resolveAll,\n      impl: {\n        readAll: readAll\n      }\n    };\n\n    function resolveAll() {\n      return readAll(document).then(function (webFonts) {\n        return Promise.all(webFonts.map(function (webFont) {\n          return webFont.resolve();\n        }));\n      }).then(function (cssStrings) {\n        return cssStrings.join('\\n');\n      });\n    }\n\n    function readAll() {\n      return Promise.resolve(util.asArray(document.styleSheets)).then(getCssRules).then(selectWebFontRules).then(function (rules) {\n        return rules.map(newWebFont);\n      });\n\n      function selectWebFontRules(cssRules) {\n        return cssRules.filter(function (rule) {\n          return rule.type === CSSRule.FONT_FACE_RULE;\n        }).filter(function (rule) {\n          return inliner.shouldProcess(rule.style.getPropertyValue('src'));\n        });\n      }\n\n      function getCssRules(styleSheets) {\n        var cssRules = [];\n        styleSheets.forEach(function (sheet) {\n          try {\n            util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));\n          } catch (e) {\n            console.log('Error while reading CSS rules from ' + sheet.href, e.toString());\n          }\n        });\n        return cssRules;\n      }\n\n      function newWebFont(webFontRule) {\n        return {\n          resolve: function resolve() {\n            var baseUrl = (webFontRule.parentStyleSheet || {}).href;\n            return inliner.inlineAll(webFontRule.cssText, baseUrl);\n          },\n          src: function src() {\n            return webFontRule.style.getPropertyValue('src');\n          }\n        };\n      }\n    }\n  }\n\n  function newImages() {\n    return {\n      inlineAll: inlineAll,\n      impl: {\n        newImage: newImage\n      }\n    };\n\n    function newImage(element) {\n      return {\n        inline: inline\n      };\n\n      function inline(get) {\n        if (util.isDataUrl(element.src)) return Promise.resolve();\n        return Promise.resolve(element.src).then(get || util.getAndEncode).then(function (data) {\n          return util.dataAsUrl(data, util.mimeType(element.src));\n        }).then(function (dataUrl) {\n          return new Promise(function (resolve, reject) {\n            element.onload = resolve;\n            element.onerror = reject;\n            element.src = dataUrl;\n          });\n        });\n      }\n    }\n\n    function inlineAll(node) {\n      if (!(node instanceof Element)) return Promise.resolve(node);\n      return inlineBackground(node).then(function () {\n        if (node instanceof HTMLImageElement) return newImage(node).inline();else return Promise.all(util.asArray(node.childNodes).map(function (child) {\n          return inlineAll(child);\n        }));\n      });\n\n      function inlineBackground(node) {\n        var background = node.style.getPropertyValue('background');\n        if (!background) return Promise.resolve(node);\n        return inliner.inlineAll(background).then(function (inlined) {\n          node.style.setProperty('background', inlined, node.style.getPropertyPriority('background'));\n        }).then(function () {\n          return node;\n        });\n      }\n    }\n  }\n})(this);"],"sourceRoot":""}