{"version":3,"sources":["components/Blog/posts/LearnD3/LearnD3GetData.jsx","components/_ui/Expandy/Expandy.jsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_emoji_render__WEBPACK_IMPORTED_MODULE_1__","components_ui_Aside_Aside__WEBPACK_IMPORTED_MODULE_2__","components_ui_Link_Link__WEBPACK_IMPORTED_MODULE_4__","components_ui_Icon_Icon__WEBPACK_IMPORTED_MODULE_5__","components_ui_List_List__WEBPACK_IMPORTED_MODULE_6__","components_ui_Code_Code__WEBPACK_IMPORTED_MODULE_7__","_LearnD3__WEBPACK_IMPORTED_MODULE_8__","LearnD3GetData","a","createElement","className","href","items","Fragment","style","display","width","name","size","direction","svg","text","canEval","fileName","doWrap","id","Expandy","_ref","trigger","triggerExpandText","doHideIfCollapsed","children","props","Object","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","_useState","useState","_useState2","_Users_linying_codespace_Lyzzz_s_Blog_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","isExpanded","setIsExpanded","ref","useRef","react__WEBPACK_IMPORTED_MODULE_2___default","assign","concat","onToggle","e","target","open","components_ui_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_4__","contents","components_ui_Icon_Icon__WEBPACK_IMPORTED_MODULE_3__"],"mappings":"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","file":"static/js/75.19cb2ee7.chunk.js","sourcesContent":["import React, { useState } from \"react\"\nimport { Twemoji } from \"react-emoji-render\"\n\nimport Aside from \"components/_ui/Aside/Aside\"\nimport Expandy from \"components/_ui/Expandy/Expandy\"\nimport Link from \"components/_ui/Link/Link\"\nimport Icon from \"components/_ui/Icon/Icon\"\nimport List from \"components/_ui/List/List\"\nimport Code from \"components/_ui/Code/Code\"\nimport { ReadMore } from \"./LearnD3\"\nimport bookImage from \"images/book.png\";\n\nconst LearnD3GetData = () => {\n    return (\n        <div className=\"LearnD3GetData\">\n            <p>\n                What's the first thing we need to do when visualizing data?\n            </p>\n\n            <p>\n                Get the data, of course!\n            </p>\n\n            <p>\n                There are many ways to get access to data on a web page: anywhere from hardcoding it in your Javascript file to querying a database.\n            </p>\n\n            <p>\n                One of the simplest ways is to store it in a static file and <i>fetch</i> it.\n            </p>\n\n            <p>\n                While we could use the native Javascript APIs to fetch text from a file, we would need to parse it by ourselves.\n            </p>\n\n            <h3>d3-fetch</h3>\n\n            <p>\n                <Link href=\"https://github.com/d3/d3-fetch\"><b>d3-fetch</b></Link> provides some utility methods that will fetch data from a file and parse it into a Javascript object.\n            </p>\n\n            <p>\n                <b>d3-fetch</b> is able to parse files with several different data formats:\n            </p>\n\n            <List items={[\n                <>\n                    <b style={{display: \"inline-block\", width: \"2.2em\"}}>json</b> <Link href=\"https://github.com/d3/d3-fetch#json\"><Icon name=\"arrow\" size=\"s\" direction=\"ne\" /></Link>\n                    <p>\n                        <Link href=\"https://en.wikipedia.org/wiki/JSON\">JSON</Link> (JavaScript Object Notation) is a file format that looks very much like a typical Javascript object.\n                    </p>\n                    <Code size=\"s\">\n{`{\n  \"items\": [{\n    \"date\": \"2018-10-10\",\n    \"weather\": \"cloudy\",\n  },{\n    \"date\": \"2018-10-11\",\n    \"weather\": \"sunny\",\n  }]\n}`}\n                    </Code>\n                    <p>\n                        JSON files can be easy to read, since they read kind of like normal speech (<i>weather is sunny</i>). They are also very flexible and able to represent nested data structures.\n                    </p>\n                </>,\n                <>\n                    <b style={{display: \"inline-block\", width: \"2.2em\"}}>dsv</b> <Link href=\"https://github.com/d3/d3-fetch#dsv\"><Icon name=\"arrow\" size=\"s\" direction=\"ne\" /></Link>\n                    <p>\n                        <Link href=\"\">DSV</Link> (delimiter-separated values) is a file format that mimics a classic table. The first row of text says what the columns are, and the rest of the lines are \"row\"s of data.\n                    </p>\n                    <Code size=\"s\">\n{`date, weather\n2018-10-10, cloudy\n2018-10-11, sunny`}\n                    </Code>\n\n                    <p>\n                        Each column is separated by a specific <b>delimiter</b>.\n                    </p>\n                    <p>\n                        D3 allows you to specify the <b>delimiter</b>, but also has specific methods for the two most common types:\n                    </p>\n                    <p>\n                        <b>comma-separated values</b> (<Link href=\"https://github.com/d3/d3-fetch#csv\">csv</Link>), and\n                        <br />\n                        <b>tab-separated values</b> (<Link href=\"https://github.com/d3/d3-fetch#tsv\">tsv</Link>).\n                    </p>\n\n                    <p>\n                        While dsv files might be a bit harder to read, they are much smaller than json files, since they don't repeat the column names -- just compare the two tiny examples above.\n                    </p>\n\n                    <Aside>\n                        In the past, I've needed to convert data between the two formats -- there's a great tool called <Link href=\"https://www.csvjson.com/csv2json\">CSV2JSON</Link> that might come in handy.\n                    </Aside>\n                </>,\n                <>\n                    <b style={{display: \"inline-block\", width: \"2.2em\"}}>misc</b>\n                    <p>\n                        <b>d3-fetch</b> also supports various other formats that you wouldn't store data as: <Link href=\"https://github.com/d3/d3-fetch#svg\"><b>svg</b></Link>, <Link href=\"https://github.com/d3/d3-fetch#image\"><b>image</b></Link>, <Link href=\"https://github.com/d3/d3-fetch#html\"><b>html</b></Link>, and <Link href=\"https://github.com/d3/d3-fetch#xml\"><b>xml</b></Link>\n                    </p>\n                </>,\n            ]} />\n\n            <p>\n                In <b>d3-fetch</b>, the methods are just the names of the file format, and they take one parameter: the URL of your file. When you execute one of these methods, they'll respond with a <b>Promise</b>, which will resolve with the parsed data <Twemoji svg text=\":raised_hands:\" />\n            </p>\n\n            <Aside>\n                If you're unfamiliar with <b>Promises</b>, check out this great video explanation from <Link href=\"https://www.youtube.com/watch?v=QO4NXhWo_NM\">The Coding Train</Link> or the <Link href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\">MDN docs</Link>.\n            </Aside>\n\n            <p>\n                For example, to grab the current weather in Oslo, Norway, we can query the <Link href=\"https://www.metaweather.com/api/\">MetaWeather API</Link> and grab the temperature from the parsed response.\n            </p>\n\n            <Aside>\n                Feel free to copy and run this example in your browser's <b>Dev Tools Console tab</b>, or run it by hitting <Icon name=\"play\" size=\"s\" />.\n            </Aside>\n\n                {/* {`const url = \"https://cors-anywhere.herokuapp.com/https://date.nager.at/Api/v2/NextPublicHolidaysWorldwide\" */}\n            <Code canEval fileName={<>In your browser’s Dev Tools <b>Console</b> tab</>} doWrap={false}>\n{`const url = \"https://cors-anywhere.herokuapp.com/https://www.metaweather.com/api/location/862592/\"\nd3.json(url)\n  .then(res => {\n    alert(\\`Current temperature: \\${\n      res.consolidated_weather[0].the_temp\n    }°C\\`)\n  })\n  .catch(() => {\n      alert(\"Oh no, something horrible happened!\")\n  })`}\n            </Code>\n\n            <p>\n                <b>d3-fetch</b> is a really small library - really only 8 files with about 8 lines of code, each. The real heavy-lifting actually happens in another module:\n            </p>\n\n            <ReadMore id=\"fetch\" />\n\n            <h3>d3-dsv</h3>\n\n            <p>\n              One of the nice things about the <b>d3</b> API is that it's <i>very</i> modular. This allows us to often use its internal logic if we want to.\n            </p>\n\n            <p>\n              <Link href=\"https://github.com/d3/d3-dsv\"><b>d3-dsv</b></Link> has many methods for converting between Javascript objects and <b>dsv</b> format. It also has some command-line utilities for converting between <b>JSON</b>, <b>dsv</b>, and <b>dsv with different delimiters</b>.\n            </p>\n\n            <ReadMore id=\"dsv\" />\n\n        </div>\n    )\n}\n\nexport default LearnD3GetData\n\n\nconst P = ({ children })=> (\n    <code className=\"P\">{ children }</code>\n)\n","import React, { useState, useRef } from 'react'\nimport Icon from \"components/_ui/Icon/Icon\";\nimport Tooltip from \"components/_ui/Tooltip/Tooltip\";\nimport { scrollTo } from \"utils.js\"\n\nimport './Expandy.scss';\n\nconst Expandy = ({ trigger, triggerExpandText, doHideIfCollapsed=false, className, children, ...props }) => {\n    const [isExpanded, setIsExpanded] = useState(false)\n    const ref = useRef()\n\n    // const onToggleExpanded = () => {\n    //     setIsExpanded(!isExpanded)\n\n    //     if (isExpanded) {\n    //         const top = ref.current.getBoundingClientRect().top\n    //         if (top > window.innerHeight * 0.3) return\n    //         const y = top\n    //             + window.scrollY\n    //             - window.innerHeight * 0.3\n    //         scrollTo(y, 600)\n    //     }\n    // }\n\n    return (\n        <details className={`Expandy Expandy--is-${isExpanded ? \"expanded\" : \"collapsed\"} ${className}`} {...props} ref={ref}\n            onToggle={e => {\n                const isExpanded = e.target.open\n                setIsExpanded(isExpanded)\n        }}>\n            <summary>\n            <div className=\"Expandy__trigger button-no-appearance\" >\n                <div className=\"Expandy__trigger__text\">\n                    <b>{ trigger }</b>\n                    <div className=\"Expandy__trigger__info\">\n                        { triggerExpandText || `tap me ${isExpanded ? \"to hide\" : \"for more\" } details` }\n                    </div>\n                </div>\n                <div className=\"Expandy__trigger__mark\">ἰ</div>\n            </div>\n\n            <Tooltip\n                className=\"Expandy__toggle\"\n                contents={<button className=\"button-no-appearance\">{isExpanded ? \"Collapse me\" : \"Expand me\"}</button>}\n                >\n                <div className=\"Expandy__toggle__arrow Expandy__toggle__arrow--up\">\n                    <Icon name=\"arrow\" direction=\"n\" size=\"s\" />\n                </div>\n                <div className=\"Expandy__toggle__arrow Expandy__toggle__arrow--down\">\n                    <Icon name=\"arrow\" direction=\"s\" size=\"s\" />\n                </div>\n                </Tooltip>\n                </summary>\n            <div className=\"Expandy__contents\">\n                {children }\n            </div>\n        </details>\n    )\n}\n\nexport default Expandy\n"],"sourceRoot":""}